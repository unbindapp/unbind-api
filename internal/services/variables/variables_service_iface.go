// Code generated by ifacemaker; DO NOT EDIT.

package variables_service

import (
	"context"

	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/internal/models"
)

// VariablesServiceInterface ...
type VariablesServiceInterface interface {
	// Delete a secret by key
	DeleteVariablesByKey(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesJSONInput, keys []models.VariableDeleteInput, referenceIDs []uuid.UUID) (*models.VariableResponse, error)
	// Create secrets in bulk
	UpdateVariables(ctx context.Context, userID uuid.UUID, bearerToken string, referenceInput []*models.VariableReferenceInputItem, input models.BaseVariablesJSONInput, behavior models.VariableUpdateBehavior, newVariables map[string][]byte) (*models.VariableResponse, error)
	GetVariables(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesInput) (*models.VariableResponse, error)
	GetAvailableVariableReferences(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, teamID, projectID, environmentID, serviceID uuid.UUID) ([]models.AvailableVariableReference, error)
	// Resolve a variable reference value for a key
	ResolveAvailableReferenceValue(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, input *models.ResolveVariableReferenceInput) (string, error)
	ResolveSingleReference(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, serviceID, referenceID uuid.UUID) (string, error)
	// Resolve variable references into map[string]string
	ResolveAllReferences(ctx context.Context, serviceID uuid.UUID) (map[string]string, error)
}
