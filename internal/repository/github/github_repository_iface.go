// Code generated by ifacemaker; DO NOT EDIT.

package github_repo

import (
	"context"

	"github.com/google/go-github/v69/github"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/internal/models"
)

// GithubRepositoryInterface ...
type GithubRepositoryInterface interface {
	// GetApp returns the GithubApp entity., ent.NotFoundError if not found.s
	GetApp(ctx context.Context) (*ent.GithubApp, error)
	// Get all github apps returns a slice of GithubApp entities.
	GetApps(ctx context.Context, withInstallations bool) ([]*ent.GithubApp, error)
	CreateApp(ctx context.Context, app *github.AppConfig, createdBy uuid.UUID) (*ent.GithubApp, error)
	GetGithubAppByID(ctx context.Context, ID int64) (*ent.GithubApp, error)
	GetInstallationByID(ctx context.Context, ID int64) (*ent.GithubInstallation, error)
	GetInstallationsByCreator(ctx context.Context, createdBy uuid.UUID) ([]*ent.GithubInstallation, error)
	GetInstallationsByAppID(ctx context.Context, appID int64) ([]*ent.GithubInstallation, error)
	UpsertInstallation(ctx context.Context, id int64, appID int64, accountID int64, accountLogin string, accountType githubinstallation.AccountType, accountURL string, repositorySelection githubinstallation.RepositorySelection, suspended bool, active bool, permissions models.GithubInstallationPermissions, events []string) (*ent.GithubInstallation, error)
	SetInstallationActive(ctx context.Context, id int64, active bool) (*ent.GithubInstallation, error)
	SetInstallationSuspended(ctx context.Context, id int64, suspended bool) (*ent.GithubInstallation, error)
}
