// Code generated by ifacemaker; DO NOT EDIT.

package repositories

import (
	"context"

	"github.com/unbindapp/unbind-api/ent"
	"github.com/unbindapp/unbind-api/internal/repository"
	environment_repo "github.com/unbindapp/unbind-api/internal/repository/environment"
	github_repo "github.com/unbindapp/unbind-api/internal/repository/github"
	group_repo "github.com/unbindapp/unbind-api/internal/repository/group"
	oauth_repo "github.com/unbindapp/unbind-api/internal/repository/oauth"
	permissions_repo "github.com/unbindapp/unbind-api/internal/repository/permissions"
	project_repo "github.com/unbindapp/unbind-api/internal/repository/project"
	team_repo "github.com/unbindapp/unbind-api/internal/repository/team"
	user_repo "github.com/unbindapp/unbind-api/internal/repository/user"
)

// RepositoriesInterface ...
type RepositoriesInterface interface {
	// Ent() returns the ent client
	Ent() *ent.Client
	// Github returns the GitHub repository
	Github() github_repo.GithubRepositoryInterface
	// User returns the User repository
	User() user_repo.UserRepositoryInterface
	// Oauth returns the OAuth repository
	Oauth() oauth_repo.OauthRepositoryInterface
	// Group returns the Group repository
	Group() group_repo.GroupRepositoryInterface
	// Project returns the Project repository
	Project() project_repo.ProjectRepositoryInterface
	// Team returns the Team repository
	Team() team_repo.TeamRepositoryInterface
	// Permissions returns the Permissions repository
	Permissions() permissions_repo.PermissionsRepositoryInterface
	// Environment returns the Environment repository
	Environment() environment_repo.EnvironmentRepositoryInterface
	WithTx(ctx context.Context, fn func(tx repository.TxInterface) error) error
}
