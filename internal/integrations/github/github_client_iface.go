// Code generated by ifacemaker; DO NOT EDIT.

package github

import (
	"context"

	"github.com/google/go-github/v69/github"
	"github.com/unbindapp/unbind-api/ent"
	"github.com/unbindapp/unbind-api/ent/schema"
)

// GithubClientInterface ...
type GithubClientInterface interface {
	// ClonePublicRepository clones a public repository without authentication
	ClonePublicRepository(ctx context.Context, repoURL string, refName string, commitSHA string) (string, error)
	// CloneRepository clones a repository with optional authentication
	CloneRepository(ctx context.Context, appID, installationID int64, appPrivateKey string, repoURL string, refName string, commitSHA string) (string, error)
	// Get the token we can use to authenticate with GitHub
	GetInstallationToken(ctx context.Context, appID int64, installationID int64, appPrivateKey string) (string, error)
	GetAuthenticatedClient(ctx context.Context, appID int64, installationID int64, appPrivateKey string) (*github.Client, error)
	// CreateAppManifest generates the GitHub App manifest
	CreateAppManifest(redirectUrl string, setupUrl string, forOrganization bool) (manifest *GitHubAppManifest, appName string, err error)
	// ManifestCodeConversion gets app configruation from github using the code
	ManifestCodeConversion(ctx context.Context, code string) (*github.AppConfig, error)
	// Read user's admin repositories (that they can configure CI/CD on)
	ReadUserAdminRepositories(ctx context.Context, installations []*ent.GithubInstallation) ([]*GithubRepository, error)
	// Get details for a repository
	GetRepositoryDetail(ctx context.Context, installation *ent.GithubInstallation, owner, repo string) (*GithubRepositoryDetail, error)
	// VerifyRepositoryAccess with resource cleanup
	VerifyRepositoryAccess(ctx context.Context, installation *ent.GithubInstallation, owner, repo string) (canAccess bool, repoUrl, defaultBranch string, err error)
	// Get branch head summary - sha, message, author
	// GetCommitSummary - get summary for a specific commit or branch head
	GetCommitSummary(ctx context.Context, installation *ent.GithubInstallation, owner, repo string, branchOrSHA string, isCommitSHA bool) (commitSHA, commitMessage string, committer *schema.GitCommitter, err error)
	ReadUserAdminOrganizations(ctx context.Context, installation *ent.GithubInstallation) ([]*github.Organization, error)
}
