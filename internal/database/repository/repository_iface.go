// Code generated by ifacemaker; DO NOT EDIT.

package repository

import (
	"context"
	"crypto/rsa"
	"time"

	"github.com/google/go-github/v69/github"
	"github.com/unbindapp/unbind-api/ent"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/internal/models"
)

// RepositoryInterface ...
type RepositoryInterface interface {
	// GetGithubApp returns the GithubApp entity., ent.NotFoundError if not found.s
	GetGithubApp(ctx context.Context) (*ent.GithubApp, error)
	// Get all github apps returns a slice of GithubApp entities.
	GetGithubApps(ctx context.Context, withInstallations bool) ([]*ent.GithubApp, error)
	CreateGithubApp(ctx context.Context, app *github.AppConfig) (*ent.GithubApp, error)
	GetGithubAppByID(ctx context.Context, ID int64) (*ent.GithubApp, error)
	GetGithubInstallationByID(ctx context.Context, ID int64) (*ent.GithubInstallation, error)
	GetGithubInstallationsByAppID(ctx context.Context, appID int64) ([]*ent.GithubInstallation, error)
	UpsertGithubInstallation(ctx context.Context, id int64, appID int64, accountID int64, accountLogin string, accountType githubinstallation.AccountType, accountURL string, repositorySelection githubinstallation.RepositorySelection, suspended bool, active bool, permissions models.GithubInstallationPermissions, events []string) (*ent.GithubInstallation, error)
	SetInstallationActive(ctx context.Context, id int64, active bool) (*ent.GithubInstallation, error)
	SetInstallationSuspended(ctx context.Context, id int64, suspended bool) (*ent.GithubInstallation, error)
	GetOrGenerateJWTPrivateKey(ctx context.Context) (*rsa.PrivateKey, []byte, error)
	CreateAuthCode(ctx context.Context, code, clientID, scope string, user *ent.User, expiresAt time.Time) (*ent.Oauth2Code, error)
	DeleteAuthCode(ctx context.Context, code string) error
	GetAuthCode(ctx context.Context, code string) (*ent.Oauth2Code, error)
	CreateToken(ctx context.Context, accessToken, refreshToken, clientID, scope string, expiresAt time.Time, user *ent.User) (*ent.Oauth2Token, error)
	RevokeAccessToken(ctx context.Context, accessToken string) error
	RevokeRefreshToken(ctx context.Context, refreshToken string) error
	GetByAccessToken(ctx context.Context, accessToken string) (*ent.Oauth2Token, error)
	GetByRefreshToken(ctx context.Context, refreshToken string) (*ent.Oauth2Token, error)
	// WithTx runs a function in a transaction
	// Usage example:
	//
	//	if err := r.WithTx(func(tx *ent.Tx) error {
	//		 Do stuff with tx
	//		return nil
	//	}); err != nil {
	//
	//		 Handle error
	//	}
	WithTx(ctx context.Context, fn func(tx TxInterface) error) error
	GetOrCreateUser(ctx context.Context, email string) (*ent.User, error)
	GetUserByEmail(ctx context.Context, email string) (*ent.User, error)
	// AuthenticateUser verifies a user's credentials and returns the user if successful
	AuthenticateUser(ctx context.Context, email, password string) (*ent.User, error)
}
