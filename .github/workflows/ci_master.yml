name: 💫 CI

on:
  push:
    branches: [master]

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_env:
    name: ⚙️ Setup environment
    runs-on: ubuntu-latest
    steps:
      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Put commit msg in environment
        run: echo "COMMIT_MSG=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

      - name: Escape commit message
        run: |
          echo "COMMIT_MSG=$(echo $COMMIT_MSG | tr -d \'\\\")" >> $GITHUB_ENV

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: Set build start in env variable
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

    outputs:
      short_sha: ${{ env.SHORT_SHA }}
      commit_msg: ${{ env.COMMIT_MSG }}
      branch_name: ${{ env.BRANCH_NAME }}
      build_start: ${{ env.BUILD_START }}

  build:
    name: 🔨 Build Binaries and Docker Image
    needs: setup_env
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runs-on: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runs-on: ubuntu-latest-arm64
            arch: arm64
    runs-on: ${{ matrix.runs-on }}
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
      BUILDX_CACHE_DIR: /tmp/.buildx-cache
    steps:
      - uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.arch }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-buildx-

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build GO Server Binary
        run: |
          cd cmd/api && GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ needs.setup_env.outputs.build_start }}" -o ./api && cd ../..

      - name: Build Oauth Server Binary
        run: |
          cd cmd/oauth2server && GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ needs.setup_env.outputs.build_start }}" -o ./oauth2server && cd ../..

      - name: Build CLI Binary
        run: |
          cd cmd/cli && GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ needs.setup_env.outputs.build_start }}" -o ./cli && cd ../..

      - name: Build Builder Binary
        run: |
          cd cmd/builder && GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ needs.setup_env.outputs.build_start }}" -o ./builder && cd ../..

      - name: Build and push image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ matrix.platform }}
          provenance: false
          push: true
          file: ./Dockerfile.ci
          tags: unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-${{ matrix.arch }}
          cache-from: |
            type=local,src=${{ env.BUILDX_CACHE_DIR }}
            type=registry,ref=unbindapp/unbind-api:cache-${{ needs.setup_env.outputs.branch_name }}-${{ matrix.arch }}
          cache-to: |
            type=local,dest=${{ env.BUILDX_CACHE_DIR }}-new,mode=max

      # Move cache to avoid growth
      - name: Move cache
        run: |
          rm -rf ${{ env.BUILDX_CACHE_DIR }}
          mv ${{ env.BUILDX_CACHE_DIR }}-new ${{ env.BUILDX_CACHE_DIR }}

      # Update the cache image in registry for future runs
      - name: Update cache image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: unbindapp/unbind-api:cache-${{ needs.setup_env.outputs.branch_name }}-${{ matrix.arch }}
          cache-from: type=local,src=${{ env.BUILDX_CACHE_DIR }}
          build-args: |
            VERSION=${{ needs.setup_env.outputs.short_sha }}
            COMMIT_MSG=${{ needs.setup_env.outputs.commit_msg }}
            BUILD_START=${{ needs.setup_env.outputs.build_start }}
          outputs: type=registry

      - name: Build and push builder image
        if: matrix.arch == 'arm64'
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          file: ./Dockerfile.ci-builder
          tags: unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-${{ matrix.arch }}

  create_manifest:
    name: 📦 Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [setup_env, build]
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push API manifest
        run: |
          docker manifest create unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }} \
            --amend unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-amd64 \
            --amend unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64

          docker manifest annotate --arch amd64 --os linux unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }} unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-amd64
          docker manifest annotate --arch arm64 --os linux unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }} unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64

          docker manifest push unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}

      - name: Create and push builder manifest
        run: |
          # Create a new manifest for the builder image
          docker manifest create unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }} \
            --amend unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64

          docker manifest annotate --arch arm64 --os linux unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }} unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64

          docker manifest push unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}

          # Also tag as latest
          docker manifest create unbindapp/unbind-builder:latest \
            --amend unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64
            
          docker manifest annotate --arch arm64 --os linux unbindapp/unbind-builder:latest unbindapp/unbind-builder:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}-arm64

          docker manifest push unbindapp/unbind-builder:latest

  deploy_prod:
    name: 🚀 Deploy Apps (PROD)
    runs-on: ubuntu-latest
    needs:
      - setup_env
      - create_manifest
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        uses: ./.github/actions/k8s-deploy
        with:
          image: unbindapp/unbind-api:${{ needs.setup_env.outputs.branch_name}}-${{ env.GITHUB_RUN_ID }}
          kube_config: ${{ secrets.K3S_KUBE_CONFIG }}
