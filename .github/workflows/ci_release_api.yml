name: Build API image for release

on:
  repository_dispatch:
    types: [build-release]

jobs:
  build:
    name: ðŸ”¨ Build Binaries and Docker Image
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runs-on: ubuntu-24.04
            arch: amd64
          - platform: linux/arm64
            runs-on: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.runs-on }}
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go with cache
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build GO Server Binary
        run: |
          cd cmd/api && CGO_ENABLED=0 GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ github.event.client_payload.version }} -X main.BuildImage=${{ github.event.client_payload.builder_image }}  -o ./api && cd ../..

      - name: Build Oauth Server Binary
        run: |
          cd cmd/oauth2server && CGO_ENABLED=0 GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ github.event.client_payload.version }} -o ./oauth2server && cd ../..

      - name: Build CLI Binary
        run: |
          cd cmd/cli && CGO_ENABLED=0 GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.Version=${{ github.event.client_payload.version }} -o ./cli && cd ../..

      - name: Build and push image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          provenance: false
          push: true
          file: ./Dockerfile.ci
          tags: unbindapp/unbind-api:${{ github.event.client_payload.version }}-${{ matrix.arch }}

  create_manifest:
    name: ðŸ“¦ Create Multi-Arch Manifest
    runs-on: ubuntu-24.04
    needs: [build]
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest
        run: |
          docker manifest create unbindapp/unbind-api:${{ github.event.client_payload.version }}  \
            --amend unbindapp/unbind-api:${{ github.event.client_payload.version }}-amd64 \
            --amend unbindapp/unbind-api:${{ github.event.client_payload.version }}-arm64

          docker manifest annotate --arch amd64 --os linux unbindapp/unbind-api:${{ github.event.client_payload.version }}  unbindapp/unbind-api:${{ github.event.client_payload.version }}-amd64
          docker manifest annotate --arch arm64 --os linux unbindapp/unbind-api:${{ github.event.client_payload.version }}  unbindapp/unbind-api:${{ github.event.client_payload.version }}-arm64

          docker manifest push unbindapp/unbind-api:${{ github.event.client_payload.version }}
