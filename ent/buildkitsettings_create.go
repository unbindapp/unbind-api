// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildkitsettings"
)

// BuildkitSettingsCreate is the builder for creating a BuildkitSettings entity.
type BuildkitSettingsCreate struct {
	config
	mutation *BuildkitSettingsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bsc *BuildkitSettingsCreate) SetCreatedAt(t time.Time) *BuildkitSettingsCreate {
	bsc.mutation.SetCreatedAt(t)
	return bsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsc *BuildkitSettingsCreate) SetNillableCreatedAt(t *time.Time) *BuildkitSettingsCreate {
	if t != nil {
		bsc.SetCreatedAt(*t)
	}
	return bsc
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BuildkitSettingsCreate) SetUpdatedAt(t time.Time) *BuildkitSettingsCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BuildkitSettingsCreate) SetNillableUpdatedAt(t *time.Time) *BuildkitSettingsCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetMaxParallelism sets the "max_parallelism" field.
func (bsc *BuildkitSettingsCreate) SetMaxParallelism(i int) *BuildkitSettingsCreate {
	bsc.mutation.SetMaxParallelism(i)
	return bsc
}

// SetNillableMaxParallelism sets the "max_parallelism" field if the given value is not nil.
func (bsc *BuildkitSettingsCreate) SetNillableMaxParallelism(i *int) *BuildkitSettingsCreate {
	if i != nil {
		bsc.SetMaxParallelism(*i)
	}
	return bsc
}

// SetReplicas sets the "replicas" field.
func (bsc *BuildkitSettingsCreate) SetReplicas(i int) *BuildkitSettingsCreate {
	bsc.mutation.SetReplicas(i)
	return bsc
}

// SetNillableReplicas sets the "replicas" field if the given value is not nil.
func (bsc *BuildkitSettingsCreate) SetNillableReplicas(i *int) *BuildkitSettingsCreate {
	if i != nil {
		bsc.SetReplicas(*i)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BuildkitSettingsCreate) SetID(u uuid.UUID) *BuildkitSettingsCreate {
	bsc.mutation.SetID(u)
	return bsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bsc *BuildkitSettingsCreate) SetNillableID(u *uuid.UUID) *BuildkitSettingsCreate {
	if u != nil {
		bsc.SetID(*u)
	}
	return bsc
}

// Mutation returns the BuildkitSettingsMutation object of the builder.
func (bsc *BuildkitSettingsCreate) Mutation() *BuildkitSettingsMutation {
	return bsc.mutation
}

// Save creates the BuildkitSettings in the database.
func (bsc *BuildkitSettingsCreate) Save(ctx context.Context) (*BuildkitSettings, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BuildkitSettingsCreate) SaveX(ctx context.Context) *BuildkitSettings {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BuildkitSettingsCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BuildkitSettingsCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BuildkitSettingsCreate) defaults() {
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		v := buildkitsettings.DefaultCreatedAt()
		bsc.mutation.SetCreatedAt(v)
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := buildkitsettings.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bsc.mutation.MaxParallelism(); !ok {
		v := buildkitsettings.DefaultMaxParallelism
		bsc.mutation.SetMaxParallelism(v)
	}
	if _, ok := bsc.mutation.Replicas(); !ok {
		v := buildkitsettings.DefaultReplicas
		bsc.mutation.SetReplicas(v)
	}
	if _, ok := bsc.mutation.ID(); !ok {
		v := buildkitsettings.DefaultID()
		bsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BuildkitSettingsCreate) check() error {
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BuildkitSettings.created_at"`)}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BuildkitSettings.updated_at"`)}
	}
	if _, ok := bsc.mutation.MaxParallelism(); !ok {
		return &ValidationError{Name: "max_parallelism", err: errors.New(`ent: missing required field "BuildkitSettings.max_parallelism"`)}
	}
	if v, ok := bsc.mutation.MaxParallelism(); ok {
		if err := buildkitsettings.MaxParallelismValidator(v); err != nil {
			return &ValidationError{Name: "max_parallelism", err: fmt.Errorf(`ent: validator failed for field "BuildkitSettings.max_parallelism": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.Replicas(); !ok {
		return &ValidationError{Name: "replicas", err: errors.New(`ent: missing required field "BuildkitSettings.replicas"`)}
	}
	if v, ok := bsc.mutation.Replicas(); ok {
		if err := buildkitsettings.ReplicasValidator(v); err != nil {
			return &ValidationError{Name: "replicas", err: fmt.Errorf(`ent: validator failed for field "BuildkitSettings.replicas": %w`, err)}
		}
	}
	return nil
}

func (bsc *BuildkitSettingsCreate) sqlSave(ctx context.Context) (*BuildkitSettings, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BuildkitSettingsCreate) createSpec() (*BuildkitSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &BuildkitSettings{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(buildkitsettings.Table, sqlgraph.NewFieldSpec(buildkitsettings.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bsc.conflict
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.SetField(buildkitsettings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(buildkitsettings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bsc.mutation.MaxParallelism(); ok {
		_spec.SetField(buildkitsettings.FieldMaxParallelism, field.TypeInt, value)
		_node.MaxParallelism = value
	}
	if value, ok := bsc.mutation.Replicas(); ok {
		_spec.SetField(buildkitsettings.FieldReplicas, field.TypeInt, value)
		_node.Replicas = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BuildkitSettings.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BuildkitSettingsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bsc *BuildkitSettingsCreate) OnConflict(opts ...sql.ConflictOption) *BuildkitSettingsUpsertOne {
	bsc.conflict = opts
	return &BuildkitSettingsUpsertOne{
		create: bsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsc *BuildkitSettingsCreate) OnConflictColumns(columns ...string) *BuildkitSettingsUpsertOne {
	bsc.conflict = append(bsc.conflict, sql.ConflictColumns(columns...))
	return &BuildkitSettingsUpsertOne{
		create: bsc,
	}
}

type (
	// BuildkitSettingsUpsertOne is the builder for "upsert"-ing
	//  one BuildkitSettings node.
	BuildkitSettingsUpsertOne struct {
		create *BuildkitSettingsCreate
	}

	// BuildkitSettingsUpsert is the "OnConflict" setter.
	BuildkitSettingsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildkitSettingsUpsert) SetUpdatedAt(v time.Time) *BuildkitSettingsUpsert {
	u.Set(buildkitsettings.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildkitSettingsUpsert) UpdateUpdatedAt() *BuildkitSettingsUpsert {
	u.SetExcluded(buildkitsettings.FieldUpdatedAt)
	return u
}

// SetMaxParallelism sets the "max_parallelism" field.
func (u *BuildkitSettingsUpsert) SetMaxParallelism(v int) *BuildkitSettingsUpsert {
	u.Set(buildkitsettings.FieldMaxParallelism, v)
	return u
}

// UpdateMaxParallelism sets the "max_parallelism" field to the value that was provided on create.
func (u *BuildkitSettingsUpsert) UpdateMaxParallelism() *BuildkitSettingsUpsert {
	u.SetExcluded(buildkitsettings.FieldMaxParallelism)
	return u
}

// AddMaxParallelism adds v to the "max_parallelism" field.
func (u *BuildkitSettingsUpsert) AddMaxParallelism(v int) *BuildkitSettingsUpsert {
	u.Add(buildkitsettings.FieldMaxParallelism, v)
	return u
}

// SetReplicas sets the "replicas" field.
func (u *BuildkitSettingsUpsert) SetReplicas(v int) *BuildkitSettingsUpsert {
	u.Set(buildkitsettings.FieldReplicas, v)
	return u
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *BuildkitSettingsUpsert) UpdateReplicas() *BuildkitSettingsUpsert {
	u.SetExcluded(buildkitsettings.FieldReplicas)
	return u
}

// AddReplicas adds v to the "replicas" field.
func (u *BuildkitSettingsUpsert) AddReplicas(v int) *BuildkitSettingsUpsert {
	u.Add(buildkitsettings.FieldReplicas, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(buildkitsettings.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BuildkitSettingsUpsertOne) UpdateNewValues() *BuildkitSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(buildkitsettings.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(buildkitsettings.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BuildkitSettingsUpsertOne) Ignore() *BuildkitSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BuildkitSettingsUpsertOne) DoNothing() *BuildkitSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BuildkitSettingsCreate.OnConflict
// documentation for more info.
func (u *BuildkitSettingsUpsertOne) Update(set func(*BuildkitSettingsUpsert)) *BuildkitSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BuildkitSettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildkitSettingsUpsertOne) SetUpdatedAt(v time.Time) *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertOne) UpdateUpdatedAt() *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMaxParallelism sets the "max_parallelism" field.
func (u *BuildkitSettingsUpsertOne) SetMaxParallelism(v int) *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetMaxParallelism(v)
	})
}

// AddMaxParallelism adds v to the "max_parallelism" field.
func (u *BuildkitSettingsUpsertOne) AddMaxParallelism(v int) *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.AddMaxParallelism(v)
	})
}

// UpdateMaxParallelism sets the "max_parallelism" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertOne) UpdateMaxParallelism() *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateMaxParallelism()
	})
}

// SetReplicas sets the "replicas" field.
func (u *BuildkitSettingsUpsertOne) SetReplicas(v int) *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetReplicas(v)
	})
}

// AddReplicas adds v to the "replicas" field.
func (u *BuildkitSettingsUpsertOne) AddReplicas(v int) *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.AddReplicas(v)
	})
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertOne) UpdateReplicas() *BuildkitSettingsUpsertOne {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateReplicas()
	})
}

// Exec executes the query.
func (u *BuildkitSettingsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BuildkitSettingsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BuildkitSettingsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BuildkitSettingsUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BuildkitSettingsUpsertOne.ID is not supported by MySQL driver. Use BuildkitSettingsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BuildkitSettingsUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BuildkitSettingsCreateBulk is the builder for creating many BuildkitSettings entities in bulk.
type BuildkitSettingsCreateBulk struct {
	config
	err      error
	builders []*BuildkitSettingsCreate
	conflict []sql.ConflictOption
}

// Save creates the BuildkitSettings entities in the database.
func (bscb *BuildkitSettingsCreateBulk) Save(ctx context.Context) ([]*BuildkitSettings, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BuildkitSettings, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BuildkitSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BuildkitSettingsCreateBulk) SaveX(ctx context.Context) []*BuildkitSettings {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BuildkitSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BuildkitSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BuildkitSettings.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BuildkitSettingsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bscb *BuildkitSettingsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BuildkitSettingsUpsertBulk {
	bscb.conflict = opts
	return &BuildkitSettingsUpsertBulk{
		create: bscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bscb *BuildkitSettingsCreateBulk) OnConflictColumns(columns ...string) *BuildkitSettingsUpsertBulk {
	bscb.conflict = append(bscb.conflict, sql.ConflictColumns(columns...))
	return &BuildkitSettingsUpsertBulk{
		create: bscb,
	}
}

// BuildkitSettingsUpsertBulk is the builder for "upsert"-ing
// a bulk of BuildkitSettings nodes.
type BuildkitSettingsUpsertBulk struct {
	create *BuildkitSettingsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(buildkitsettings.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BuildkitSettingsUpsertBulk) UpdateNewValues() *BuildkitSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(buildkitsettings.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(buildkitsettings.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BuildkitSettings.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BuildkitSettingsUpsertBulk) Ignore() *BuildkitSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BuildkitSettingsUpsertBulk) DoNothing() *BuildkitSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BuildkitSettingsCreateBulk.OnConflict
// documentation for more info.
func (u *BuildkitSettingsUpsertBulk) Update(set func(*BuildkitSettingsUpsert)) *BuildkitSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BuildkitSettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildkitSettingsUpsertBulk) SetUpdatedAt(v time.Time) *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertBulk) UpdateUpdatedAt() *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetMaxParallelism sets the "max_parallelism" field.
func (u *BuildkitSettingsUpsertBulk) SetMaxParallelism(v int) *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetMaxParallelism(v)
	})
}

// AddMaxParallelism adds v to the "max_parallelism" field.
func (u *BuildkitSettingsUpsertBulk) AddMaxParallelism(v int) *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.AddMaxParallelism(v)
	})
}

// UpdateMaxParallelism sets the "max_parallelism" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertBulk) UpdateMaxParallelism() *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateMaxParallelism()
	})
}

// SetReplicas sets the "replicas" field.
func (u *BuildkitSettingsUpsertBulk) SetReplicas(v int) *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.SetReplicas(v)
	})
}

// AddReplicas adds v to the "replicas" field.
func (u *BuildkitSettingsUpsertBulk) AddReplicas(v int) *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.AddReplicas(v)
	})
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *BuildkitSettingsUpsertBulk) UpdateReplicas() *BuildkitSettingsUpsertBulk {
	return u.Update(func(s *BuildkitSettingsUpsert) {
		s.UpdateReplicas()
	})
}

// Exec executes the query.
func (u *BuildkitSettingsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BuildkitSettingsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BuildkitSettingsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BuildkitSettingsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
