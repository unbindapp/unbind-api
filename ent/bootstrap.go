// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/unbindapp/unbind-api/ent/bootstrap"
)

// Bootstrap is the model entity for the Bootstrap schema.
type Bootstrap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IsBootstrapped holds the value of the "is_bootstrapped" field.
	IsBootstrapped bool `json:"is_bootstrapped,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bootstrap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bootstrap.FieldIsBootstrapped:
			values[i] = new(sql.NullBool)
		case bootstrap.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bootstrap fields.
func (b *Bootstrap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bootstrap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bootstrap.FieldIsBootstrapped:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_bootstrapped", values[i])
			} else if value.Valid {
				b.IsBootstrapped = value.Bool
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bootstrap.
// This includes values selected through modifiers, order, etc.
func (b *Bootstrap) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Bootstrap.
// Note that you need to call Bootstrap.Unwrap() before calling this method if this Bootstrap
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bootstrap) Update() *BootstrapUpdateOne {
	return NewBootstrapClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bootstrap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bootstrap) Unwrap() *Bootstrap {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bootstrap is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bootstrap) String() string {
	var builder strings.Builder
	builder.WriteString("Bootstrap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("is_bootstrapped=")
	builder.WriteString(fmt.Sprintf("%v", b.IsBootstrapped))
	builder.WriteByte(')')
	return builder.String()
}

// Bootstraps is a parsable slice of Bootstrap.
type Bootstraps []*Bootstrap
