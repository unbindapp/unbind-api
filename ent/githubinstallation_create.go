// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
)

// GithubInstallationCreate is the builder for creating a GithubInstallation entity.
type GithubInstallationCreate struct {
	config
	mutation *GithubInstallationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gic *GithubInstallationCreate) SetCreatedAt(t time.Time) *GithubInstallationCreate {
	gic.mutation.SetCreatedAt(t)
	return gic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillableCreatedAt(t *time.Time) *GithubInstallationCreate {
	if t != nil {
		gic.SetCreatedAt(*t)
	}
	return gic
}

// SetUpdatedAt sets the "updated_at" field.
func (gic *GithubInstallationCreate) SetUpdatedAt(t time.Time) *GithubInstallationCreate {
	gic.mutation.SetUpdatedAt(t)
	return gic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillableUpdatedAt(t *time.Time) *GithubInstallationCreate {
	if t != nil {
		gic.SetUpdatedAt(*t)
	}
	return gic
}

// SetGithubAppID sets the "github_app_id" field.
func (gic *GithubInstallationCreate) SetGithubAppID(i int64) *GithubInstallationCreate {
	gic.mutation.SetGithubAppID(i)
	return gic
}

// SetAccountID sets the "account_id" field.
func (gic *GithubInstallationCreate) SetAccountID(i int64) *GithubInstallationCreate {
	gic.mutation.SetAccountID(i)
	return gic
}

// SetAccountLogin sets the "account_login" field.
func (gic *GithubInstallationCreate) SetAccountLogin(s string) *GithubInstallationCreate {
	gic.mutation.SetAccountLogin(s)
	return gic
}

// SetAccountType sets the "account_type" field.
func (gic *GithubInstallationCreate) SetAccountType(gt githubinstallation.AccountType) *GithubInstallationCreate {
	gic.mutation.SetAccountType(gt)
	return gic
}

// SetAccountURL sets the "account_url" field.
func (gic *GithubInstallationCreate) SetAccountURL(s string) *GithubInstallationCreate {
	gic.mutation.SetAccountURL(s)
	return gic
}

// SetRepositorySelection sets the "repository_selection" field.
func (gic *GithubInstallationCreate) SetRepositorySelection(gs githubinstallation.RepositorySelection) *GithubInstallationCreate {
	gic.mutation.SetRepositorySelection(gs)
	return gic
}

// SetNillableRepositorySelection sets the "repository_selection" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillableRepositorySelection(gs *githubinstallation.RepositorySelection) *GithubInstallationCreate {
	if gs != nil {
		gic.SetRepositorySelection(*gs)
	}
	return gic
}

// SetSuspended sets the "suspended" field.
func (gic *GithubInstallationCreate) SetSuspended(b bool) *GithubInstallationCreate {
	gic.mutation.SetSuspended(b)
	return gic
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillableSuspended(b *bool) *GithubInstallationCreate {
	if b != nil {
		gic.SetSuspended(*b)
	}
	return gic
}

// SetActive sets the "active" field.
func (gic *GithubInstallationCreate) SetActive(b bool) *GithubInstallationCreate {
	gic.mutation.SetActive(b)
	return gic
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillableActive(b *bool) *GithubInstallationCreate {
	if b != nil {
		gic.SetActive(*b)
	}
	return gic
}

// SetPermissions sets the "permissions" field.
func (gic *GithubInstallationCreate) SetPermissions(sip schema.GithubInstallationPermissions) *GithubInstallationCreate {
	gic.mutation.SetPermissions(sip)
	return gic
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (gic *GithubInstallationCreate) SetNillablePermissions(sip *schema.GithubInstallationPermissions) *GithubInstallationCreate {
	if sip != nil {
		gic.SetPermissions(*sip)
	}
	return gic
}

// SetEvents sets the "events" field.
func (gic *GithubInstallationCreate) SetEvents(s []string) *GithubInstallationCreate {
	gic.mutation.SetEvents(s)
	return gic
}

// SetID sets the "id" field.
func (gic *GithubInstallationCreate) SetID(i int64) *GithubInstallationCreate {
	gic.mutation.SetID(i)
	return gic
}

// SetGithubApp sets the "github_app" edge to the GithubApp entity.
func (gic *GithubInstallationCreate) SetGithubApp(g *GithubApp) *GithubInstallationCreate {
	return gic.SetGithubAppID(g.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (gic *GithubInstallationCreate) AddServiceIDs(ids ...uuid.UUID) *GithubInstallationCreate {
	gic.mutation.AddServiceIDs(ids...)
	return gic
}

// AddServices adds the "services" edges to the Service entity.
func (gic *GithubInstallationCreate) AddServices(s ...*Service) *GithubInstallationCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gic.AddServiceIDs(ids...)
}

// Mutation returns the GithubInstallationMutation object of the builder.
func (gic *GithubInstallationCreate) Mutation() *GithubInstallationMutation {
	return gic.mutation
}

// Save creates the GithubInstallation in the database.
func (gic *GithubInstallationCreate) Save(ctx context.Context) (*GithubInstallation, error) {
	gic.defaults()
	return withHooks(ctx, gic.sqlSave, gic.mutation, gic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gic *GithubInstallationCreate) SaveX(ctx context.Context) *GithubInstallation {
	v, err := gic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gic *GithubInstallationCreate) Exec(ctx context.Context) error {
	_, err := gic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gic *GithubInstallationCreate) ExecX(ctx context.Context) {
	if err := gic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gic *GithubInstallationCreate) defaults() {
	if _, ok := gic.mutation.CreatedAt(); !ok {
		v := githubinstallation.DefaultCreatedAt()
		gic.mutation.SetCreatedAt(v)
	}
	if _, ok := gic.mutation.UpdatedAt(); !ok {
		v := githubinstallation.DefaultUpdatedAt()
		gic.mutation.SetUpdatedAt(v)
	}
	if _, ok := gic.mutation.RepositorySelection(); !ok {
		v := githubinstallation.DefaultRepositorySelection
		gic.mutation.SetRepositorySelection(v)
	}
	if _, ok := gic.mutation.Suspended(); !ok {
		v := githubinstallation.DefaultSuspended
		gic.mutation.SetSuspended(v)
	}
	if _, ok := gic.mutation.Active(); !ok {
		v := githubinstallation.DefaultActive
		gic.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gic *GithubInstallationCreate) check() error {
	if _, ok := gic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubInstallation.created_at"`)}
	}
	if _, ok := gic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GithubInstallation.updated_at"`)}
	}
	if _, ok := gic.mutation.GithubAppID(); !ok {
		return &ValidationError{Name: "github_app_id", err: errors.New(`ent: missing required field "GithubInstallation.github_app_id"`)}
	}
	if _, ok := gic.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "GithubInstallation.account_id"`)}
	}
	if _, ok := gic.mutation.AccountLogin(); !ok {
		return &ValidationError{Name: "account_login", err: errors.New(`ent: missing required field "GithubInstallation.account_login"`)}
	}
	if v, ok := gic.mutation.AccountLogin(); ok {
		if err := githubinstallation.AccountLoginValidator(v); err != nil {
			return &ValidationError{Name: "account_login", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_login": %w`, err)}
		}
	}
	if _, ok := gic.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "GithubInstallation.account_type"`)}
	}
	if v, ok := gic.mutation.AccountType(); ok {
		if err := githubinstallation.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_type": %w`, err)}
		}
	}
	if _, ok := gic.mutation.AccountURL(); !ok {
		return &ValidationError{Name: "account_url", err: errors.New(`ent: missing required field "GithubInstallation.account_url"`)}
	}
	if v, ok := gic.mutation.AccountURL(); ok {
		if err := githubinstallation.AccountURLValidator(v); err != nil {
			return &ValidationError{Name: "account_url", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_url": %w`, err)}
		}
	}
	if _, ok := gic.mutation.RepositorySelection(); !ok {
		return &ValidationError{Name: "repository_selection", err: errors.New(`ent: missing required field "GithubInstallation.repository_selection"`)}
	}
	if v, ok := gic.mutation.RepositorySelection(); ok {
		if err := githubinstallation.RepositorySelectionValidator(v); err != nil {
			return &ValidationError{Name: "repository_selection", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.repository_selection": %w`, err)}
		}
	}
	if _, ok := gic.mutation.Suspended(); !ok {
		return &ValidationError{Name: "suspended", err: errors.New(`ent: missing required field "GithubInstallation.suspended"`)}
	}
	if _, ok := gic.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "GithubInstallation.active"`)}
	}
	if v, ok := gic.mutation.ID(); ok {
		if err := githubinstallation.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.id": %w`, err)}
		}
	}
	if len(gic.mutation.GithubAppIDs()) == 0 {
		return &ValidationError{Name: "github_app", err: errors.New(`ent: missing required edge "GithubInstallation.github_app"`)}
	}
	return nil
}

func (gic *GithubInstallationCreate) sqlSave(ctx context.Context) (*GithubInstallation, error) {
	if err := gic.check(); err != nil {
		return nil, err
	}
	_node, _spec := gic.createSpec()
	if err := sqlgraph.CreateNode(ctx, gic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gic.mutation.id = &_node.ID
	gic.mutation.done = true
	return _node, nil
}

func (gic *GithubInstallationCreate) createSpec() (*GithubInstallation, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubInstallation{config: gic.config}
		_spec = sqlgraph.NewCreateSpec(githubinstallation.Table, sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = gic.conflict
	if id, ok := gic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gic.mutation.CreatedAt(); ok {
		_spec.SetField(githubinstallation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gic.mutation.UpdatedAt(); ok {
		_spec.SetField(githubinstallation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gic.mutation.AccountID(); ok {
		_spec.SetField(githubinstallation.FieldAccountID, field.TypeInt64, value)
		_node.AccountID = value
	}
	if value, ok := gic.mutation.AccountLogin(); ok {
		_spec.SetField(githubinstallation.FieldAccountLogin, field.TypeString, value)
		_node.AccountLogin = value
	}
	if value, ok := gic.mutation.AccountType(); ok {
		_spec.SetField(githubinstallation.FieldAccountType, field.TypeEnum, value)
		_node.AccountType = value
	}
	if value, ok := gic.mutation.AccountURL(); ok {
		_spec.SetField(githubinstallation.FieldAccountURL, field.TypeString, value)
		_node.AccountURL = value
	}
	if value, ok := gic.mutation.RepositorySelection(); ok {
		_spec.SetField(githubinstallation.FieldRepositorySelection, field.TypeEnum, value)
		_node.RepositorySelection = value
	}
	if value, ok := gic.mutation.Suspended(); ok {
		_spec.SetField(githubinstallation.FieldSuspended, field.TypeBool, value)
		_node.Suspended = value
	}
	if value, ok := gic.mutation.Active(); ok {
		_spec.SetField(githubinstallation.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := gic.mutation.Permissions(); ok {
		_spec.SetField(githubinstallation.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := gic.mutation.Events(); ok {
		_spec.SetField(githubinstallation.FieldEvents, field.TypeJSON, value)
		_node.Events = value
	}
	if nodes := gic.mutation.GithubAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubinstallation.GithubAppTable,
			Columns: []string{githubinstallation.GithubAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GithubAppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gic.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubInstallation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubInstallationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gic *GithubInstallationCreate) OnConflict(opts ...sql.ConflictOption) *GithubInstallationUpsertOne {
	gic.conflict = opts
	return &GithubInstallationUpsertOne{
		create: gic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gic *GithubInstallationCreate) OnConflictColumns(columns ...string) *GithubInstallationUpsertOne {
	gic.conflict = append(gic.conflict, sql.ConflictColumns(columns...))
	return &GithubInstallationUpsertOne{
		create: gic,
	}
}

type (
	// GithubInstallationUpsertOne is the builder for "upsert"-ing
	//  one GithubInstallation node.
	GithubInstallationUpsertOne struct {
		create *GithubInstallationCreate
	}

	// GithubInstallationUpsert is the "OnConflict" setter.
	GithubInstallationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubInstallationUpsert) SetUpdatedAt(v time.Time) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateUpdatedAt() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldUpdatedAt)
	return u
}

// SetGithubAppID sets the "github_app_id" field.
func (u *GithubInstallationUpsert) SetGithubAppID(v int64) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldGithubAppID, v)
	return u
}

// UpdateGithubAppID sets the "github_app_id" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateGithubAppID() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldGithubAppID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *GithubInstallationUpsert) SetAccountID(v int64) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateAccountID() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldAccountID)
	return u
}

// AddAccountID adds v to the "account_id" field.
func (u *GithubInstallationUpsert) AddAccountID(v int64) *GithubInstallationUpsert {
	u.Add(githubinstallation.FieldAccountID, v)
	return u
}

// SetAccountLogin sets the "account_login" field.
func (u *GithubInstallationUpsert) SetAccountLogin(v string) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldAccountLogin, v)
	return u
}

// UpdateAccountLogin sets the "account_login" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateAccountLogin() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldAccountLogin)
	return u
}

// SetAccountType sets the "account_type" field.
func (u *GithubInstallationUpsert) SetAccountType(v githubinstallation.AccountType) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldAccountType, v)
	return u
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateAccountType() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldAccountType)
	return u
}

// SetAccountURL sets the "account_url" field.
func (u *GithubInstallationUpsert) SetAccountURL(v string) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldAccountURL, v)
	return u
}

// UpdateAccountURL sets the "account_url" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateAccountURL() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldAccountURL)
	return u
}

// SetRepositorySelection sets the "repository_selection" field.
func (u *GithubInstallationUpsert) SetRepositorySelection(v githubinstallation.RepositorySelection) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldRepositorySelection, v)
	return u
}

// UpdateRepositorySelection sets the "repository_selection" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateRepositorySelection() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldRepositorySelection)
	return u
}

// SetSuspended sets the "suspended" field.
func (u *GithubInstallationUpsert) SetSuspended(v bool) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldSuspended, v)
	return u
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateSuspended() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldSuspended)
	return u
}

// SetActive sets the "active" field.
func (u *GithubInstallationUpsert) SetActive(v bool) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateActive() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldActive)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *GithubInstallationUpsert) SetPermissions(v schema.GithubInstallationPermissions) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdatePermissions() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldPermissions)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GithubInstallationUpsert) ClearPermissions() *GithubInstallationUpsert {
	u.SetNull(githubinstallation.FieldPermissions)
	return u
}

// SetEvents sets the "events" field.
func (u *GithubInstallationUpsert) SetEvents(v []string) *GithubInstallationUpsert {
	u.Set(githubinstallation.FieldEvents, v)
	return u
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *GithubInstallationUpsert) UpdateEvents() *GithubInstallationUpsert {
	u.SetExcluded(githubinstallation.FieldEvents)
	return u
}

// ClearEvents clears the value of the "events" field.
func (u *GithubInstallationUpsert) ClearEvents() *GithubInstallationUpsert {
	u.SetNull(githubinstallation.FieldEvents)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubinstallation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubInstallationUpsertOne) UpdateNewValues() *GithubInstallationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(githubinstallation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(githubinstallation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GithubInstallationUpsertOne) Ignore() *GithubInstallationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubInstallationUpsertOne) DoNothing() *GithubInstallationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubInstallationCreate.OnConflict
// documentation for more info.
func (u *GithubInstallationUpsertOne) Update(set func(*GithubInstallationUpsert)) *GithubInstallationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubInstallationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubInstallationUpsertOne) SetUpdatedAt(v time.Time) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateUpdatedAt() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGithubAppID sets the "github_app_id" field.
func (u *GithubInstallationUpsertOne) SetGithubAppID(v int64) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetGithubAppID(v)
	})
}

// UpdateGithubAppID sets the "github_app_id" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateGithubAppID() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateGithubAppID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GithubInstallationUpsertOne) SetAccountID(v int64) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *GithubInstallationUpsertOne) AddAccountID(v int64) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateAccountID() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountID()
	})
}

// SetAccountLogin sets the "account_login" field.
func (u *GithubInstallationUpsertOne) SetAccountLogin(v string) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountLogin(v)
	})
}

// UpdateAccountLogin sets the "account_login" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateAccountLogin() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountLogin()
	})
}

// SetAccountType sets the "account_type" field.
func (u *GithubInstallationUpsertOne) SetAccountType(v githubinstallation.AccountType) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateAccountType() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountType()
	})
}

// SetAccountURL sets the "account_url" field.
func (u *GithubInstallationUpsertOne) SetAccountURL(v string) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountURL(v)
	})
}

// UpdateAccountURL sets the "account_url" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateAccountURL() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountURL()
	})
}

// SetRepositorySelection sets the "repository_selection" field.
func (u *GithubInstallationUpsertOne) SetRepositorySelection(v githubinstallation.RepositorySelection) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetRepositorySelection(v)
	})
}

// UpdateRepositorySelection sets the "repository_selection" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateRepositorySelection() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateRepositorySelection()
	})
}

// SetSuspended sets the "suspended" field.
func (u *GithubInstallationUpsertOne) SetSuspended(v bool) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetSuspended(v)
	})
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateSuspended() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateSuspended()
	})
}

// SetActive sets the "active" field.
func (u *GithubInstallationUpsertOne) SetActive(v bool) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateActive() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateActive()
	})
}

// SetPermissions sets the "permissions" field.
func (u *GithubInstallationUpsertOne) SetPermissions(v schema.GithubInstallationPermissions) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdatePermissions() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GithubInstallationUpsertOne) ClearPermissions() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.ClearPermissions()
	})
}

// SetEvents sets the "events" field.
func (u *GithubInstallationUpsertOne) SetEvents(v []string) *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetEvents(v)
	})
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *GithubInstallationUpsertOne) UpdateEvents() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateEvents()
	})
}

// ClearEvents clears the value of the "events" field.
func (u *GithubInstallationUpsertOne) ClearEvents() *GithubInstallationUpsertOne {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.ClearEvents()
	})
}

// Exec executes the query.
func (u *GithubInstallationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubInstallationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubInstallationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GithubInstallationUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GithubInstallationUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GithubInstallationCreateBulk is the builder for creating many GithubInstallation entities in bulk.
type GithubInstallationCreateBulk struct {
	config
	err      error
	builders []*GithubInstallationCreate
	conflict []sql.ConflictOption
}

// Save creates the GithubInstallation entities in the database.
func (gicb *GithubInstallationCreateBulk) Save(ctx context.Context) ([]*GithubInstallation, error) {
	if gicb.err != nil {
		return nil, gicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gicb.builders))
	nodes := make([]*GithubInstallation, len(gicb.builders))
	mutators := make([]Mutator, len(gicb.builders))
	for i := range gicb.builders {
		func(i int, root context.Context) {
			builder := gicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubInstallationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gicb *GithubInstallationCreateBulk) SaveX(ctx context.Context) []*GithubInstallation {
	v, err := gicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gicb *GithubInstallationCreateBulk) Exec(ctx context.Context) error {
	_, err := gicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gicb *GithubInstallationCreateBulk) ExecX(ctx context.Context) {
	if err := gicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubInstallation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubInstallationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gicb *GithubInstallationCreateBulk) OnConflict(opts ...sql.ConflictOption) *GithubInstallationUpsertBulk {
	gicb.conflict = opts
	return &GithubInstallationUpsertBulk{
		create: gicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gicb *GithubInstallationCreateBulk) OnConflictColumns(columns ...string) *GithubInstallationUpsertBulk {
	gicb.conflict = append(gicb.conflict, sql.ConflictColumns(columns...))
	return &GithubInstallationUpsertBulk{
		create: gicb,
	}
}

// GithubInstallationUpsertBulk is the builder for "upsert"-ing
// a bulk of GithubInstallation nodes.
type GithubInstallationUpsertBulk struct {
	create *GithubInstallationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubinstallation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubInstallationUpsertBulk) UpdateNewValues() *GithubInstallationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(githubinstallation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(githubinstallation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubInstallation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GithubInstallationUpsertBulk) Ignore() *GithubInstallationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubInstallationUpsertBulk) DoNothing() *GithubInstallationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubInstallationCreateBulk.OnConflict
// documentation for more info.
func (u *GithubInstallationUpsertBulk) Update(set func(*GithubInstallationUpsert)) *GithubInstallationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubInstallationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubInstallationUpsertBulk) SetUpdatedAt(v time.Time) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateUpdatedAt() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetGithubAppID sets the "github_app_id" field.
func (u *GithubInstallationUpsertBulk) SetGithubAppID(v int64) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetGithubAppID(v)
	})
}

// UpdateGithubAppID sets the "github_app_id" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateGithubAppID() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateGithubAppID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GithubInstallationUpsertBulk) SetAccountID(v int64) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountID(v)
	})
}

// AddAccountID adds v to the "account_id" field.
func (u *GithubInstallationUpsertBulk) AddAccountID(v int64) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.AddAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateAccountID() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountID()
	})
}

// SetAccountLogin sets the "account_login" field.
func (u *GithubInstallationUpsertBulk) SetAccountLogin(v string) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountLogin(v)
	})
}

// UpdateAccountLogin sets the "account_login" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateAccountLogin() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountLogin()
	})
}

// SetAccountType sets the "account_type" field.
func (u *GithubInstallationUpsertBulk) SetAccountType(v githubinstallation.AccountType) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateAccountType() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountType()
	})
}

// SetAccountURL sets the "account_url" field.
func (u *GithubInstallationUpsertBulk) SetAccountURL(v string) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetAccountURL(v)
	})
}

// UpdateAccountURL sets the "account_url" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateAccountURL() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateAccountURL()
	})
}

// SetRepositorySelection sets the "repository_selection" field.
func (u *GithubInstallationUpsertBulk) SetRepositorySelection(v githubinstallation.RepositorySelection) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetRepositorySelection(v)
	})
}

// UpdateRepositorySelection sets the "repository_selection" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateRepositorySelection() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateRepositorySelection()
	})
}

// SetSuspended sets the "suspended" field.
func (u *GithubInstallationUpsertBulk) SetSuspended(v bool) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetSuspended(v)
	})
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateSuspended() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateSuspended()
	})
}

// SetActive sets the "active" field.
func (u *GithubInstallationUpsertBulk) SetActive(v bool) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateActive() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateActive()
	})
}

// SetPermissions sets the "permissions" field.
func (u *GithubInstallationUpsertBulk) SetPermissions(v schema.GithubInstallationPermissions) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdatePermissions() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GithubInstallationUpsertBulk) ClearPermissions() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.ClearPermissions()
	})
}

// SetEvents sets the "events" field.
func (u *GithubInstallationUpsertBulk) SetEvents(v []string) *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.SetEvents(v)
	})
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *GithubInstallationUpsertBulk) UpdateEvents() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.UpdateEvents()
	})
}

// ClearEvents clears the value of the "events" field.
func (u *GithubInstallationUpsertBulk) ClearEvents() *GithubInstallationUpsertBulk {
	return u.Update(func(s *GithubInstallationUpsert) {
		s.ClearEvents()
	})
}

// Exec executes the query.
func (u *GithubInstallationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GithubInstallationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubInstallationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubInstallationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
