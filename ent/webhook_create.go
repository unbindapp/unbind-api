// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/project"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/team"
	"github.com/unbindapp/unbind-api/ent/webhook"
)

// WebhookCreate is the builder for creating a Webhook entity.
type WebhookCreate struct {
	config
	mutation *WebhookMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WebhookCreate) SetCreatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableCreatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WebhookCreate) SetUpdatedAt(t time.Time) *WebhookCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableUpdatedAt(t *time.Time) *WebhookCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetURL sets the "url" field.
func (wc *WebhookCreate) SetURL(s string) *WebhookCreate {
	wc.mutation.SetURL(s)
	return wc
}

// SetType sets the "type" field.
func (wc *WebhookCreate) SetType(st schema.WebhookType) *WebhookCreate {
	wc.mutation.SetType(st)
	return wc
}

// SetEvents sets the "events" field.
func (wc *WebhookCreate) SetEvents(se []schema.WebhookEvent) *WebhookCreate {
	wc.mutation.SetEvents(se)
	return wc
}

// SetTeamID sets the "team_id" field.
func (wc *WebhookCreate) SetTeamID(u uuid.UUID) *WebhookCreate {
	wc.mutation.SetTeamID(u)
	return wc
}

// SetProjectID sets the "project_id" field.
func (wc *WebhookCreate) SetProjectID(u uuid.UUID) *WebhookCreate {
	wc.mutation.SetProjectID(u)
	return wc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableProjectID(u *uuid.UUID) *WebhookCreate {
	if u != nil {
		wc.SetProjectID(*u)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WebhookCreate) SetID(u uuid.UUID) *WebhookCreate {
	wc.mutation.SetID(u)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WebhookCreate) SetNillableID(u *uuid.UUID) *WebhookCreate {
	if u != nil {
		wc.SetID(*u)
	}
	return wc
}

// SetTeam sets the "team" edge to the Team entity.
func (wc *WebhookCreate) SetTeam(t *Team) *WebhookCreate {
	return wc.SetTeamID(t.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (wc *WebhookCreate) SetProject(p *Project) *WebhookCreate {
	return wc.SetProjectID(p.ID)
}

// Mutation returns the WebhookMutation object of the builder.
func (wc *WebhookCreate) Mutation() *WebhookMutation {
	return wc.mutation
}

// Save creates the Webhook in the database.
func (wc *WebhookCreate) Save(ctx context.Context) (*Webhook, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebhookCreate) SaveX(ctx context.Context) *Webhook {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebhookCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebhookCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WebhookCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := webhook.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := webhook.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := webhook.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebhookCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Webhook.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Webhook.updated_at"`)}
	}
	if _, ok := wc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Webhook.url"`)}
	}
	if v, ok := wc.mutation.URL(); ok {
		if err := webhook.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Webhook.url": %w`, err)}
		}
	}
	if _, ok := wc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Webhook.type"`)}
	}
	if v, ok := wc.mutation.GetType(); ok {
		if err := webhook.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Webhook.type": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Events(); !ok {
		return &ValidationError{Name: "events", err: errors.New(`ent: missing required field "Webhook.events"`)}
	}
	if _, ok := wc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "Webhook.team_id"`)}
	}
	if len(wc.mutation.TeamIDs()) == 0 {
		return &ValidationError{Name: "team", err: errors.New(`ent: missing required edge "Webhook.team"`)}
	}
	return nil
}

func (wc *WebhookCreate) sqlSave(ctx context.Context) (*Webhook, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WebhookCreate) createSpec() (*Webhook, *sqlgraph.CreateSpec) {
	var (
		_node = &Webhook{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(webhook.Table, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(webhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.URL(); ok {
		_spec.SetField(webhook.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wc.mutation.GetType(); ok {
		_spec.SetField(webhook.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := wc.mutation.Events(); ok {
		_spec.SetField(webhook.FieldEvents, field.TypeJSON, value)
		_node.Events = value
	}
	if nodes := wc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.TeamTable,
			Columns: []string{webhook.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webhook.ProjectTable,
			Columns: []string{webhook.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Webhook.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wc *WebhookCreate) OnConflict(opts ...sql.ConflictOption) *WebhookUpsertOne {
	wc.conflict = opts
	return &WebhookUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WebhookCreate) OnConflictColumns(columns ...string) *WebhookUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WebhookUpsertOne{
		create: wc,
	}
}

type (
	// WebhookUpsertOne is the builder for "upsert"-ing
	//  one Webhook node.
	WebhookUpsertOne struct {
		create *WebhookCreate
	}

	// WebhookUpsert is the "OnConflict" setter.
	WebhookUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsert) SetUpdatedAt(v time.Time) *WebhookUpsert {
	u.Set(webhook.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateUpdatedAt() *WebhookUpsert {
	u.SetExcluded(webhook.FieldUpdatedAt)
	return u
}

// SetURL sets the "url" field.
func (u *WebhookUpsert) SetURL(v string) *WebhookUpsert {
	u.Set(webhook.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateURL() *WebhookUpsert {
	u.SetExcluded(webhook.FieldURL)
	return u
}

// SetType sets the "type" field.
func (u *WebhookUpsert) SetType(v schema.WebhookType) *WebhookUpsert {
	u.Set(webhook.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateType() *WebhookUpsert {
	u.SetExcluded(webhook.FieldType)
	return u
}

// SetEvents sets the "events" field.
func (u *WebhookUpsert) SetEvents(v []schema.WebhookEvent) *WebhookUpsert {
	u.Set(webhook.FieldEvents, v)
	return u
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateEvents() *WebhookUpsert {
	u.SetExcluded(webhook.FieldEvents)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *WebhookUpsert) SetTeamID(v uuid.UUID) *WebhookUpsert {
	u.Set(webhook.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateTeamID() *WebhookUpsert {
	u.SetExcluded(webhook.FieldTeamID)
	return u
}

// SetProjectID sets the "project_id" field.
func (u *WebhookUpsert) SetProjectID(v uuid.UUID) *WebhookUpsert {
	u.Set(webhook.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WebhookUpsert) UpdateProjectID() *WebhookUpsert {
	u.SetExcluded(webhook.FieldProjectID)
	return u
}

// ClearProjectID clears the value of the "project_id" field.
func (u *WebhookUpsert) ClearProjectID() *WebhookUpsert {
	u.SetNull(webhook.FieldProjectID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookUpsertOne) UpdateNewValues() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(webhook.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(webhook.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WebhookUpsertOne) Ignore() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookUpsertOne) DoNothing() *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookCreate.OnConflict
// documentation for more info.
func (u *WebhookUpsertOne) Update(set func(*WebhookUpsert)) *WebhookUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsertOne) SetUpdatedAt(v time.Time) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateUpdatedAt() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *WebhookUpsertOne) SetURL(v string) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateURL() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateURL()
	})
}

// SetType sets the "type" field.
func (u *WebhookUpsertOne) SetType(v schema.WebhookType) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateType() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateType()
	})
}

// SetEvents sets the "events" field.
func (u *WebhookUpsertOne) SetEvents(v []schema.WebhookEvent) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetEvents(v)
	})
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateEvents() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateEvents()
	})
}

// SetTeamID sets the "team_id" field.
func (u *WebhookUpsertOne) SetTeamID(v uuid.UUID) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateTeamID() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateTeamID()
	})
}

// SetProjectID sets the "project_id" field.
func (u *WebhookUpsertOne) SetProjectID(v uuid.UUID) *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WebhookUpsertOne) UpdateProjectID() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *WebhookUpsertOne) ClearProjectID() *WebhookUpsertOne {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearProjectID()
	})
}

// Exec executes the query.
func (u *WebhookUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WebhookUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WebhookUpsertOne.ID is not supported by MySQL driver. Use WebhookUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WebhookUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WebhookCreateBulk is the builder for creating many Webhook entities in bulk.
type WebhookCreateBulk struct {
	config
	err      error
	builders []*WebhookCreate
	conflict []sql.ConflictOption
}

// Save creates the Webhook entities in the database.
func (wcb *WebhookCreateBulk) Save(ctx context.Context) ([]*Webhook, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Webhook, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebhookCreateBulk) SaveX(ctx context.Context) []*Webhook {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebhookCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Webhook.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebhookUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wcb *WebhookCreateBulk) OnConflict(opts ...sql.ConflictOption) *WebhookUpsertBulk {
	wcb.conflict = opts
	return &WebhookUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WebhookCreateBulk) OnConflictColumns(columns ...string) *WebhookUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WebhookUpsertBulk{
		create: wcb,
	}
}

// WebhookUpsertBulk is the builder for "upsert"-ing
// a bulk of Webhook nodes.
type WebhookUpsertBulk struct {
	create *WebhookCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(webhook.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WebhookUpsertBulk) UpdateNewValues() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(webhook.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(webhook.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Webhook.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WebhookUpsertBulk) Ignore() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebhookUpsertBulk) DoNothing() *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebhookCreateBulk.OnConflict
// documentation for more info.
func (u *WebhookUpsertBulk) Update(set func(*WebhookUpsert)) *WebhookUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebhookUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebhookUpsertBulk) SetUpdatedAt(v time.Time) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateUpdatedAt() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURL sets the "url" field.
func (u *WebhookUpsertBulk) SetURL(v string) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateURL() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateURL()
	})
}

// SetType sets the "type" field.
func (u *WebhookUpsertBulk) SetType(v schema.WebhookType) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateType() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateType()
	})
}

// SetEvents sets the "events" field.
func (u *WebhookUpsertBulk) SetEvents(v []schema.WebhookEvent) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetEvents(v)
	})
}

// UpdateEvents sets the "events" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateEvents() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateEvents()
	})
}

// SetTeamID sets the "team_id" field.
func (u *WebhookUpsertBulk) SetTeamID(v uuid.UUID) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateTeamID() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateTeamID()
	})
}

// SetProjectID sets the "project_id" field.
func (u *WebhookUpsertBulk) SetProjectID(v uuid.UUID) *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WebhookUpsertBulk) UpdateProjectID() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *WebhookUpsertBulk) ClearProjectID() *WebhookUpsertBulk {
	return u.Update(func(s *WebhookUpsert) {
		s.ClearProjectID()
	})
}

// Exec executes the query.
func (u *WebhookUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WebhookCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WebhookCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebhookUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
