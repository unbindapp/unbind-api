// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/s3"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
	"github.com/unbindapp/unbind-api/internal/sourceanalyzer/enum"
)

// ServiceConfigUpdate is the builder for updating ServiceConfig entities.
type ServiceConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *ServiceConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServiceConfigUpdate builder.
func (scu *ServiceConfigUpdate) Where(ps ...predicate.ServiceConfig) *ServiceConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ServiceConfigUpdate) SetUpdatedAt(t time.Time) *ServiceConfigUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetServiceID sets the "service_id" field.
func (scu *ServiceConfigUpdate) SetServiceID(u uuid.UUID) *ServiceConfigUpdate {
	scu.mutation.SetServiceID(u)
	return scu
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableServiceID(u *uuid.UUID) *ServiceConfigUpdate {
	if u != nil {
		scu.SetServiceID(*u)
	}
	return scu
}

// SetBuilder sets the "builder" field.
func (scu *ServiceConfigUpdate) SetBuilder(sb schema.ServiceBuilder) *ServiceConfigUpdate {
	scu.mutation.SetBuilder(sb)
	return scu
}

// SetNillableBuilder sets the "builder" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableBuilder(sb *schema.ServiceBuilder) *ServiceConfigUpdate {
	if sb != nil {
		scu.SetBuilder(*sb)
	}
	return scu
}

// SetIcon sets the "icon" field.
func (scu *ServiceConfigUpdate) SetIcon(s string) *ServiceConfigUpdate {
	scu.mutation.SetIcon(s)
	return scu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableIcon(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetIcon(*s)
	}
	return scu
}

// SetDockerBuilderDockerfilePath sets the "docker_builder_dockerfile_path" field.
func (scu *ServiceConfigUpdate) SetDockerBuilderDockerfilePath(s string) *ServiceConfigUpdate {
	scu.mutation.SetDockerBuilderDockerfilePath(s)
	return scu
}

// SetNillableDockerBuilderDockerfilePath sets the "docker_builder_dockerfile_path" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableDockerBuilderDockerfilePath(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetDockerBuilderDockerfilePath(*s)
	}
	return scu
}

// ClearDockerBuilderDockerfilePath clears the value of the "docker_builder_dockerfile_path" field.
func (scu *ServiceConfigUpdate) ClearDockerBuilderDockerfilePath() *ServiceConfigUpdate {
	scu.mutation.ClearDockerBuilderDockerfilePath()
	return scu
}

// SetDockerBuilderBuildContext sets the "docker_builder_build_context" field.
func (scu *ServiceConfigUpdate) SetDockerBuilderBuildContext(s string) *ServiceConfigUpdate {
	scu.mutation.SetDockerBuilderBuildContext(s)
	return scu
}

// SetNillableDockerBuilderBuildContext sets the "docker_builder_build_context" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableDockerBuilderBuildContext(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetDockerBuilderBuildContext(*s)
	}
	return scu
}

// ClearDockerBuilderBuildContext clears the value of the "docker_builder_build_context" field.
func (scu *ServiceConfigUpdate) ClearDockerBuilderBuildContext() *ServiceConfigUpdate {
	scu.mutation.ClearDockerBuilderBuildContext()
	return scu
}

// SetRailpackProvider sets the "railpack_provider" field.
func (scu *ServiceConfigUpdate) SetRailpackProvider(e enum.Provider) *ServiceConfigUpdate {
	scu.mutation.SetRailpackProvider(e)
	return scu
}

// SetNillableRailpackProvider sets the "railpack_provider" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableRailpackProvider(e *enum.Provider) *ServiceConfigUpdate {
	if e != nil {
		scu.SetRailpackProvider(*e)
	}
	return scu
}

// ClearRailpackProvider clears the value of the "railpack_provider" field.
func (scu *ServiceConfigUpdate) ClearRailpackProvider() *ServiceConfigUpdate {
	scu.mutation.ClearRailpackProvider()
	return scu
}

// SetRailpackFramework sets the "railpack_framework" field.
func (scu *ServiceConfigUpdate) SetRailpackFramework(e enum.Framework) *ServiceConfigUpdate {
	scu.mutation.SetRailpackFramework(e)
	return scu
}

// SetNillableRailpackFramework sets the "railpack_framework" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableRailpackFramework(e *enum.Framework) *ServiceConfigUpdate {
	if e != nil {
		scu.SetRailpackFramework(*e)
	}
	return scu
}

// ClearRailpackFramework clears the value of the "railpack_framework" field.
func (scu *ServiceConfigUpdate) ClearRailpackFramework() *ServiceConfigUpdate {
	scu.mutation.ClearRailpackFramework()
	return scu
}

// SetGitBranch sets the "git_branch" field.
func (scu *ServiceConfigUpdate) SetGitBranch(s string) *ServiceConfigUpdate {
	scu.mutation.SetGitBranch(s)
	return scu
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableGitBranch(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetGitBranch(*s)
	}
	return scu
}

// ClearGitBranch clears the value of the "git_branch" field.
func (scu *ServiceConfigUpdate) ClearGitBranch() *ServiceConfigUpdate {
	scu.mutation.ClearGitBranch()
	return scu
}

// SetGitTag sets the "git_tag" field.
func (scu *ServiceConfigUpdate) SetGitTag(s string) *ServiceConfigUpdate {
	scu.mutation.SetGitTag(s)
	return scu
}

// SetNillableGitTag sets the "git_tag" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableGitTag(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetGitTag(*s)
	}
	return scu
}

// ClearGitTag clears the value of the "git_tag" field.
func (scu *ServiceConfigUpdate) ClearGitTag() *ServiceConfigUpdate {
	scu.mutation.ClearGitTag()
	return scu
}

// SetHosts sets the "hosts" field.
func (scu *ServiceConfigUpdate) SetHosts(ss []schema.HostSpec) *ServiceConfigUpdate {
	scu.mutation.SetHosts(ss)
	return scu
}

// AppendHosts appends ss to the "hosts" field.
func (scu *ServiceConfigUpdate) AppendHosts(ss []schema.HostSpec) *ServiceConfigUpdate {
	scu.mutation.AppendHosts(ss)
	return scu
}

// ClearHosts clears the value of the "hosts" field.
func (scu *ServiceConfigUpdate) ClearHosts() *ServiceConfigUpdate {
	scu.mutation.ClearHosts()
	return scu
}

// SetPorts sets the "ports" field.
func (scu *ServiceConfigUpdate) SetPorts(ss []schema.PortSpec) *ServiceConfigUpdate {
	scu.mutation.SetPorts(ss)
	return scu
}

// AppendPorts appends ss to the "ports" field.
func (scu *ServiceConfigUpdate) AppendPorts(ss []schema.PortSpec) *ServiceConfigUpdate {
	scu.mutation.AppendPorts(ss)
	return scu
}

// ClearPorts clears the value of the "ports" field.
func (scu *ServiceConfigUpdate) ClearPorts() *ServiceConfigUpdate {
	scu.mutation.ClearPorts()
	return scu
}

// SetReplicas sets the "replicas" field.
func (scu *ServiceConfigUpdate) SetReplicas(i int32) *ServiceConfigUpdate {
	scu.mutation.ResetReplicas()
	scu.mutation.SetReplicas(i)
	return scu
}

// SetNillableReplicas sets the "replicas" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableReplicas(i *int32) *ServiceConfigUpdate {
	if i != nil {
		scu.SetReplicas(*i)
	}
	return scu
}

// AddReplicas adds i to the "replicas" field.
func (scu *ServiceConfigUpdate) AddReplicas(i int32) *ServiceConfigUpdate {
	scu.mutation.AddReplicas(i)
	return scu
}

// SetAutoDeploy sets the "auto_deploy" field.
func (scu *ServiceConfigUpdate) SetAutoDeploy(b bool) *ServiceConfigUpdate {
	scu.mutation.SetAutoDeploy(b)
	return scu
}

// SetNillableAutoDeploy sets the "auto_deploy" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableAutoDeploy(b *bool) *ServiceConfigUpdate {
	if b != nil {
		scu.SetAutoDeploy(*b)
	}
	return scu
}

// SetRailpackBuilderInstallCommand sets the "railpack_builder_install_command" field.
func (scu *ServiceConfigUpdate) SetRailpackBuilderInstallCommand(s string) *ServiceConfigUpdate {
	scu.mutation.SetRailpackBuilderInstallCommand(s)
	return scu
}

// SetNillableRailpackBuilderInstallCommand sets the "railpack_builder_install_command" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableRailpackBuilderInstallCommand(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetRailpackBuilderInstallCommand(*s)
	}
	return scu
}

// ClearRailpackBuilderInstallCommand clears the value of the "railpack_builder_install_command" field.
func (scu *ServiceConfigUpdate) ClearRailpackBuilderInstallCommand() *ServiceConfigUpdate {
	scu.mutation.ClearRailpackBuilderInstallCommand()
	return scu
}

// SetRailpackBuilderBuildCommand sets the "railpack_builder_build_command" field.
func (scu *ServiceConfigUpdate) SetRailpackBuilderBuildCommand(s string) *ServiceConfigUpdate {
	scu.mutation.SetRailpackBuilderBuildCommand(s)
	return scu
}

// SetNillableRailpackBuilderBuildCommand sets the "railpack_builder_build_command" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableRailpackBuilderBuildCommand(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetRailpackBuilderBuildCommand(*s)
	}
	return scu
}

// ClearRailpackBuilderBuildCommand clears the value of the "railpack_builder_build_command" field.
func (scu *ServiceConfigUpdate) ClearRailpackBuilderBuildCommand() *ServiceConfigUpdate {
	scu.mutation.ClearRailpackBuilderBuildCommand()
	return scu
}

// SetRunCommand sets the "run_command" field.
func (scu *ServiceConfigUpdate) SetRunCommand(s string) *ServiceConfigUpdate {
	scu.mutation.SetRunCommand(s)
	return scu
}

// SetNillableRunCommand sets the "run_command" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableRunCommand(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetRunCommand(*s)
	}
	return scu
}

// ClearRunCommand clears the value of the "run_command" field.
func (scu *ServiceConfigUpdate) ClearRunCommand() *ServiceConfigUpdate {
	scu.mutation.ClearRunCommand()
	return scu
}

// SetIsPublic sets the "is_public" field.
func (scu *ServiceConfigUpdate) SetIsPublic(b bool) *ServiceConfigUpdate {
	scu.mutation.SetIsPublic(b)
	return scu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableIsPublic(b *bool) *ServiceConfigUpdate {
	if b != nil {
		scu.SetIsPublic(*b)
	}
	return scu
}

// SetImage sets the "image" field.
func (scu *ServiceConfigUpdate) SetImage(s string) *ServiceConfigUpdate {
	scu.mutation.SetImage(s)
	return scu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableImage(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetImage(*s)
	}
	return scu
}

// ClearImage clears the value of the "image" field.
func (scu *ServiceConfigUpdate) ClearImage() *ServiceConfigUpdate {
	scu.mutation.ClearImage()
	return scu
}

// SetDefinitionVersion sets the "definition_version" field.
func (scu *ServiceConfigUpdate) SetDefinitionVersion(s string) *ServiceConfigUpdate {
	scu.mutation.SetDefinitionVersion(s)
	return scu
}

// SetNillableDefinitionVersion sets the "definition_version" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableDefinitionVersion(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetDefinitionVersion(*s)
	}
	return scu
}

// ClearDefinitionVersion clears the value of the "definition_version" field.
func (scu *ServiceConfigUpdate) ClearDefinitionVersion() *ServiceConfigUpdate {
	scu.mutation.ClearDefinitionVersion()
	return scu
}

// SetDatabaseConfig sets the "database_config" field.
func (scu *ServiceConfigUpdate) SetDatabaseConfig(sc *schema.DatabaseConfig) *ServiceConfigUpdate {
	scu.mutation.SetDatabaseConfig(sc)
	return scu
}

// ClearDatabaseConfig clears the value of the "database_config" field.
func (scu *ServiceConfigUpdate) ClearDatabaseConfig() *ServiceConfigUpdate {
	scu.mutation.ClearDatabaseConfig()
	return scu
}

// SetS3BackupSourceID sets the "s3_backup_source_id" field.
func (scu *ServiceConfigUpdate) SetS3BackupSourceID(u uuid.UUID) *ServiceConfigUpdate {
	scu.mutation.SetS3BackupSourceID(u)
	return scu
}

// SetNillableS3BackupSourceID sets the "s3_backup_source_id" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableS3BackupSourceID(u *uuid.UUID) *ServiceConfigUpdate {
	if u != nil {
		scu.SetS3BackupSourceID(*u)
	}
	return scu
}

// ClearS3BackupSourceID clears the value of the "s3_backup_source_id" field.
func (scu *ServiceConfigUpdate) ClearS3BackupSourceID() *ServiceConfigUpdate {
	scu.mutation.ClearS3BackupSourceID()
	return scu
}

// SetS3BackupBucket sets the "s3_backup_bucket" field.
func (scu *ServiceConfigUpdate) SetS3BackupBucket(s string) *ServiceConfigUpdate {
	scu.mutation.SetS3BackupBucket(s)
	return scu
}

// SetNillableS3BackupBucket sets the "s3_backup_bucket" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableS3BackupBucket(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetS3BackupBucket(*s)
	}
	return scu
}

// ClearS3BackupBucket clears the value of the "s3_backup_bucket" field.
func (scu *ServiceConfigUpdate) ClearS3BackupBucket() *ServiceConfigUpdate {
	scu.mutation.ClearS3BackupBucket()
	return scu
}

// SetBackupSchedule sets the "backup_schedule" field.
func (scu *ServiceConfigUpdate) SetBackupSchedule(s string) *ServiceConfigUpdate {
	scu.mutation.SetBackupSchedule(s)
	return scu
}

// SetNillableBackupSchedule sets the "backup_schedule" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableBackupSchedule(s *string) *ServiceConfigUpdate {
	if s != nil {
		scu.SetBackupSchedule(*s)
	}
	return scu
}

// SetBackupRetentionCount sets the "backup_retention_count" field.
func (scu *ServiceConfigUpdate) SetBackupRetentionCount(i int) *ServiceConfigUpdate {
	scu.mutation.ResetBackupRetentionCount()
	scu.mutation.SetBackupRetentionCount(i)
	return scu
}

// SetNillableBackupRetentionCount sets the "backup_retention_count" field if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableBackupRetentionCount(i *int) *ServiceConfigUpdate {
	if i != nil {
		scu.SetBackupRetentionCount(*i)
	}
	return scu
}

// AddBackupRetentionCount adds i to the "backup_retention_count" field.
func (scu *ServiceConfigUpdate) AddBackupRetentionCount(i int) *ServiceConfigUpdate {
	scu.mutation.AddBackupRetentionCount(i)
	return scu
}

// SetVolumes sets the "volumes" field.
func (scu *ServiceConfigUpdate) SetVolumes(sv []schema.ServiceVolume) *ServiceConfigUpdate {
	scu.mutation.SetVolumes(sv)
	return scu
}

// AppendVolumes appends sv to the "volumes" field.
func (scu *ServiceConfigUpdate) AppendVolumes(sv []schema.ServiceVolume) *ServiceConfigUpdate {
	scu.mutation.AppendVolumes(sv)
	return scu
}

// ClearVolumes clears the value of the "volumes" field.
func (scu *ServiceConfigUpdate) ClearVolumes() *ServiceConfigUpdate {
	scu.mutation.ClearVolumes()
	return scu
}

// SetSecurityContext sets the "security_context" field.
func (scu *ServiceConfigUpdate) SetSecurityContext(sc *schema.SecurityContext) *ServiceConfigUpdate {
	scu.mutation.SetSecurityContext(sc)
	return scu
}

// ClearSecurityContext clears the value of the "security_context" field.
func (scu *ServiceConfigUpdate) ClearSecurityContext() *ServiceConfigUpdate {
	scu.mutation.ClearSecurityContext()
	return scu
}

// SetHealthCheck sets the "health_check" field.
func (scu *ServiceConfigUpdate) SetHealthCheck(sc *schema.HealthCheck) *ServiceConfigUpdate {
	scu.mutation.SetHealthCheck(sc)
	return scu
}

// ClearHealthCheck clears the value of the "health_check" field.
func (scu *ServiceConfigUpdate) ClearHealthCheck() *ServiceConfigUpdate {
	scu.mutation.ClearHealthCheck()
	return scu
}

// SetVariableMounts sets the "variable_mounts" field.
func (scu *ServiceConfigUpdate) SetVariableMounts(sm []*schema.VariableMount) *ServiceConfigUpdate {
	scu.mutation.SetVariableMounts(sm)
	return scu
}

// AppendVariableMounts appends sm to the "variable_mounts" field.
func (scu *ServiceConfigUpdate) AppendVariableMounts(sm []*schema.VariableMount) *ServiceConfigUpdate {
	scu.mutation.AppendVariableMounts(sm)
	return scu
}

// ClearVariableMounts clears the value of the "variable_mounts" field.
func (scu *ServiceConfigUpdate) ClearVariableMounts() *ServiceConfigUpdate {
	scu.mutation.ClearVariableMounts()
	return scu
}

// SetProtectedVariables sets the "protected_variables" field.
func (scu *ServiceConfigUpdate) SetProtectedVariables(s []string) *ServiceConfigUpdate {
	scu.mutation.SetProtectedVariables(s)
	return scu
}

// AppendProtectedVariables appends s to the "protected_variables" field.
func (scu *ServiceConfigUpdate) AppendProtectedVariables(s []string) *ServiceConfigUpdate {
	scu.mutation.AppendProtectedVariables(s)
	return scu
}

// ClearProtectedVariables clears the value of the "protected_variables" field.
func (scu *ServiceConfigUpdate) ClearProtectedVariables() *ServiceConfigUpdate {
	scu.mutation.ClearProtectedVariables()
	return scu
}

// SetInitContainers sets the "init_containers" field.
func (scu *ServiceConfigUpdate) SetInitContainers(sc []*schema.InitContainer) *ServiceConfigUpdate {
	scu.mutation.SetInitContainers(sc)
	return scu
}

// AppendInitContainers appends sc to the "init_containers" field.
func (scu *ServiceConfigUpdate) AppendInitContainers(sc []*schema.InitContainer) *ServiceConfigUpdate {
	scu.mutation.AppendInitContainers(sc)
	return scu
}

// ClearInitContainers clears the value of the "init_containers" field.
func (scu *ServiceConfigUpdate) ClearInitContainers() *ServiceConfigUpdate {
	scu.mutation.ClearInitContainers()
	return scu
}

// SetResources sets the "resources" field.
func (scu *ServiceConfigUpdate) SetResources(s *schema.Resources) *ServiceConfigUpdate {
	scu.mutation.SetResources(s)
	return scu
}

// ClearResources clears the value of the "resources" field.
func (scu *ServiceConfigUpdate) ClearResources() *ServiceConfigUpdate {
	scu.mutation.ClearResources()
	return scu
}

// SetService sets the "service" edge to the Service entity.
func (scu *ServiceConfigUpdate) SetService(s *Service) *ServiceConfigUpdate {
	return scu.SetServiceID(s.ID)
}

// SetS3BackupSourcesID sets the "s3_backup_sources" edge to the S3 entity by ID.
func (scu *ServiceConfigUpdate) SetS3BackupSourcesID(id uuid.UUID) *ServiceConfigUpdate {
	scu.mutation.SetS3BackupSourcesID(id)
	return scu
}

// SetNillableS3BackupSourcesID sets the "s3_backup_sources" edge to the S3 entity by ID if the given value is not nil.
func (scu *ServiceConfigUpdate) SetNillableS3BackupSourcesID(id *uuid.UUID) *ServiceConfigUpdate {
	if id != nil {
		scu = scu.SetS3BackupSourcesID(*id)
	}
	return scu
}

// SetS3BackupSources sets the "s3_backup_sources" edge to the S3 entity.
func (scu *ServiceConfigUpdate) SetS3BackupSources(s *S3) *ServiceConfigUpdate {
	return scu.SetS3BackupSourcesID(s.ID)
}

// Mutation returns the ServiceConfigMutation object of the builder.
func (scu *ServiceConfigUpdate) Mutation() *ServiceConfigMutation {
	return scu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (scu *ServiceConfigUpdate) ClearService() *ServiceConfigUpdate {
	scu.mutation.ClearService()
	return scu
}

// ClearS3BackupSources clears the "s3_backup_sources" edge to the S3 entity.
func (scu *ServiceConfigUpdate) ClearS3BackupSources() *ServiceConfigUpdate {
	scu.mutation.ClearS3BackupSources()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ServiceConfigUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ServiceConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ServiceConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ServiceConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ServiceConfigUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := serviceconfig.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ServiceConfigUpdate) check() error {
	if v, ok := scu.mutation.Builder(); ok {
		if err := serviceconfig.BuilderValidator(v); err != nil {
			return &ValidationError{Name: "builder", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.builder": %w`, err)}
		}
	}
	if v, ok := scu.mutation.RailpackProvider(); ok {
		if err := serviceconfig.RailpackProviderValidator(v); err != nil {
			return &ValidationError{Name: "railpack_provider", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.railpack_provider": %w`, err)}
		}
	}
	if v, ok := scu.mutation.RailpackFramework(); ok {
		if err := serviceconfig.RailpackFrameworkValidator(v); err != nil {
			return &ValidationError{Name: "railpack_framework", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.railpack_framework": %w`, err)}
		}
	}
	if scu.mutation.ServiceCleared() && len(scu.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceConfig.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *ServiceConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceConfigUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *ServiceConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceconfig.Table, serviceconfig.Columns, sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Builder(); ok {
		_spec.SetField(serviceconfig.FieldBuilder, field.TypeEnum, value)
	}
	if value, ok := scu.mutation.Icon(); ok {
		_spec.SetField(serviceconfig.FieldIcon, field.TypeString, value)
	}
	if value, ok := scu.mutation.DockerBuilderDockerfilePath(); ok {
		_spec.SetField(serviceconfig.FieldDockerBuilderDockerfilePath, field.TypeString, value)
	}
	if scu.mutation.DockerBuilderDockerfilePathCleared() {
		_spec.ClearField(serviceconfig.FieldDockerBuilderDockerfilePath, field.TypeString)
	}
	if value, ok := scu.mutation.DockerBuilderBuildContext(); ok {
		_spec.SetField(serviceconfig.FieldDockerBuilderBuildContext, field.TypeString, value)
	}
	if scu.mutation.DockerBuilderBuildContextCleared() {
		_spec.ClearField(serviceconfig.FieldDockerBuilderBuildContext, field.TypeString)
	}
	if value, ok := scu.mutation.RailpackProvider(); ok {
		_spec.SetField(serviceconfig.FieldRailpackProvider, field.TypeEnum, value)
	}
	if scu.mutation.RailpackProviderCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackProvider, field.TypeEnum)
	}
	if value, ok := scu.mutation.RailpackFramework(); ok {
		_spec.SetField(serviceconfig.FieldRailpackFramework, field.TypeEnum, value)
	}
	if scu.mutation.RailpackFrameworkCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackFramework, field.TypeEnum)
	}
	if value, ok := scu.mutation.GitBranch(); ok {
		_spec.SetField(serviceconfig.FieldGitBranch, field.TypeString, value)
	}
	if scu.mutation.GitBranchCleared() {
		_spec.ClearField(serviceconfig.FieldGitBranch, field.TypeString)
	}
	if value, ok := scu.mutation.GitTag(); ok {
		_spec.SetField(serviceconfig.FieldGitTag, field.TypeString, value)
	}
	if scu.mutation.GitTagCleared() {
		_spec.ClearField(serviceconfig.FieldGitTag, field.TypeString)
	}
	if value, ok := scu.mutation.Hosts(); ok {
		_spec.SetField(serviceconfig.FieldHosts, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedHosts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldHosts, value)
		})
	}
	if scu.mutation.HostsCleared() {
		_spec.ClearField(serviceconfig.FieldHosts, field.TypeJSON)
	}
	if value, ok := scu.mutation.Ports(); ok {
		_spec.SetField(serviceconfig.FieldPorts, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedPorts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldPorts, value)
		})
	}
	if scu.mutation.PortsCleared() {
		_spec.ClearField(serviceconfig.FieldPorts, field.TypeJSON)
	}
	if value, ok := scu.mutation.Replicas(); ok {
		_spec.SetField(serviceconfig.FieldReplicas, field.TypeInt32, value)
	}
	if value, ok := scu.mutation.AddedReplicas(); ok {
		_spec.AddField(serviceconfig.FieldReplicas, field.TypeInt32, value)
	}
	if value, ok := scu.mutation.AutoDeploy(); ok {
		_spec.SetField(serviceconfig.FieldAutoDeploy, field.TypeBool, value)
	}
	if value, ok := scu.mutation.RailpackBuilderInstallCommand(); ok {
		_spec.SetField(serviceconfig.FieldRailpackBuilderInstallCommand, field.TypeString, value)
	}
	if scu.mutation.RailpackBuilderInstallCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackBuilderInstallCommand, field.TypeString)
	}
	if value, ok := scu.mutation.RailpackBuilderBuildCommand(); ok {
		_spec.SetField(serviceconfig.FieldRailpackBuilderBuildCommand, field.TypeString, value)
	}
	if scu.mutation.RailpackBuilderBuildCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackBuilderBuildCommand, field.TypeString)
	}
	if value, ok := scu.mutation.RunCommand(); ok {
		_spec.SetField(serviceconfig.FieldRunCommand, field.TypeString, value)
	}
	if scu.mutation.RunCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRunCommand, field.TypeString)
	}
	if value, ok := scu.mutation.IsPublic(); ok {
		_spec.SetField(serviceconfig.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := scu.mutation.Image(); ok {
		_spec.SetField(serviceconfig.FieldImage, field.TypeString, value)
	}
	if scu.mutation.ImageCleared() {
		_spec.ClearField(serviceconfig.FieldImage, field.TypeString)
	}
	if value, ok := scu.mutation.DefinitionVersion(); ok {
		_spec.SetField(serviceconfig.FieldDefinitionVersion, field.TypeString, value)
	}
	if scu.mutation.DefinitionVersionCleared() {
		_spec.ClearField(serviceconfig.FieldDefinitionVersion, field.TypeString)
	}
	if value, ok := scu.mutation.DatabaseConfig(); ok {
		_spec.SetField(serviceconfig.FieldDatabaseConfig, field.TypeJSON, value)
	}
	if scu.mutation.DatabaseConfigCleared() {
		_spec.ClearField(serviceconfig.FieldDatabaseConfig, field.TypeJSON)
	}
	if value, ok := scu.mutation.S3BackupBucket(); ok {
		_spec.SetField(serviceconfig.FieldS3BackupBucket, field.TypeString, value)
	}
	if scu.mutation.S3BackupBucketCleared() {
		_spec.ClearField(serviceconfig.FieldS3BackupBucket, field.TypeString)
	}
	if value, ok := scu.mutation.BackupSchedule(); ok {
		_spec.SetField(serviceconfig.FieldBackupSchedule, field.TypeString, value)
	}
	if value, ok := scu.mutation.BackupRetentionCount(); ok {
		_spec.SetField(serviceconfig.FieldBackupRetentionCount, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedBackupRetentionCount(); ok {
		_spec.AddField(serviceconfig.FieldBackupRetentionCount, field.TypeInt, value)
	}
	if value, ok := scu.mutation.Volumes(); ok {
		_spec.SetField(serviceconfig.FieldVolumes, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedVolumes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldVolumes, value)
		})
	}
	if scu.mutation.VolumesCleared() {
		_spec.ClearField(serviceconfig.FieldVolumes, field.TypeJSON)
	}
	if value, ok := scu.mutation.SecurityContext(); ok {
		_spec.SetField(serviceconfig.FieldSecurityContext, field.TypeJSON, value)
	}
	if scu.mutation.SecurityContextCleared() {
		_spec.ClearField(serviceconfig.FieldSecurityContext, field.TypeJSON)
	}
	if value, ok := scu.mutation.HealthCheck(); ok {
		_spec.SetField(serviceconfig.FieldHealthCheck, field.TypeJSON, value)
	}
	if scu.mutation.HealthCheckCleared() {
		_spec.ClearField(serviceconfig.FieldHealthCheck, field.TypeJSON)
	}
	if value, ok := scu.mutation.VariableMounts(); ok {
		_spec.SetField(serviceconfig.FieldVariableMounts, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedVariableMounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldVariableMounts, value)
		})
	}
	if scu.mutation.VariableMountsCleared() {
		_spec.ClearField(serviceconfig.FieldVariableMounts, field.TypeJSON)
	}
	if value, ok := scu.mutation.ProtectedVariables(); ok {
		_spec.SetField(serviceconfig.FieldProtectedVariables, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedProtectedVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldProtectedVariables, value)
		})
	}
	if scu.mutation.ProtectedVariablesCleared() {
		_spec.ClearField(serviceconfig.FieldProtectedVariables, field.TypeJSON)
	}
	if value, ok := scu.mutation.InitContainers(); ok {
		_spec.SetField(serviceconfig.FieldInitContainers, field.TypeJSON, value)
	}
	if value, ok := scu.mutation.AppendedInitContainers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldInitContainers, value)
		})
	}
	if scu.mutation.InitContainersCleared() {
		_spec.ClearField(serviceconfig.FieldInitContainers, field.TypeJSON)
	}
	if value, ok := scu.mutation.Resources(); ok {
		_spec.SetField(serviceconfig.FieldResources, field.TypeJSON, value)
	}
	if scu.mutation.ResourcesCleared() {
		_spec.ClearField(serviceconfig.FieldResources, field.TypeJSON)
	}
	if scu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.S3BackupSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceconfig.S3BackupSourcesTable,
			Columns: []string{serviceconfig.S3BackupSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.S3BackupSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceconfig.S3BackupSourcesTable,
			Columns: []string{serviceconfig.S3BackupSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ServiceConfigUpdateOne is the builder for updating a single ServiceConfig entity.
type ServiceConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServiceConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ServiceConfigUpdateOne) SetUpdatedAt(t time.Time) *ServiceConfigUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetServiceID sets the "service_id" field.
func (scuo *ServiceConfigUpdateOne) SetServiceID(u uuid.UUID) *ServiceConfigUpdateOne {
	scuo.mutation.SetServiceID(u)
	return scuo
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableServiceID(u *uuid.UUID) *ServiceConfigUpdateOne {
	if u != nil {
		scuo.SetServiceID(*u)
	}
	return scuo
}

// SetBuilder sets the "builder" field.
func (scuo *ServiceConfigUpdateOne) SetBuilder(sb schema.ServiceBuilder) *ServiceConfigUpdateOne {
	scuo.mutation.SetBuilder(sb)
	return scuo
}

// SetNillableBuilder sets the "builder" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableBuilder(sb *schema.ServiceBuilder) *ServiceConfigUpdateOne {
	if sb != nil {
		scuo.SetBuilder(*sb)
	}
	return scuo
}

// SetIcon sets the "icon" field.
func (scuo *ServiceConfigUpdateOne) SetIcon(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetIcon(s)
	return scuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableIcon(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetIcon(*s)
	}
	return scuo
}

// SetDockerBuilderDockerfilePath sets the "docker_builder_dockerfile_path" field.
func (scuo *ServiceConfigUpdateOne) SetDockerBuilderDockerfilePath(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetDockerBuilderDockerfilePath(s)
	return scuo
}

// SetNillableDockerBuilderDockerfilePath sets the "docker_builder_dockerfile_path" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableDockerBuilderDockerfilePath(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetDockerBuilderDockerfilePath(*s)
	}
	return scuo
}

// ClearDockerBuilderDockerfilePath clears the value of the "docker_builder_dockerfile_path" field.
func (scuo *ServiceConfigUpdateOne) ClearDockerBuilderDockerfilePath() *ServiceConfigUpdateOne {
	scuo.mutation.ClearDockerBuilderDockerfilePath()
	return scuo
}

// SetDockerBuilderBuildContext sets the "docker_builder_build_context" field.
func (scuo *ServiceConfigUpdateOne) SetDockerBuilderBuildContext(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetDockerBuilderBuildContext(s)
	return scuo
}

// SetNillableDockerBuilderBuildContext sets the "docker_builder_build_context" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableDockerBuilderBuildContext(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetDockerBuilderBuildContext(*s)
	}
	return scuo
}

// ClearDockerBuilderBuildContext clears the value of the "docker_builder_build_context" field.
func (scuo *ServiceConfigUpdateOne) ClearDockerBuilderBuildContext() *ServiceConfigUpdateOne {
	scuo.mutation.ClearDockerBuilderBuildContext()
	return scuo
}

// SetRailpackProvider sets the "railpack_provider" field.
func (scuo *ServiceConfigUpdateOne) SetRailpackProvider(e enum.Provider) *ServiceConfigUpdateOne {
	scuo.mutation.SetRailpackProvider(e)
	return scuo
}

// SetNillableRailpackProvider sets the "railpack_provider" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableRailpackProvider(e *enum.Provider) *ServiceConfigUpdateOne {
	if e != nil {
		scuo.SetRailpackProvider(*e)
	}
	return scuo
}

// ClearRailpackProvider clears the value of the "railpack_provider" field.
func (scuo *ServiceConfigUpdateOne) ClearRailpackProvider() *ServiceConfigUpdateOne {
	scuo.mutation.ClearRailpackProvider()
	return scuo
}

// SetRailpackFramework sets the "railpack_framework" field.
func (scuo *ServiceConfigUpdateOne) SetRailpackFramework(e enum.Framework) *ServiceConfigUpdateOne {
	scuo.mutation.SetRailpackFramework(e)
	return scuo
}

// SetNillableRailpackFramework sets the "railpack_framework" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableRailpackFramework(e *enum.Framework) *ServiceConfigUpdateOne {
	if e != nil {
		scuo.SetRailpackFramework(*e)
	}
	return scuo
}

// ClearRailpackFramework clears the value of the "railpack_framework" field.
func (scuo *ServiceConfigUpdateOne) ClearRailpackFramework() *ServiceConfigUpdateOne {
	scuo.mutation.ClearRailpackFramework()
	return scuo
}

// SetGitBranch sets the "git_branch" field.
func (scuo *ServiceConfigUpdateOne) SetGitBranch(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetGitBranch(s)
	return scuo
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableGitBranch(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetGitBranch(*s)
	}
	return scuo
}

// ClearGitBranch clears the value of the "git_branch" field.
func (scuo *ServiceConfigUpdateOne) ClearGitBranch() *ServiceConfigUpdateOne {
	scuo.mutation.ClearGitBranch()
	return scuo
}

// SetGitTag sets the "git_tag" field.
func (scuo *ServiceConfigUpdateOne) SetGitTag(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetGitTag(s)
	return scuo
}

// SetNillableGitTag sets the "git_tag" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableGitTag(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetGitTag(*s)
	}
	return scuo
}

// ClearGitTag clears the value of the "git_tag" field.
func (scuo *ServiceConfigUpdateOne) ClearGitTag() *ServiceConfigUpdateOne {
	scuo.mutation.ClearGitTag()
	return scuo
}

// SetHosts sets the "hosts" field.
func (scuo *ServiceConfigUpdateOne) SetHosts(ss []schema.HostSpec) *ServiceConfigUpdateOne {
	scuo.mutation.SetHosts(ss)
	return scuo
}

// AppendHosts appends ss to the "hosts" field.
func (scuo *ServiceConfigUpdateOne) AppendHosts(ss []schema.HostSpec) *ServiceConfigUpdateOne {
	scuo.mutation.AppendHosts(ss)
	return scuo
}

// ClearHosts clears the value of the "hosts" field.
func (scuo *ServiceConfigUpdateOne) ClearHosts() *ServiceConfigUpdateOne {
	scuo.mutation.ClearHosts()
	return scuo
}

// SetPorts sets the "ports" field.
func (scuo *ServiceConfigUpdateOne) SetPorts(ss []schema.PortSpec) *ServiceConfigUpdateOne {
	scuo.mutation.SetPorts(ss)
	return scuo
}

// AppendPorts appends ss to the "ports" field.
func (scuo *ServiceConfigUpdateOne) AppendPorts(ss []schema.PortSpec) *ServiceConfigUpdateOne {
	scuo.mutation.AppendPorts(ss)
	return scuo
}

// ClearPorts clears the value of the "ports" field.
func (scuo *ServiceConfigUpdateOne) ClearPorts() *ServiceConfigUpdateOne {
	scuo.mutation.ClearPorts()
	return scuo
}

// SetReplicas sets the "replicas" field.
func (scuo *ServiceConfigUpdateOne) SetReplicas(i int32) *ServiceConfigUpdateOne {
	scuo.mutation.ResetReplicas()
	scuo.mutation.SetReplicas(i)
	return scuo
}

// SetNillableReplicas sets the "replicas" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableReplicas(i *int32) *ServiceConfigUpdateOne {
	if i != nil {
		scuo.SetReplicas(*i)
	}
	return scuo
}

// AddReplicas adds i to the "replicas" field.
func (scuo *ServiceConfigUpdateOne) AddReplicas(i int32) *ServiceConfigUpdateOne {
	scuo.mutation.AddReplicas(i)
	return scuo
}

// SetAutoDeploy sets the "auto_deploy" field.
func (scuo *ServiceConfigUpdateOne) SetAutoDeploy(b bool) *ServiceConfigUpdateOne {
	scuo.mutation.SetAutoDeploy(b)
	return scuo
}

// SetNillableAutoDeploy sets the "auto_deploy" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableAutoDeploy(b *bool) *ServiceConfigUpdateOne {
	if b != nil {
		scuo.SetAutoDeploy(*b)
	}
	return scuo
}

// SetRailpackBuilderInstallCommand sets the "railpack_builder_install_command" field.
func (scuo *ServiceConfigUpdateOne) SetRailpackBuilderInstallCommand(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetRailpackBuilderInstallCommand(s)
	return scuo
}

// SetNillableRailpackBuilderInstallCommand sets the "railpack_builder_install_command" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableRailpackBuilderInstallCommand(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetRailpackBuilderInstallCommand(*s)
	}
	return scuo
}

// ClearRailpackBuilderInstallCommand clears the value of the "railpack_builder_install_command" field.
func (scuo *ServiceConfigUpdateOne) ClearRailpackBuilderInstallCommand() *ServiceConfigUpdateOne {
	scuo.mutation.ClearRailpackBuilderInstallCommand()
	return scuo
}

// SetRailpackBuilderBuildCommand sets the "railpack_builder_build_command" field.
func (scuo *ServiceConfigUpdateOne) SetRailpackBuilderBuildCommand(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetRailpackBuilderBuildCommand(s)
	return scuo
}

// SetNillableRailpackBuilderBuildCommand sets the "railpack_builder_build_command" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableRailpackBuilderBuildCommand(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetRailpackBuilderBuildCommand(*s)
	}
	return scuo
}

// ClearRailpackBuilderBuildCommand clears the value of the "railpack_builder_build_command" field.
func (scuo *ServiceConfigUpdateOne) ClearRailpackBuilderBuildCommand() *ServiceConfigUpdateOne {
	scuo.mutation.ClearRailpackBuilderBuildCommand()
	return scuo
}

// SetRunCommand sets the "run_command" field.
func (scuo *ServiceConfigUpdateOne) SetRunCommand(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetRunCommand(s)
	return scuo
}

// SetNillableRunCommand sets the "run_command" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableRunCommand(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetRunCommand(*s)
	}
	return scuo
}

// ClearRunCommand clears the value of the "run_command" field.
func (scuo *ServiceConfigUpdateOne) ClearRunCommand() *ServiceConfigUpdateOne {
	scuo.mutation.ClearRunCommand()
	return scuo
}

// SetIsPublic sets the "is_public" field.
func (scuo *ServiceConfigUpdateOne) SetIsPublic(b bool) *ServiceConfigUpdateOne {
	scuo.mutation.SetIsPublic(b)
	return scuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableIsPublic(b *bool) *ServiceConfigUpdateOne {
	if b != nil {
		scuo.SetIsPublic(*b)
	}
	return scuo
}

// SetImage sets the "image" field.
func (scuo *ServiceConfigUpdateOne) SetImage(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetImage(s)
	return scuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableImage(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetImage(*s)
	}
	return scuo
}

// ClearImage clears the value of the "image" field.
func (scuo *ServiceConfigUpdateOne) ClearImage() *ServiceConfigUpdateOne {
	scuo.mutation.ClearImage()
	return scuo
}

// SetDefinitionVersion sets the "definition_version" field.
func (scuo *ServiceConfigUpdateOne) SetDefinitionVersion(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetDefinitionVersion(s)
	return scuo
}

// SetNillableDefinitionVersion sets the "definition_version" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableDefinitionVersion(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetDefinitionVersion(*s)
	}
	return scuo
}

// ClearDefinitionVersion clears the value of the "definition_version" field.
func (scuo *ServiceConfigUpdateOne) ClearDefinitionVersion() *ServiceConfigUpdateOne {
	scuo.mutation.ClearDefinitionVersion()
	return scuo
}

// SetDatabaseConfig sets the "database_config" field.
func (scuo *ServiceConfigUpdateOne) SetDatabaseConfig(sc *schema.DatabaseConfig) *ServiceConfigUpdateOne {
	scuo.mutation.SetDatabaseConfig(sc)
	return scuo
}

// ClearDatabaseConfig clears the value of the "database_config" field.
func (scuo *ServiceConfigUpdateOne) ClearDatabaseConfig() *ServiceConfigUpdateOne {
	scuo.mutation.ClearDatabaseConfig()
	return scuo
}

// SetS3BackupSourceID sets the "s3_backup_source_id" field.
func (scuo *ServiceConfigUpdateOne) SetS3BackupSourceID(u uuid.UUID) *ServiceConfigUpdateOne {
	scuo.mutation.SetS3BackupSourceID(u)
	return scuo
}

// SetNillableS3BackupSourceID sets the "s3_backup_source_id" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableS3BackupSourceID(u *uuid.UUID) *ServiceConfigUpdateOne {
	if u != nil {
		scuo.SetS3BackupSourceID(*u)
	}
	return scuo
}

// ClearS3BackupSourceID clears the value of the "s3_backup_source_id" field.
func (scuo *ServiceConfigUpdateOne) ClearS3BackupSourceID() *ServiceConfigUpdateOne {
	scuo.mutation.ClearS3BackupSourceID()
	return scuo
}

// SetS3BackupBucket sets the "s3_backup_bucket" field.
func (scuo *ServiceConfigUpdateOne) SetS3BackupBucket(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetS3BackupBucket(s)
	return scuo
}

// SetNillableS3BackupBucket sets the "s3_backup_bucket" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableS3BackupBucket(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetS3BackupBucket(*s)
	}
	return scuo
}

// ClearS3BackupBucket clears the value of the "s3_backup_bucket" field.
func (scuo *ServiceConfigUpdateOne) ClearS3BackupBucket() *ServiceConfigUpdateOne {
	scuo.mutation.ClearS3BackupBucket()
	return scuo
}

// SetBackupSchedule sets the "backup_schedule" field.
func (scuo *ServiceConfigUpdateOne) SetBackupSchedule(s string) *ServiceConfigUpdateOne {
	scuo.mutation.SetBackupSchedule(s)
	return scuo
}

// SetNillableBackupSchedule sets the "backup_schedule" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableBackupSchedule(s *string) *ServiceConfigUpdateOne {
	if s != nil {
		scuo.SetBackupSchedule(*s)
	}
	return scuo
}

// SetBackupRetentionCount sets the "backup_retention_count" field.
func (scuo *ServiceConfigUpdateOne) SetBackupRetentionCount(i int) *ServiceConfigUpdateOne {
	scuo.mutation.ResetBackupRetentionCount()
	scuo.mutation.SetBackupRetentionCount(i)
	return scuo
}

// SetNillableBackupRetentionCount sets the "backup_retention_count" field if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableBackupRetentionCount(i *int) *ServiceConfigUpdateOne {
	if i != nil {
		scuo.SetBackupRetentionCount(*i)
	}
	return scuo
}

// AddBackupRetentionCount adds i to the "backup_retention_count" field.
func (scuo *ServiceConfigUpdateOne) AddBackupRetentionCount(i int) *ServiceConfigUpdateOne {
	scuo.mutation.AddBackupRetentionCount(i)
	return scuo
}

// SetVolumes sets the "volumes" field.
func (scuo *ServiceConfigUpdateOne) SetVolumes(sv []schema.ServiceVolume) *ServiceConfigUpdateOne {
	scuo.mutation.SetVolumes(sv)
	return scuo
}

// AppendVolumes appends sv to the "volumes" field.
func (scuo *ServiceConfigUpdateOne) AppendVolumes(sv []schema.ServiceVolume) *ServiceConfigUpdateOne {
	scuo.mutation.AppendVolumes(sv)
	return scuo
}

// ClearVolumes clears the value of the "volumes" field.
func (scuo *ServiceConfigUpdateOne) ClearVolumes() *ServiceConfigUpdateOne {
	scuo.mutation.ClearVolumes()
	return scuo
}

// SetSecurityContext sets the "security_context" field.
func (scuo *ServiceConfigUpdateOne) SetSecurityContext(sc *schema.SecurityContext) *ServiceConfigUpdateOne {
	scuo.mutation.SetSecurityContext(sc)
	return scuo
}

// ClearSecurityContext clears the value of the "security_context" field.
func (scuo *ServiceConfigUpdateOne) ClearSecurityContext() *ServiceConfigUpdateOne {
	scuo.mutation.ClearSecurityContext()
	return scuo
}

// SetHealthCheck sets the "health_check" field.
func (scuo *ServiceConfigUpdateOne) SetHealthCheck(sc *schema.HealthCheck) *ServiceConfigUpdateOne {
	scuo.mutation.SetHealthCheck(sc)
	return scuo
}

// ClearHealthCheck clears the value of the "health_check" field.
func (scuo *ServiceConfigUpdateOne) ClearHealthCheck() *ServiceConfigUpdateOne {
	scuo.mutation.ClearHealthCheck()
	return scuo
}

// SetVariableMounts sets the "variable_mounts" field.
func (scuo *ServiceConfigUpdateOne) SetVariableMounts(sm []*schema.VariableMount) *ServiceConfigUpdateOne {
	scuo.mutation.SetVariableMounts(sm)
	return scuo
}

// AppendVariableMounts appends sm to the "variable_mounts" field.
func (scuo *ServiceConfigUpdateOne) AppendVariableMounts(sm []*schema.VariableMount) *ServiceConfigUpdateOne {
	scuo.mutation.AppendVariableMounts(sm)
	return scuo
}

// ClearVariableMounts clears the value of the "variable_mounts" field.
func (scuo *ServiceConfigUpdateOne) ClearVariableMounts() *ServiceConfigUpdateOne {
	scuo.mutation.ClearVariableMounts()
	return scuo
}

// SetProtectedVariables sets the "protected_variables" field.
func (scuo *ServiceConfigUpdateOne) SetProtectedVariables(s []string) *ServiceConfigUpdateOne {
	scuo.mutation.SetProtectedVariables(s)
	return scuo
}

// AppendProtectedVariables appends s to the "protected_variables" field.
func (scuo *ServiceConfigUpdateOne) AppendProtectedVariables(s []string) *ServiceConfigUpdateOne {
	scuo.mutation.AppendProtectedVariables(s)
	return scuo
}

// ClearProtectedVariables clears the value of the "protected_variables" field.
func (scuo *ServiceConfigUpdateOne) ClearProtectedVariables() *ServiceConfigUpdateOne {
	scuo.mutation.ClearProtectedVariables()
	return scuo
}

// SetInitContainers sets the "init_containers" field.
func (scuo *ServiceConfigUpdateOne) SetInitContainers(sc []*schema.InitContainer) *ServiceConfigUpdateOne {
	scuo.mutation.SetInitContainers(sc)
	return scuo
}

// AppendInitContainers appends sc to the "init_containers" field.
func (scuo *ServiceConfigUpdateOne) AppendInitContainers(sc []*schema.InitContainer) *ServiceConfigUpdateOne {
	scuo.mutation.AppendInitContainers(sc)
	return scuo
}

// ClearInitContainers clears the value of the "init_containers" field.
func (scuo *ServiceConfigUpdateOne) ClearInitContainers() *ServiceConfigUpdateOne {
	scuo.mutation.ClearInitContainers()
	return scuo
}

// SetResources sets the "resources" field.
func (scuo *ServiceConfigUpdateOne) SetResources(s *schema.Resources) *ServiceConfigUpdateOne {
	scuo.mutation.SetResources(s)
	return scuo
}

// ClearResources clears the value of the "resources" field.
func (scuo *ServiceConfigUpdateOne) ClearResources() *ServiceConfigUpdateOne {
	scuo.mutation.ClearResources()
	return scuo
}

// SetService sets the "service" edge to the Service entity.
func (scuo *ServiceConfigUpdateOne) SetService(s *Service) *ServiceConfigUpdateOne {
	return scuo.SetServiceID(s.ID)
}

// SetS3BackupSourcesID sets the "s3_backup_sources" edge to the S3 entity by ID.
func (scuo *ServiceConfigUpdateOne) SetS3BackupSourcesID(id uuid.UUID) *ServiceConfigUpdateOne {
	scuo.mutation.SetS3BackupSourcesID(id)
	return scuo
}

// SetNillableS3BackupSourcesID sets the "s3_backup_sources" edge to the S3 entity by ID if the given value is not nil.
func (scuo *ServiceConfigUpdateOne) SetNillableS3BackupSourcesID(id *uuid.UUID) *ServiceConfigUpdateOne {
	if id != nil {
		scuo = scuo.SetS3BackupSourcesID(*id)
	}
	return scuo
}

// SetS3BackupSources sets the "s3_backup_sources" edge to the S3 entity.
func (scuo *ServiceConfigUpdateOne) SetS3BackupSources(s *S3) *ServiceConfigUpdateOne {
	return scuo.SetS3BackupSourcesID(s.ID)
}

// Mutation returns the ServiceConfigMutation object of the builder.
func (scuo *ServiceConfigUpdateOne) Mutation() *ServiceConfigMutation {
	return scuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (scuo *ServiceConfigUpdateOne) ClearService() *ServiceConfigUpdateOne {
	scuo.mutation.ClearService()
	return scuo
}

// ClearS3BackupSources clears the "s3_backup_sources" edge to the S3 entity.
func (scuo *ServiceConfigUpdateOne) ClearS3BackupSources() *ServiceConfigUpdateOne {
	scuo.mutation.ClearS3BackupSources()
	return scuo
}

// Where appends a list predicates to the ServiceConfigUpdate builder.
func (scuo *ServiceConfigUpdateOne) Where(ps ...predicate.ServiceConfig) *ServiceConfigUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ServiceConfigUpdateOne) Select(field string, fields ...string) *ServiceConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ServiceConfig entity.
func (scuo *ServiceConfigUpdateOne) Save(ctx context.Context) (*ServiceConfig, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ServiceConfigUpdateOne) SaveX(ctx context.Context) *ServiceConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ServiceConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ServiceConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ServiceConfigUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := serviceconfig.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ServiceConfigUpdateOne) check() error {
	if v, ok := scuo.mutation.Builder(); ok {
		if err := serviceconfig.BuilderValidator(v); err != nil {
			return &ValidationError{Name: "builder", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.builder": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.RailpackProvider(); ok {
		if err := serviceconfig.RailpackProviderValidator(v); err != nil {
			return &ValidationError{Name: "railpack_provider", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.railpack_provider": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.RailpackFramework(); ok {
		if err := serviceconfig.RailpackFrameworkValidator(v); err != nil {
			return &ValidationError{Name: "railpack_framework", err: fmt.Errorf(`ent: validator failed for field "ServiceConfig.railpack_framework": %w`, err)}
		}
	}
	if scuo.mutation.ServiceCleared() && len(scuo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceConfig.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *ServiceConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceConfigUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *ServiceConfigUpdateOne) sqlSave(ctx context.Context) (_node *ServiceConfig, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceconfig.Table, serviceconfig.Columns, sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceconfig.FieldID)
		for _, f := range fields {
			if !serviceconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Builder(); ok {
		_spec.SetField(serviceconfig.FieldBuilder, field.TypeEnum, value)
	}
	if value, ok := scuo.mutation.Icon(); ok {
		_spec.SetField(serviceconfig.FieldIcon, field.TypeString, value)
	}
	if value, ok := scuo.mutation.DockerBuilderDockerfilePath(); ok {
		_spec.SetField(serviceconfig.FieldDockerBuilderDockerfilePath, field.TypeString, value)
	}
	if scuo.mutation.DockerBuilderDockerfilePathCleared() {
		_spec.ClearField(serviceconfig.FieldDockerBuilderDockerfilePath, field.TypeString)
	}
	if value, ok := scuo.mutation.DockerBuilderBuildContext(); ok {
		_spec.SetField(serviceconfig.FieldDockerBuilderBuildContext, field.TypeString, value)
	}
	if scuo.mutation.DockerBuilderBuildContextCleared() {
		_spec.ClearField(serviceconfig.FieldDockerBuilderBuildContext, field.TypeString)
	}
	if value, ok := scuo.mutation.RailpackProvider(); ok {
		_spec.SetField(serviceconfig.FieldRailpackProvider, field.TypeEnum, value)
	}
	if scuo.mutation.RailpackProviderCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackProvider, field.TypeEnum)
	}
	if value, ok := scuo.mutation.RailpackFramework(); ok {
		_spec.SetField(serviceconfig.FieldRailpackFramework, field.TypeEnum, value)
	}
	if scuo.mutation.RailpackFrameworkCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackFramework, field.TypeEnum)
	}
	if value, ok := scuo.mutation.GitBranch(); ok {
		_spec.SetField(serviceconfig.FieldGitBranch, field.TypeString, value)
	}
	if scuo.mutation.GitBranchCleared() {
		_spec.ClearField(serviceconfig.FieldGitBranch, field.TypeString)
	}
	if value, ok := scuo.mutation.GitTag(); ok {
		_spec.SetField(serviceconfig.FieldGitTag, field.TypeString, value)
	}
	if scuo.mutation.GitTagCleared() {
		_spec.ClearField(serviceconfig.FieldGitTag, field.TypeString)
	}
	if value, ok := scuo.mutation.Hosts(); ok {
		_spec.SetField(serviceconfig.FieldHosts, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedHosts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldHosts, value)
		})
	}
	if scuo.mutation.HostsCleared() {
		_spec.ClearField(serviceconfig.FieldHosts, field.TypeJSON)
	}
	if value, ok := scuo.mutation.Ports(); ok {
		_spec.SetField(serviceconfig.FieldPorts, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedPorts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldPorts, value)
		})
	}
	if scuo.mutation.PortsCleared() {
		_spec.ClearField(serviceconfig.FieldPorts, field.TypeJSON)
	}
	if value, ok := scuo.mutation.Replicas(); ok {
		_spec.SetField(serviceconfig.FieldReplicas, field.TypeInt32, value)
	}
	if value, ok := scuo.mutation.AddedReplicas(); ok {
		_spec.AddField(serviceconfig.FieldReplicas, field.TypeInt32, value)
	}
	if value, ok := scuo.mutation.AutoDeploy(); ok {
		_spec.SetField(serviceconfig.FieldAutoDeploy, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.RailpackBuilderInstallCommand(); ok {
		_spec.SetField(serviceconfig.FieldRailpackBuilderInstallCommand, field.TypeString, value)
	}
	if scuo.mutation.RailpackBuilderInstallCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackBuilderInstallCommand, field.TypeString)
	}
	if value, ok := scuo.mutation.RailpackBuilderBuildCommand(); ok {
		_spec.SetField(serviceconfig.FieldRailpackBuilderBuildCommand, field.TypeString, value)
	}
	if scuo.mutation.RailpackBuilderBuildCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRailpackBuilderBuildCommand, field.TypeString)
	}
	if value, ok := scuo.mutation.RunCommand(); ok {
		_spec.SetField(serviceconfig.FieldRunCommand, field.TypeString, value)
	}
	if scuo.mutation.RunCommandCleared() {
		_spec.ClearField(serviceconfig.FieldRunCommand, field.TypeString)
	}
	if value, ok := scuo.mutation.IsPublic(); ok {
		_spec.SetField(serviceconfig.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.Image(); ok {
		_spec.SetField(serviceconfig.FieldImage, field.TypeString, value)
	}
	if scuo.mutation.ImageCleared() {
		_spec.ClearField(serviceconfig.FieldImage, field.TypeString)
	}
	if value, ok := scuo.mutation.DefinitionVersion(); ok {
		_spec.SetField(serviceconfig.FieldDefinitionVersion, field.TypeString, value)
	}
	if scuo.mutation.DefinitionVersionCleared() {
		_spec.ClearField(serviceconfig.FieldDefinitionVersion, field.TypeString)
	}
	if value, ok := scuo.mutation.DatabaseConfig(); ok {
		_spec.SetField(serviceconfig.FieldDatabaseConfig, field.TypeJSON, value)
	}
	if scuo.mutation.DatabaseConfigCleared() {
		_spec.ClearField(serviceconfig.FieldDatabaseConfig, field.TypeJSON)
	}
	if value, ok := scuo.mutation.S3BackupBucket(); ok {
		_spec.SetField(serviceconfig.FieldS3BackupBucket, field.TypeString, value)
	}
	if scuo.mutation.S3BackupBucketCleared() {
		_spec.ClearField(serviceconfig.FieldS3BackupBucket, field.TypeString)
	}
	if value, ok := scuo.mutation.BackupSchedule(); ok {
		_spec.SetField(serviceconfig.FieldBackupSchedule, field.TypeString, value)
	}
	if value, ok := scuo.mutation.BackupRetentionCount(); ok {
		_spec.SetField(serviceconfig.FieldBackupRetentionCount, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedBackupRetentionCount(); ok {
		_spec.AddField(serviceconfig.FieldBackupRetentionCount, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.Volumes(); ok {
		_spec.SetField(serviceconfig.FieldVolumes, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedVolumes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldVolumes, value)
		})
	}
	if scuo.mutation.VolumesCleared() {
		_spec.ClearField(serviceconfig.FieldVolumes, field.TypeJSON)
	}
	if value, ok := scuo.mutation.SecurityContext(); ok {
		_spec.SetField(serviceconfig.FieldSecurityContext, field.TypeJSON, value)
	}
	if scuo.mutation.SecurityContextCleared() {
		_spec.ClearField(serviceconfig.FieldSecurityContext, field.TypeJSON)
	}
	if value, ok := scuo.mutation.HealthCheck(); ok {
		_spec.SetField(serviceconfig.FieldHealthCheck, field.TypeJSON, value)
	}
	if scuo.mutation.HealthCheckCleared() {
		_spec.ClearField(serviceconfig.FieldHealthCheck, field.TypeJSON)
	}
	if value, ok := scuo.mutation.VariableMounts(); ok {
		_spec.SetField(serviceconfig.FieldVariableMounts, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedVariableMounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldVariableMounts, value)
		})
	}
	if scuo.mutation.VariableMountsCleared() {
		_spec.ClearField(serviceconfig.FieldVariableMounts, field.TypeJSON)
	}
	if value, ok := scuo.mutation.ProtectedVariables(); ok {
		_spec.SetField(serviceconfig.FieldProtectedVariables, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedProtectedVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldProtectedVariables, value)
		})
	}
	if scuo.mutation.ProtectedVariablesCleared() {
		_spec.ClearField(serviceconfig.FieldProtectedVariables, field.TypeJSON)
	}
	if value, ok := scuo.mutation.InitContainers(); ok {
		_spec.SetField(serviceconfig.FieldInitContainers, field.TypeJSON, value)
	}
	if value, ok := scuo.mutation.AppendedInitContainers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceconfig.FieldInitContainers, value)
		})
	}
	if scuo.mutation.InitContainersCleared() {
		_spec.ClearField(serviceconfig.FieldInitContainers, field.TypeJSON)
	}
	if value, ok := scuo.mutation.Resources(); ok {
		_spec.SetField(serviceconfig.FieldResources, field.TypeJSON, value)
	}
	if scuo.mutation.ResourcesCleared() {
		_spec.ClearField(serviceconfig.FieldResources, field.TypeJSON)
	}
	if scuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.S3BackupSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceconfig.S3BackupSourcesTable,
			Columns: []string{serviceconfig.S3BackupSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.S3BackupSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceconfig.S3BackupSourcesTable,
			Columns: []string{serviceconfig.S3BackupSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &ServiceConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
