// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/internal/models"
)

// GithubInstallationUpdate is the builder for updating GithubInstallation entities.
type GithubInstallationUpdate struct {
	config
	hooks     []Hook
	mutation  *GithubInstallationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GithubInstallationUpdate builder.
func (giu *GithubInstallationUpdate) Where(ps ...predicate.GithubInstallation) *GithubInstallationUpdate {
	giu.mutation.Where(ps...)
	return giu
}

// SetUpdatedAt sets the "updated_at" field.
func (giu *GithubInstallationUpdate) SetUpdatedAt(t time.Time) *GithubInstallationUpdate {
	giu.mutation.SetUpdatedAt(t)
	return giu
}

// SetGithubAppID sets the "github_app_id" field.
func (giu *GithubInstallationUpdate) SetGithubAppID(i int64) *GithubInstallationUpdate {
	giu.mutation.SetGithubAppID(i)
	return giu
}

// SetNillableGithubAppID sets the "github_app_id" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableGithubAppID(i *int64) *GithubInstallationUpdate {
	if i != nil {
		giu.SetGithubAppID(*i)
	}
	return giu
}

// SetAccountID sets the "account_id" field.
func (giu *GithubInstallationUpdate) SetAccountID(i int64) *GithubInstallationUpdate {
	giu.mutation.ResetAccountID()
	giu.mutation.SetAccountID(i)
	return giu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableAccountID(i *int64) *GithubInstallationUpdate {
	if i != nil {
		giu.SetAccountID(*i)
	}
	return giu
}

// AddAccountID adds i to the "account_id" field.
func (giu *GithubInstallationUpdate) AddAccountID(i int64) *GithubInstallationUpdate {
	giu.mutation.AddAccountID(i)
	return giu
}

// SetAccountLogin sets the "account_login" field.
func (giu *GithubInstallationUpdate) SetAccountLogin(s string) *GithubInstallationUpdate {
	giu.mutation.SetAccountLogin(s)
	return giu
}

// SetNillableAccountLogin sets the "account_login" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableAccountLogin(s *string) *GithubInstallationUpdate {
	if s != nil {
		giu.SetAccountLogin(*s)
	}
	return giu
}

// SetAccountType sets the "account_type" field.
func (giu *GithubInstallationUpdate) SetAccountType(gt githubinstallation.AccountType) *GithubInstallationUpdate {
	giu.mutation.SetAccountType(gt)
	return giu
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableAccountType(gt *githubinstallation.AccountType) *GithubInstallationUpdate {
	if gt != nil {
		giu.SetAccountType(*gt)
	}
	return giu
}

// SetAccountURL sets the "account_url" field.
func (giu *GithubInstallationUpdate) SetAccountURL(s string) *GithubInstallationUpdate {
	giu.mutation.SetAccountURL(s)
	return giu
}

// SetNillableAccountURL sets the "account_url" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableAccountURL(s *string) *GithubInstallationUpdate {
	if s != nil {
		giu.SetAccountURL(*s)
	}
	return giu
}

// SetRepositorySelection sets the "repository_selection" field.
func (giu *GithubInstallationUpdate) SetRepositorySelection(gs githubinstallation.RepositorySelection) *GithubInstallationUpdate {
	giu.mutation.SetRepositorySelection(gs)
	return giu
}

// SetNillableRepositorySelection sets the "repository_selection" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableRepositorySelection(gs *githubinstallation.RepositorySelection) *GithubInstallationUpdate {
	if gs != nil {
		giu.SetRepositorySelection(*gs)
	}
	return giu
}

// SetSuspended sets the "suspended" field.
func (giu *GithubInstallationUpdate) SetSuspended(b bool) *GithubInstallationUpdate {
	giu.mutation.SetSuspended(b)
	return giu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableSuspended(b *bool) *GithubInstallationUpdate {
	if b != nil {
		giu.SetSuspended(*b)
	}
	return giu
}

// SetActive sets the "active" field.
func (giu *GithubInstallationUpdate) SetActive(b bool) *GithubInstallationUpdate {
	giu.mutation.SetActive(b)
	return giu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillableActive(b *bool) *GithubInstallationUpdate {
	if b != nil {
		giu.SetActive(*b)
	}
	return giu
}

// SetPermissions sets the "permissions" field.
func (giu *GithubInstallationUpdate) SetPermissions(mip models.GithubInstallationPermissions) *GithubInstallationUpdate {
	giu.mutation.SetPermissions(mip)
	return giu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (giu *GithubInstallationUpdate) SetNillablePermissions(mip *models.GithubInstallationPermissions) *GithubInstallationUpdate {
	if mip != nil {
		giu.SetPermissions(*mip)
	}
	return giu
}

// ClearPermissions clears the value of the "permissions" field.
func (giu *GithubInstallationUpdate) ClearPermissions() *GithubInstallationUpdate {
	giu.mutation.ClearPermissions()
	return giu
}

// SetEvents sets the "events" field.
func (giu *GithubInstallationUpdate) SetEvents(s []string) *GithubInstallationUpdate {
	giu.mutation.SetEvents(s)
	return giu
}

// AppendEvents appends s to the "events" field.
func (giu *GithubInstallationUpdate) AppendEvents(s []string) *GithubInstallationUpdate {
	giu.mutation.AppendEvents(s)
	return giu
}

// ClearEvents clears the value of the "events" field.
func (giu *GithubInstallationUpdate) ClearEvents() *GithubInstallationUpdate {
	giu.mutation.ClearEvents()
	return giu
}

// SetGithubApp sets the "github_app" edge to the GithubApp entity.
func (giu *GithubInstallationUpdate) SetGithubApp(g *GithubApp) *GithubInstallationUpdate {
	return giu.SetGithubAppID(g.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (giu *GithubInstallationUpdate) AddServiceIDs(ids ...uuid.UUID) *GithubInstallationUpdate {
	giu.mutation.AddServiceIDs(ids...)
	return giu
}

// AddServices adds the "services" edges to the Service entity.
func (giu *GithubInstallationUpdate) AddServices(s ...*Service) *GithubInstallationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return giu.AddServiceIDs(ids...)
}

// Mutation returns the GithubInstallationMutation object of the builder.
func (giu *GithubInstallationUpdate) Mutation() *GithubInstallationMutation {
	return giu.mutation
}

// ClearGithubApp clears the "github_app" edge to the GithubApp entity.
func (giu *GithubInstallationUpdate) ClearGithubApp() *GithubInstallationUpdate {
	giu.mutation.ClearGithubApp()
	return giu
}

// ClearServices clears all "services" edges to the Service entity.
func (giu *GithubInstallationUpdate) ClearServices() *GithubInstallationUpdate {
	giu.mutation.ClearServices()
	return giu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (giu *GithubInstallationUpdate) RemoveServiceIDs(ids ...uuid.UUID) *GithubInstallationUpdate {
	giu.mutation.RemoveServiceIDs(ids...)
	return giu
}

// RemoveServices removes "services" edges to Service entities.
func (giu *GithubInstallationUpdate) RemoveServices(s ...*Service) *GithubInstallationUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return giu.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (giu *GithubInstallationUpdate) Save(ctx context.Context) (int, error) {
	giu.defaults()
	return withHooks(ctx, giu.sqlSave, giu.mutation, giu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (giu *GithubInstallationUpdate) SaveX(ctx context.Context) int {
	affected, err := giu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (giu *GithubInstallationUpdate) Exec(ctx context.Context) error {
	_, err := giu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giu *GithubInstallationUpdate) ExecX(ctx context.Context) {
	if err := giu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giu *GithubInstallationUpdate) defaults() {
	if _, ok := giu.mutation.UpdatedAt(); !ok {
		v := githubinstallation.UpdateDefaultUpdatedAt()
		giu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giu *GithubInstallationUpdate) check() error {
	if v, ok := giu.mutation.AccountLogin(); ok {
		if err := githubinstallation.AccountLoginValidator(v); err != nil {
			return &ValidationError{Name: "account_login", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_login": %w`, err)}
		}
	}
	if v, ok := giu.mutation.AccountType(); ok {
		if err := githubinstallation.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_type": %w`, err)}
		}
	}
	if v, ok := giu.mutation.AccountURL(); ok {
		if err := githubinstallation.AccountURLValidator(v); err != nil {
			return &ValidationError{Name: "account_url", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_url": %w`, err)}
		}
	}
	if v, ok := giu.mutation.RepositorySelection(); ok {
		if err := githubinstallation.RepositorySelectionValidator(v); err != nil {
			return &ValidationError{Name: "repository_selection", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.repository_selection": %w`, err)}
		}
	}
	if giu.mutation.GithubAppCleared() && len(giu.mutation.GithubAppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GithubInstallation.github_app"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (giu *GithubInstallationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GithubInstallationUpdate {
	giu.modifiers = append(giu.modifiers, modifiers...)
	return giu
}

func (giu *GithubInstallationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := giu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(githubinstallation.Table, githubinstallation.Columns, sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64))
	if ps := giu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giu.mutation.UpdatedAt(); ok {
		_spec.SetField(githubinstallation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := giu.mutation.AccountID(); ok {
		_spec.SetField(githubinstallation.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := giu.mutation.AddedAccountID(); ok {
		_spec.AddField(githubinstallation.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := giu.mutation.AccountLogin(); ok {
		_spec.SetField(githubinstallation.FieldAccountLogin, field.TypeString, value)
	}
	if value, ok := giu.mutation.AccountType(); ok {
		_spec.SetField(githubinstallation.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := giu.mutation.AccountURL(); ok {
		_spec.SetField(githubinstallation.FieldAccountURL, field.TypeString, value)
	}
	if value, ok := giu.mutation.RepositorySelection(); ok {
		_spec.SetField(githubinstallation.FieldRepositorySelection, field.TypeEnum, value)
	}
	if value, ok := giu.mutation.Suspended(); ok {
		_spec.SetField(githubinstallation.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := giu.mutation.Active(); ok {
		_spec.SetField(githubinstallation.FieldActive, field.TypeBool, value)
	}
	if value, ok := giu.mutation.Permissions(); ok {
		_spec.SetField(githubinstallation.FieldPermissions, field.TypeJSON, value)
	}
	if giu.mutation.PermissionsCleared() {
		_spec.ClearField(githubinstallation.FieldPermissions, field.TypeJSON)
	}
	if value, ok := giu.mutation.Events(); ok {
		_spec.SetField(githubinstallation.FieldEvents, field.TypeJSON, value)
	}
	if value, ok := giu.mutation.AppendedEvents(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, githubinstallation.FieldEvents, value)
		})
	}
	if giu.mutation.EventsCleared() {
		_spec.ClearField(githubinstallation.FieldEvents, field.TypeJSON)
	}
	if giu.mutation.GithubAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubinstallation.GithubAppTable,
			Columns: []string{githubinstallation.GithubAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.mutation.GithubAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubinstallation.GithubAppTable,
			Columns: []string{githubinstallation.GithubAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if giu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !giu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(giu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, giu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubinstallation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	giu.mutation.done = true
	return n, nil
}

// GithubInstallationUpdateOne is the builder for updating a single GithubInstallation entity.
type GithubInstallationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GithubInstallationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (giuo *GithubInstallationUpdateOne) SetUpdatedAt(t time.Time) *GithubInstallationUpdateOne {
	giuo.mutation.SetUpdatedAt(t)
	return giuo
}

// SetGithubAppID sets the "github_app_id" field.
func (giuo *GithubInstallationUpdateOne) SetGithubAppID(i int64) *GithubInstallationUpdateOne {
	giuo.mutation.SetGithubAppID(i)
	return giuo
}

// SetNillableGithubAppID sets the "github_app_id" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableGithubAppID(i *int64) *GithubInstallationUpdateOne {
	if i != nil {
		giuo.SetGithubAppID(*i)
	}
	return giuo
}

// SetAccountID sets the "account_id" field.
func (giuo *GithubInstallationUpdateOne) SetAccountID(i int64) *GithubInstallationUpdateOne {
	giuo.mutation.ResetAccountID()
	giuo.mutation.SetAccountID(i)
	return giuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableAccountID(i *int64) *GithubInstallationUpdateOne {
	if i != nil {
		giuo.SetAccountID(*i)
	}
	return giuo
}

// AddAccountID adds i to the "account_id" field.
func (giuo *GithubInstallationUpdateOne) AddAccountID(i int64) *GithubInstallationUpdateOne {
	giuo.mutation.AddAccountID(i)
	return giuo
}

// SetAccountLogin sets the "account_login" field.
func (giuo *GithubInstallationUpdateOne) SetAccountLogin(s string) *GithubInstallationUpdateOne {
	giuo.mutation.SetAccountLogin(s)
	return giuo
}

// SetNillableAccountLogin sets the "account_login" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableAccountLogin(s *string) *GithubInstallationUpdateOne {
	if s != nil {
		giuo.SetAccountLogin(*s)
	}
	return giuo
}

// SetAccountType sets the "account_type" field.
func (giuo *GithubInstallationUpdateOne) SetAccountType(gt githubinstallation.AccountType) *GithubInstallationUpdateOne {
	giuo.mutation.SetAccountType(gt)
	return giuo
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableAccountType(gt *githubinstallation.AccountType) *GithubInstallationUpdateOne {
	if gt != nil {
		giuo.SetAccountType(*gt)
	}
	return giuo
}

// SetAccountURL sets the "account_url" field.
func (giuo *GithubInstallationUpdateOne) SetAccountURL(s string) *GithubInstallationUpdateOne {
	giuo.mutation.SetAccountURL(s)
	return giuo
}

// SetNillableAccountURL sets the "account_url" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableAccountURL(s *string) *GithubInstallationUpdateOne {
	if s != nil {
		giuo.SetAccountURL(*s)
	}
	return giuo
}

// SetRepositorySelection sets the "repository_selection" field.
func (giuo *GithubInstallationUpdateOne) SetRepositorySelection(gs githubinstallation.RepositorySelection) *GithubInstallationUpdateOne {
	giuo.mutation.SetRepositorySelection(gs)
	return giuo
}

// SetNillableRepositorySelection sets the "repository_selection" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableRepositorySelection(gs *githubinstallation.RepositorySelection) *GithubInstallationUpdateOne {
	if gs != nil {
		giuo.SetRepositorySelection(*gs)
	}
	return giuo
}

// SetSuspended sets the "suspended" field.
func (giuo *GithubInstallationUpdateOne) SetSuspended(b bool) *GithubInstallationUpdateOne {
	giuo.mutation.SetSuspended(b)
	return giuo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableSuspended(b *bool) *GithubInstallationUpdateOne {
	if b != nil {
		giuo.SetSuspended(*b)
	}
	return giuo
}

// SetActive sets the "active" field.
func (giuo *GithubInstallationUpdateOne) SetActive(b bool) *GithubInstallationUpdateOne {
	giuo.mutation.SetActive(b)
	return giuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillableActive(b *bool) *GithubInstallationUpdateOne {
	if b != nil {
		giuo.SetActive(*b)
	}
	return giuo
}

// SetPermissions sets the "permissions" field.
func (giuo *GithubInstallationUpdateOne) SetPermissions(mip models.GithubInstallationPermissions) *GithubInstallationUpdateOne {
	giuo.mutation.SetPermissions(mip)
	return giuo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (giuo *GithubInstallationUpdateOne) SetNillablePermissions(mip *models.GithubInstallationPermissions) *GithubInstallationUpdateOne {
	if mip != nil {
		giuo.SetPermissions(*mip)
	}
	return giuo
}

// ClearPermissions clears the value of the "permissions" field.
func (giuo *GithubInstallationUpdateOne) ClearPermissions() *GithubInstallationUpdateOne {
	giuo.mutation.ClearPermissions()
	return giuo
}

// SetEvents sets the "events" field.
func (giuo *GithubInstallationUpdateOne) SetEvents(s []string) *GithubInstallationUpdateOne {
	giuo.mutation.SetEvents(s)
	return giuo
}

// AppendEvents appends s to the "events" field.
func (giuo *GithubInstallationUpdateOne) AppendEvents(s []string) *GithubInstallationUpdateOne {
	giuo.mutation.AppendEvents(s)
	return giuo
}

// ClearEvents clears the value of the "events" field.
func (giuo *GithubInstallationUpdateOne) ClearEvents() *GithubInstallationUpdateOne {
	giuo.mutation.ClearEvents()
	return giuo
}

// SetGithubApp sets the "github_app" edge to the GithubApp entity.
func (giuo *GithubInstallationUpdateOne) SetGithubApp(g *GithubApp) *GithubInstallationUpdateOne {
	return giuo.SetGithubAppID(g.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (giuo *GithubInstallationUpdateOne) AddServiceIDs(ids ...uuid.UUID) *GithubInstallationUpdateOne {
	giuo.mutation.AddServiceIDs(ids...)
	return giuo
}

// AddServices adds the "services" edges to the Service entity.
func (giuo *GithubInstallationUpdateOne) AddServices(s ...*Service) *GithubInstallationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return giuo.AddServiceIDs(ids...)
}

// Mutation returns the GithubInstallationMutation object of the builder.
func (giuo *GithubInstallationUpdateOne) Mutation() *GithubInstallationMutation {
	return giuo.mutation
}

// ClearGithubApp clears the "github_app" edge to the GithubApp entity.
func (giuo *GithubInstallationUpdateOne) ClearGithubApp() *GithubInstallationUpdateOne {
	giuo.mutation.ClearGithubApp()
	return giuo
}

// ClearServices clears all "services" edges to the Service entity.
func (giuo *GithubInstallationUpdateOne) ClearServices() *GithubInstallationUpdateOne {
	giuo.mutation.ClearServices()
	return giuo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (giuo *GithubInstallationUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *GithubInstallationUpdateOne {
	giuo.mutation.RemoveServiceIDs(ids...)
	return giuo
}

// RemoveServices removes "services" edges to Service entities.
func (giuo *GithubInstallationUpdateOne) RemoveServices(s ...*Service) *GithubInstallationUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return giuo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the GithubInstallationUpdate builder.
func (giuo *GithubInstallationUpdateOne) Where(ps ...predicate.GithubInstallation) *GithubInstallationUpdateOne {
	giuo.mutation.Where(ps...)
	return giuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (giuo *GithubInstallationUpdateOne) Select(field string, fields ...string) *GithubInstallationUpdateOne {
	giuo.fields = append([]string{field}, fields...)
	return giuo
}

// Save executes the query and returns the updated GithubInstallation entity.
func (giuo *GithubInstallationUpdateOne) Save(ctx context.Context) (*GithubInstallation, error) {
	giuo.defaults()
	return withHooks(ctx, giuo.sqlSave, giuo.mutation, giuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (giuo *GithubInstallationUpdateOne) SaveX(ctx context.Context) *GithubInstallation {
	node, err := giuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (giuo *GithubInstallationUpdateOne) Exec(ctx context.Context) error {
	_, err := giuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giuo *GithubInstallationUpdateOne) ExecX(ctx context.Context) {
	if err := giuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giuo *GithubInstallationUpdateOne) defaults() {
	if _, ok := giuo.mutation.UpdatedAt(); !ok {
		v := githubinstallation.UpdateDefaultUpdatedAt()
		giuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giuo *GithubInstallationUpdateOne) check() error {
	if v, ok := giuo.mutation.AccountLogin(); ok {
		if err := githubinstallation.AccountLoginValidator(v); err != nil {
			return &ValidationError{Name: "account_login", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_login": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.AccountType(); ok {
		if err := githubinstallation.AccountTypeValidator(v); err != nil {
			return &ValidationError{Name: "account_type", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_type": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.AccountURL(); ok {
		if err := githubinstallation.AccountURLValidator(v); err != nil {
			return &ValidationError{Name: "account_url", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.account_url": %w`, err)}
		}
	}
	if v, ok := giuo.mutation.RepositorySelection(); ok {
		if err := githubinstallation.RepositorySelectionValidator(v); err != nil {
			return &ValidationError{Name: "repository_selection", err: fmt.Errorf(`ent: validator failed for field "GithubInstallation.repository_selection": %w`, err)}
		}
	}
	if giuo.mutation.GithubAppCleared() && len(giuo.mutation.GithubAppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GithubInstallation.github_app"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (giuo *GithubInstallationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GithubInstallationUpdateOne {
	giuo.modifiers = append(giuo.modifiers, modifiers...)
	return giuo
}

func (giuo *GithubInstallationUpdateOne) sqlSave(ctx context.Context) (_node *GithubInstallation, err error) {
	if err := giuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(githubinstallation.Table, githubinstallation.Columns, sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64))
	id, ok := giuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GithubInstallation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := giuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, githubinstallation.FieldID)
		for _, f := range fields {
			if !githubinstallation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != githubinstallation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := giuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giuo.mutation.UpdatedAt(); ok {
		_spec.SetField(githubinstallation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := giuo.mutation.AccountID(); ok {
		_spec.SetField(githubinstallation.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := giuo.mutation.AddedAccountID(); ok {
		_spec.AddField(githubinstallation.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := giuo.mutation.AccountLogin(); ok {
		_spec.SetField(githubinstallation.FieldAccountLogin, field.TypeString, value)
	}
	if value, ok := giuo.mutation.AccountType(); ok {
		_spec.SetField(githubinstallation.FieldAccountType, field.TypeEnum, value)
	}
	if value, ok := giuo.mutation.AccountURL(); ok {
		_spec.SetField(githubinstallation.FieldAccountURL, field.TypeString, value)
	}
	if value, ok := giuo.mutation.RepositorySelection(); ok {
		_spec.SetField(githubinstallation.FieldRepositorySelection, field.TypeEnum, value)
	}
	if value, ok := giuo.mutation.Suspended(); ok {
		_spec.SetField(githubinstallation.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := giuo.mutation.Active(); ok {
		_spec.SetField(githubinstallation.FieldActive, field.TypeBool, value)
	}
	if value, ok := giuo.mutation.Permissions(); ok {
		_spec.SetField(githubinstallation.FieldPermissions, field.TypeJSON, value)
	}
	if giuo.mutation.PermissionsCleared() {
		_spec.ClearField(githubinstallation.FieldPermissions, field.TypeJSON)
	}
	if value, ok := giuo.mutation.Events(); ok {
		_spec.SetField(githubinstallation.FieldEvents, field.TypeJSON, value)
	}
	if value, ok := giuo.mutation.AppendedEvents(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, githubinstallation.FieldEvents, value)
		})
	}
	if giuo.mutation.EventsCleared() {
		_spec.ClearField(githubinstallation.FieldEvents, field.TypeJSON)
	}
	if giuo.mutation.GithubAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubinstallation.GithubAppTable,
			Columns: []string{githubinstallation.GithubAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.mutation.GithubAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   githubinstallation.GithubAppTable,
			Columns: []string{githubinstallation.GithubAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if giuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !giuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giuo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubinstallation.ServicesTable,
			Columns: []string{githubinstallation.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(giuo.modifiers...)
	_node = &GithubInstallation{config: giuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, giuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubinstallation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	giuo.mutation.done = true
	return _node, nil
}
