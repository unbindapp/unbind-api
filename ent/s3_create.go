// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/s3"
)

// S3Create is the builder for creating a S3 entity.
type S3Create struct {
	config
	mutation *S3Mutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (s *S3Create) SetCreatedAt(t time.Time) *S3Create {
	s.mutation.SetCreatedAt(t)
	return s
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (s *S3Create) SetNillableCreatedAt(t *time.Time) *S3Create {
	if t != nil {
		s.SetCreatedAt(*t)
	}
	return s
}

// SetUpdatedAt sets the "updated_at" field.
func (s *S3Create) SetUpdatedAt(t time.Time) *S3Create {
	s.mutation.SetUpdatedAt(t)
	return s
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (s *S3Create) SetNillableUpdatedAt(t *time.Time) *S3Create {
	if t != nil {
		s.SetUpdatedAt(*t)
	}
	return s
}

// SetEndpoint sets the "endpoint" field.
func (s *S3Create) SetEndpoint(value string) *S3Create {
	s.mutation.SetEndpoint(value)
	return s
}

// SetRegion sets the "region" field.
func (s *S3Create) SetRegion(value string) *S3Create {
	s.mutation.SetRegion(value)
	return s
}

// SetForcePathStyle sets the "force_path_style" field.
func (s *S3Create) SetForcePathStyle(b bool) *S3Create {
	s.mutation.SetForcePathStyle(b)
	return s
}

// SetNillableForcePathStyle sets the "force_path_style" field if the given value is not nil.
func (s *S3Create) SetNillableForcePathStyle(b *bool) *S3Create {
	if b != nil {
		s.SetForcePathStyle(*b)
	}
	return s
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (s *S3Create) SetKubernetesSecret(value string) *S3Create {
	s.mutation.SetKubernetesSecret(value)
	return s
}

// SetID sets the "id" field.
func (s *S3Create) SetID(u uuid.UUID) *S3Create {
	s.mutation.SetID(u)
	return s
}

// SetNillableID sets the "id" field if the given value is not nil.
func (s *S3Create) SetNillableID(u *uuid.UUID) *S3Create {
	if u != nil {
		s.SetID(*u)
	}
	return s
}

// Mutation returns the S3Mutation object of the builder.
func (s *S3Create) Mutation() *S3Mutation {
	return s.mutation
}

// Save creates the S3 in the database.
func (s *S3Create) Save(ctx context.Context) (*S3, error) {
	s.defaults()
	return withHooks(ctx, s.sqlSave, s.mutation, s.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (s *S3Create) SaveX(ctx context.Context) *S3 {
	v, err := s.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (s *S3Create) Exec(ctx context.Context) error {
	_, err := s.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (s *S3Create) ExecX(ctx context.Context) {
	if err := s.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (s *S3Create) defaults() {
	if _, ok := s.mutation.CreatedAt(); !ok {
		v := s3.DefaultCreatedAt()
		s.mutation.SetCreatedAt(v)
	}
	if _, ok := s.mutation.UpdatedAt(); !ok {
		v := s3.DefaultUpdatedAt()
		s.mutation.SetUpdatedAt(v)
	}
	if _, ok := s.mutation.ForcePathStyle(); !ok {
		v := s3.DefaultForcePathStyle
		s.mutation.SetForcePathStyle(v)
	}
	if _, ok := s.mutation.ID(); !ok {
		v := s3.DefaultID()
		s.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (s *S3Create) check() error {
	if _, ok := s.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "S3.created_at"`)}
	}
	if _, ok := s.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "S3.updated_at"`)}
	}
	if _, ok := s.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "S3.endpoint"`)}
	}
	if _, ok := s.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "S3.region"`)}
	}
	if _, ok := s.mutation.ForcePathStyle(); !ok {
		return &ValidationError{Name: "force_path_style", err: errors.New(`ent: missing required field "S3.force_path_style"`)}
	}
	if _, ok := s.mutation.KubernetesSecret(); !ok {
		return &ValidationError{Name: "kubernetes_secret", err: errors.New(`ent: missing required field "S3.kubernetes_secret"`)}
	}
	return nil
}

func (s *S3Create) sqlSave(ctx context.Context) (*S3, error) {
	if err := s.check(); err != nil {
		return nil, err
	}
	_node, _spec := s.createSpec()
	if err := sqlgraph.CreateNode(ctx, s.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	s.mutation.id = &_node.ID
	s.mutation.done = true
	return _node, nil
}

func (s *S3Create) createSpec() (*S3, *sqlgraph.CreateSpec) {
	var (
		_node = &S3{config: s.config}
		_spec = sqlgraph.NewCreateSpec(s3.Table, sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = s.conflict
	if id, ok := s.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := s.mutation.CreatedAt(); ok {
		_spec.SetField(s3.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := s.mutation.UpdatedAt(); ok {
		_spec.SetField(s3.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := s.mutation.Endpoint(); ok {
		_spec.SetField(s3.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := s.mutation.Region(); ok {
		_spec.SetField(s3.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := s.mutation.ForcePathStyle(); ok {
		_spec.SetField(s3.FieldForcePathStyle, field.TypeBool, value)
		_node.ForcePathStyle = value
	}
	if value, ok := s.mutation.KubernetesSecret(); ok {
		_spec.SetField(s3.FieldKubernetesSecret, field.TypeString, value)
		_node.KubernetesSecret = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.S3.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.S3Upsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (s *S3Create) OnConflict(opts ...sql.ConflictOption) *S3UpsertOne {
	s.conflict = opts
	return &S3UpsertOne{
		create: s,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.S3.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (s *S3Create) OnConflictColumns(columns ...string) *S3UpsertOne {
	s.conflict = append(s.conflict, sql.ConflictColumns(columns...))
	return &S3UpsertOne{
		create: s,
	}
}

type (
	// S3UpsertOne is the builder for "upsert"-ing
	//  one S3 node.
	S3UpsertOne struct {
		create *S3Create
	}

	// S3Upsert is the "OnConflict" setter.
	S3Upsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *S3Upsert) SetUpdatedAt(v time.Time) *S3Upsert {
	u.Set(s3.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *S3Upsert) UpdateUpdatedAt() *S3Upsert {
	u.SetExcluded(s3.FieldUpdatedAt)
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *S3Upsert) SetEndpoint(v string) *S3Upsert {
	u.Set(s3.FieldEndpoint, v)
	return u
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *S3Upsert) UpdateEndpoint() *S3Upsert {
	u.SetExcluded(s3.FieldEndpoint)
	return u
}

// SetRegion sets the "region" field.
func (u *S3Upsert) SetRegion(v string) *S3Upsert {
	u.Set(s3.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *S3Upsert) UpdateRegion() *S3Upsert {
	u.SetExcluded(s3.FieldRegion)
	return u
}

// SetForcePathStyle sets the "force_path_style" field.
func (u *S3Upsert) SetForcePathStyle(v bool) *S3Upsert {
	u.Set(s3.FieldForcePathStyle, v)
	return u
}

// UpdateForcePathStyle sets the "force_path_style" field to the value that was provided on create.
func (u *S3Upsert) UpdateForcePathStyle() *S3Upsert {
	u.SetExcluded(s3.FieldForcePathStyle)
	return u
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *S3Upsert) SetKubernetesSecret(v string) *S3Upsert {
	u.Set(s3.FieldKubernetesSecret, v)
	return u
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *S3Upsert) UpdateKubernetesSecret() *S3Upsert {
	u.SetExcluded(s3.FieldKubernetesSecret)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.S3.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(s3.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *S3UpsertOne) UpdateNewValues() *S3UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(s3.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(s3.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.S3.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *S3UpsertOne) Ignore() *S3UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *S3UpsertOne) DoNothing() *S3UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the S3Create.OnConflict
// documentation for more info.
func (u *S3UpsertOne) Update(set func(*S3Upsert)) *S3UpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&S3Upsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *S3UpsertOne) SetUpdatedAt(v time.Time) *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *S3UpsertOne) UpdateUpdatedAt() *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *S3UpsertOne) SetEndpoint(v string) *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *S3UpsertOne) UpdateEndpoint() *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.UpdateEndpoint()
	})
}

// SetRegion sets the "region" field.
func (u *S3UpsertOne) SetRegion(v string) *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *S3UpsertOne) UpdateRegion() *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.UpdateRegion()
	})
}

// SetForcePathStyle sets the "force_path_style" field.
func (u *S3UpsertOne) SetForcePathStyle(v bool) *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.SetForcePathStyle(v)
	})
}

// UpdateForcePathStyle sets the "force_path_style" field to the value that was provided on create.
func (u *S3UpsertOne) UpdateForcePathStyle() *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.UpdateForcePathStyle()
	})
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *S3UpsertOne) SetKubernetesSecret(v string) *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.SetKubernetesSecret(v)
	})
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *S3UpsertOne) UpdateKubernetesSecret() *S3UpsertOne {
	return u.Update(func(s *S3Upsert) {
		s.UpdateKubernetesSecret()
	})
}

// Exec executes the query.
func (u *S3UpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for S3Create.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *S3UpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *S3UpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: S3UpsertOne.ID is not supported by MySQL driver. Use S3UpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *S3UpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// S3CreateBulk is the builder for creating many S3 entities in bulk.
type S3CreateBulk struct {
	config
	err      error
	builders []*S3Create
	conflict []sql.ConflictOption
}

// Save creates the S3 entities in the database.
func (sb *S3CreateBulk) Save(ctx context.Context) ([]*S3, error) {
	if sb.err != nil {
		return nil, sb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sb.builders))
	nodes := make([]*S3, len(sb.builders))
	mutators := make([]Mutator, len(sb.builders))
	for i := range sb.builders {
		func(i int, root context.Context) {
			builder := sb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*S3Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sb *S3CreateBulk) SaveX(ctx context.Context) []*S3 {
	v, err := sb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sb *S3CreateBulk) Exec(ctx context.Context) error {
	_, err := sb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sb *S3CreateBulk) ExecX(ctx context.Context) {
	if err := sb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.S3.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.S3Upsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sb *S3CreateBulk) OnConflict(opts ...sql.ConflictOption) *S3UpsertBulk {
	sb.conflict = opts
	return &S3UpsertBulk{
		create: sb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.S3.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sb *S3CreateBulk) OnConflictColumns(columns ...string) *S3UpsertBulk {
	sb.conflict = append(sb.conflict, sql.ConflictColumns(columns...))
	return &S3UpsertBulk{
		create: sb,
	}
}

// S3UpsertBulk is the builder for "upsert"-ing
// a bulk of S3 nodes.
type S3UpsertBulk struct {
	create *S3CreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.S3.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(s3.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *S3UpsertBulk) UpdateNewValues() *S3UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(s3.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(s3.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.S3.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *S3UpsertBulk) Ignore() *S3UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *S3UpsertBulk) DoNothing() *S3UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the S3CreateBulk.OnConflict
// documentation for more info.
func (u *S3UpsertBulk) Update(set func(*S3Upsert)) *S3UpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&S3Upsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *S3UpsertBulk) SetUpdatedAt(v time.Time) *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *S3UpsertBulk) UpdateUpdatedAt() *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEndpoint sets the "endpoint" field.
func (u *S3UpsertBulk) SetEndpoint(v string) *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *S3UpsertBulk) UpdateEndpoint() *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.UpdateEndpoint()
	})
}

// SetRegion sets the "region" field.
func (u *S3UpsertBulk) SetRegion(v string) *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *S3UpsertBulk) UpdateRegion() *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.UpdateRegion()
	})
}

// SetForcePathStyle sets the "force_path_style" field.
func (u *S3UpsertBulk) SetForcePathStyle(v bool) *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.SetForcePathStyle(v)
	})
}

// UpdateForcePathStyle sets the "force_path_style" field to the value that was provided on create.
func (u *S3UpsertBulk) UpdateForcePathStyle() *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.UpdateForcePathStyle()
	})
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *S3UpsertBulk) SetKubernetesSecret(v string) *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.SetKubernetesSecret(v)
	})
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *S3UpsertBulk) UpdateKubernetesSecret() *S3UpsertBulk {
	return u.Update(func(s *S3Upsert) {
		s.UpdateKubernetesSecret()
	})
}

// Exec executes the query.
func (u *S3UpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the S3CreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for S3CreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *S3UpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
