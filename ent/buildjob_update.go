// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildjob"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/service"
)

// BuildJobUpdate is the builder for updating BuildJob entities.
type BuildJobUpdate struct {
	config
	hooks     []Hook
	mutation  *BuildJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BuildJobUpdate builder.
func (bju *BuildJobUpdate) Where(ps ...predicate.BuildJob) *BuildJobUpdate {
	bju.mutation.Where(ps...)
	return bju
}

// SetUpdatedAt sets the "updated_at" field.
func (bju *BuildJobUpdate) SetUpdatedAt(t time.Time) *BuildJobUpdate {
	bju.mutation.SetUpdatedAt(t)
	return bju
}

// SetServiceID sets the "service_id" field.
func (bju *BuildJobUpdate) SetServiceID(u uuid.UUID) *BuildJobUpdate {
	bju.mutation.SetServiceID(u)
	return bju
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableServiceID(u *uuid.UUID) *BuildJobUpdate {
	if u != nil {
		bju.SetServiceID(*u)
	}
	return bju
}

// SetStatus sets the "status" field.
func (bju *BuildJobUpdate) SetStatus(b buildjob.Status) *BuildJobUpdate {
	bju.mutation.SetStatus(b)
	return bju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableStatus(b *buildjob.Status) *BuildJobUpdate {
	if b != nil {
		bju.SetStatus(*b)
	}
	return bju
}

// SetError sets the "error" field.
func (bju *BuildJobUpdate) SetError(s string) *BuildJobUpdate {
	bju.mutation.SetError(s)
	return bju
}

// SetNillableError sets the "error" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableError(s *string) *BuildJobUpdate {
	if s != nil {
		bju.SetError(*s)
	}
	return bju
}

// ClearError clears the value of the "error" field.
func (bju *BuildJobUpdate) ClearError() *BuildJobUpdate {
	bju.mutation.ClearError()
	return bju
}

// SetStartedAt sets the "started_at" field.
func (bju *BuildJobUpdate) SetStartedAt(t time.Time) *BuildJobUpdate {
	bju.mutation.SetStartedAt(t)
	return bju
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableStartedAt(t *time.Time) *BuildJobUpdate {
	if t != nil {
		bju.SetStartedAt(*t)
	}
	return bju
}

// ClearStartedAt clears the value of the "started_at" field.
func (bju *BuildJobUpdate) ClearStartedAt() *BuildJobUpdate {
	bju.mutation.ClearStartedAt()
	return bju
}

// SetCompletedAt sets the "completed_at" field.
func (bju *BuildJobUpdate) SetCompletedAt(t time.Time) *BuildJobUpdate {
	bju.mutation.SetCompletedAt(t)
	return bju
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableCompletedAt(t *time.Time) *BuildJobUpdate {
	if t != nil {
		bju.SetCompletedAt(*t)
	}
	return bju
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (bju *BuildJobUpdate) ClearCompletedAt() *BuildJobUpdate {
	bju.mutation.ClearCompletedAt()
	return bju
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (bju *BuildJobUpdate) SetKubernetesJobName(s string) *BuildJobUpdate {
	bju.mutation.SetKubernetesJobName(s)
	return bju
}

// SetNillableKubernetesJobName sets the "kubernetes_job_name" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableKubernetesJobName(s *string) *BuildJobUpdate {
	if s != nil {
		bju.SetKubernetesJobName(*s)
	}
	return bju
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (bju *BuildJobUpdate) ClearKubernetesJobName() *BuildJobUpdate {
	bju.mutation.ClearKubernetesJobName()
	return bju
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (bju *BuildJobUpdate) SetKubernetesJobStatus(s string) *BuildJobUpdate {
	bju.mutation.SetKubernetesJobStatus(s)
	return bju
}

// SetNillableKubernetesJobStatus sets the "kubernetes_job_status" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableKubernetesJobStatus(s *string) *BuildJobUpdate {
	if s != nil {
		bju.SetKubernetesJobStatus(*s)
	}
	return bju
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (bju *BuildJobUpdate) ClearKubernetesJobStatus() *BuildJobUpdate {
	bju.mutation.ClearKubernetesJobStatus()
	return bju
}

// SetAttempts sets the "attempts" field.
func (bju *BuildJobUpdate) SetAttempts(i int) *BuildJobUpdate {
	bju.mutation.ResetAttempts()
	bju.mutation.SetAttempts(i)
	return bju
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (bju *BuildJobUpdate) SetNillableAttempts(i *int) *BuildJobUpdate {
	if i != nil {
		bju.SetAttempts(*i)
	}
	return bju
}

// AddAttempts adds i to the "attempts" field.
func (bju *BuildJobUpdate) AddAttempts(i int) *BuildJobUpdate {
	bju.mutation.AddAttempts(i)
	return bju
}

// SetService sets the "service" edge to the Service entity.
func (bju *BuildJobUpdate) SetService(s *Service) *BuildJobUpdate {
	return bju.SetServiceID(s.ID)
}

// Mutation returns the BuildJobMutation object of the builder.
func (bju *BuildJobUpdate) Mutation() *BuildJobMutation {
	return bju.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (bju *BuildJobUpdate) ClearService() *BuildJobUpdate {
	bju.mutation.ClearService()
	return bju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bju *BuildJobUpdate) Save(ctx context.Context) (int, error) {
	bju.defaults()
	return withHooks(ctx, bju.sqlSave, bju.mutation, bju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bju *BuildJobUpdate) SaveX(ctx context.Context) int {
	affected, err := bju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bju *BuildJobUpdate) Exec(ctx context.Context) error {
	_, err := bju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bju *BuildJobUpdate) ExecX(ctx context.Context) {
	if err := bju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bju *BuildJobUpdate) defaults() {
	if _, ok := bju.mutation.UpdatedAt(); !ok {
		v := buildjob.UpdateDefaultUpdatedAt()
		bju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bju *BuildJobUpdate) check() error {
	if v, ok := bju.mutation.Status(); ok {
		if err := buildjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BuildJob.status": %w`, err)}
		}
	}
	if bju.mutation.ServiceCleared() && len(bju.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BuildJob.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bju *BuildJobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BuildJobUpdate {
	bju.modifiers = append(bju.modifiers, modifiers...)
	return bju
}

func (bju *BuildJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildjob.Table, buildjob.Columns, sqlgraph.NewFieldSpec(buildjob.FieldID, field.TypeUUID))
	if ps := bju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bju.mutation.UpdatedAt(); ok {
		_spec.SetField(buildjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bju.mutation.Status(); ok {
		_spec.SetField(buildjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bju.mutation.Error(); ok {
		_spec.SetField(buildjob.FieldError, field.TypeString, value)
	}
	if bju.mutation.ErrorCleared() {
		_spec.ClearField(buildjob.FieldError, field.TypeString)
	}
	if value, ok := bju.mutation.StartedAt(); ok {
		_spec.SetField(buildjob.FieldStartedAt, field.TypeTime, value)
	}
	if bju.mutation.StartedAtCleared() {
		_spec.ClearField(buildjob.FieldStartedAt, field.TypeTime)
	}
	if value, ok := bju.mutation.CompletedAt(); ok {
		_spec.SetField(buildjob.FieldCompletedAt, field.TypeTime, value)
	}
	if bju.mutation.CompletedAtCleared() {
		_spec.ClearField(buildjob.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := bju.mutation.KubernetesJobName(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobName, field.TypeString, value)
	}
	if bju.mutation.KubernetesJobNameCleared() {
		_spec.ClearField(buildjob.FieldKubernetesJobName, field.TypeString)
	}
	if value, ok := bju.mutation.KubernetesJobStatus(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobStatus, field.TypeString, value)
	}
	if bju.mutation.KubernetesJobStatusCleared() {
		_spec.ClearField(buildjob.FieldKubernetesJobStatus, field.TypeString)
	}
	if value, ok := bju.mutation.Attempts(); ok {
		_spec.SetField(buildjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := bju.mutation.AddedAttempts(); ok {
		_spec.AddField(buildjob.FieldAttempts, field.TypeInt, value)
	}
	if bju.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildjob.ServiceTable,
			Columns: []string{buildjob.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bju.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildjob.ServiceTable,
			Columns: []string{buildjob.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bju.mutation.done = true
	return n, nil
}

// BuildJobUpdateOne is the builder for updating a single BuildJob entity.
type BuildJobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BuildJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bjuo *BuildJobUpdateOne) SetUpdatedAt(t time.Time) *BuildJobUpdateOne {
	bjuo.mutation.SetUpdatedAt(t)
	return bjuo
}

// SetServiceID sets the "service_id" field.
func (bjuo *BuildJobUpdateOne) SetServiceID(u uuid.UUID) *BuildJobUpdateOne {
	bjuo.mutation.SetServiceID(u)
	return bjuo
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableServiceID(u *uuid.UUID) *BuildJobUpdateOne {
	if u != nil {
		bjuo.SetServiceID(*u)
	}
	return bjuo
}

// SetStatus sets the "status" field.
func (bjuo *BuildJobUpdateOne) SetStatus(b buildjob.Status) *BuildJobUpdateOne {
	bjuo.mutation.SetStatus(b)
	return bjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableStatus(b *buildjob.Status) *BuildJobUpdateOne {
	if b != nil {
		bjuo.SetStatus(*b)
	}
	return bjuo
}

// SetError sets the "error" field.
func (bjuo *BuildJobUpdateOne) SetError(s string) *BuildJobUpdateOne {
	bjuo.mutation.SetError(s)
	return bjuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableError(s *string) *BuildJobUpdateOne {
	if s != nil {
		bjuo.SetError(*s)
	}
	return bjuo
}

// ClearError clears the value of the "error" field.
func (bjuo *BuildJobUpdateOne) ClearError() *BuildJobUpdateOne {
	bjuo.mutation.ClearError()
	return bjuo
}

// SetStartedAt sets the "started_at" field.
func (bjuo *BuildJobUpdateOne) SetStartedAt(t time.Time) *BuildJobUpdateOne {
	bjuo.mutation.SetStartedAt(t)
	return bjuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableStartedAt(t *time.Time) *BuildJobUpdateOne {
	if t != nil {
		bjuo.SetStartedAt(*t)
	}
	return bjuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (bjuo *BuildJobUpdateOne) ClearStartedAt() *BuildJobUpdateOne {
	bjuo.mutation.ClearStartedAt()
	return bjuo
}

// SetCompletedAt sets the "completed_at" field.
func (bjuo *BuildJobUpdateOne) SetCompletedAt(t time.Time) *BuildJobUpdateOne {
	bjuo.mutation.SetCompletedAt(t)
	return bjuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableCompletedAt(t *time.Time) *BuildJobUpdateOne {
	if t != nil {
		bjuo.SetCompletedAt(*t)
	}
	return bjuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (bjuo *BuildJobUpdateOne) ClearCompletedAt() *BuildJobUpdateOne {
	bjuo.mutation.ClearCompletedAt()
	return bjuo
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (bjuo *BuildJobUpdateOne) SetKubernetesJobName(s string) *BuildJobUpdateOne {
	bjuo.mutation.SetKubernetesJobName(s)
	return bjuo
}

// SetNillableKubernetesJobName sets the "kubernetes_job_name" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableKubernetesJobName(s *string) *BuildJobUpdateOne {
	if s != nil {
		bjuo.SetKubernetesJobName(*s)
	}
	return bjuo
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (bjuo *BuildJobUpdateOne) ClearKubernetesJobName() *BuildJobUpdateOne {
	bjuo.mutation.ClearKubernetesJobName()
	return bjuo
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (bjuo *BuildJobUpdateOne) SetKubernetesJobStatus(s string) *BuildJobUpdateOne {
	bjuo.mutation.SetKubernetesJobStatus(s)
	return bjuo
}

// SetNillableKubernetesJobStatus sets the "kubernetes_job_status" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableKubernetesJobStatus(s *string) *BuildJobUpdateOne {
	if s != nil {
		bjuo.SetKubernetesJobStatus(*s)
	}
	return bjuo
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (bjuo *BuildJobUpdateOne) ClearKubernetesJobStatus() *BuildJobUpdateOne {
	bjuo.mutation.ClearKubernetesJobStatus()
	return bjuo
}

// SetAttempts sets the "attempts" field.
func (bjuo *BuildJobUpdateOne) SetAttempts(i int) *BuildJobUpdateOne {
	bjuo.mutation.ResetAttempts()
	bjuo.mutation.SetAttempts(i)
	return bjuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (bjuo *BuildJobUpdateOne) SetNillableAttempts(i *int) *BuildJobUpdateOne {
	if i != nil {
		bjuo.SetAttempts(*i)
	}
	return bjuo
}

// AddAttempts adds i to the "attempts" field.
func (bjuo *BuildJobUpdateOne) AddAttempts(i int) *BuildJobUpdateOne {
	bjuo.mutation.AddAttempts(i)
	return bjuo
}

// SetService sets the "service" edge to the Service entity.
func (bjuo *BuildJobUpdateOne) SetService(s *Service) *BuildJobUpdateOne {
	return bjuo.SetServiceID(s.ID)
}

// Mutation returns the BuildJobMutation object of the builder.
func (bjuo *BuildJobUpdateOne) Mutation() *BuildJobMutation {
	return bjuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (bjuo *BuildJobUpdateOne) ClearService() *BuildJobUpdateOne {
	bjuo.mutation.ClearService()
	return bjuo
}

// Where appends a list predicates to the BuildJobUpdate builder.
func (bjuo *BuildJobUpdateOne) Where(ps ...predicate.BuildJob) *BuildJobUpdateOne {
	bjuo.mutation.Where(ps...)
	return bjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bjuo *BuildJobUpdateOne) Select(field string, fields ...string) *BuildJobUpdateOne {
	bjuo.fields = append([]string{field}, fields...)
	return bjuo
}

// Save executes the query and returns the updated BuildJob entity.
func (bjuo *BuildJobUpdateOne) Save(ctx context.Context) (*BuildJob, error) {
	bjuo.defaults()
	return withHooks(ctx, bjuo.sqlSave, bjuo.mutation, bjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bjuo *BuildJobUpdateOne) SaveX(ctx context.Context) *BuildJob {
	node, err := bjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bjuo *BuildJobUpdateOne) Exec(ctx context.Context) error {
	_, err := bjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjuo *BuildJobUpdateOne) ExecX(ctx context.Context) {
	if err := bjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bjuo *BuildJobUpdateOne) defaults() {
	if _, ok := bjuo.mutation.UpdatedAt(); !ok {
		v := buildjob.UpdateDefaultUpdatedAt()
		bjuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bjuo *BuildJobUpdateOne) check() error {
	if v, ok := bjuo.mutation.Status(); ok {
		if err := buildjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BuildJob.status": %w`, err)}
		}
	}
	if bjuo.mutation.ServiceCleared() && len(bjuo.mutation.ServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BuildJob.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bjuo *BuildJobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BuildJobUpdateOne {
	bjuo.modifiers = append(bjuo.modifiers, modifiers...)
	return bjuo
}

func (bjuo *BuildJobUpdateOne) sqlSave(ctx context.Context) (_node *BuildJob, err error) {
	if err := bjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildjob.Table, buildjob.Columns, sqlgraph.NewFieldSpec(buildjob.FieldID, field.TypeUUID))
	id, ok := bjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BuildJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildjob.FieldID)
		for _, f := range fields {
			if !buildjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != buildjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(buildjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bjuo.mutation.Status(); ok {
		_spec.SetField(buildjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bjuo.mutation.Error(); ok {
		_spec.SetField(buildjob.FieldError, field.TypeString, value)
	}
	if bjuo.mutation.ErrorCleared() {
		_spec.ClearField(buildjob.FieldError, field.TypeString)
	}
	if value, ok := bjuo.mutation.StartedAt(); ok {
		_spec.SetField(buildjob.FieldStartedAt, field.TypeTime, value)
	}
	if bjuo.mutation.StartedAtCleared() {
		_spec.ClearField(buildjob.FieldStartedAt, field.TypeTime)
	}
	if value, ok := bjuo.mutation.CompletedAt(); ok {
		_spec.SetField(buildjob.FieldCompletedAt, field.TypeTime, value)
	}
	if bjuo.mutation.CompletedAtCleared() {
		_spec.ClearField(buildjob.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := bjuo.mutation.KubernetesJobName(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobName, field.TypeString, value)
	}
	if bjuo.mutation.KubernetesJobNameCleared() {
		_spec.ClearField(buildjob.FieldKubernetesJobName, field.TypeString)
	}
	if value, ok := bjuo.mutation.KubernetesJobStatus(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobStatus, field.TypeString, value)
	}
	if bjuo.mutation.KubernetesJobStatusCleared() {
		_spec.ClearField(buildjob.FieldKubernetesJobStatus, field.TypeString)
	}
	if value, ok := bjuo.mutation.Attempts(); ok {
		_spec.SetField(buildjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := bjuo.mutation.AddedAttempts(); ok {
		_spec.AddField(buildjob.FieldAttempts, field.TypeInt, value)
	}
	if bjuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildjob.ServiceTable,
			Columns: []string{buildjob.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bjuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildjob.ServiceTable,
			Columns: []string{buildjob.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bjuo.modifiers...)
	_node = &BuildJob{config: bjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bjuo.mutation.done = true
	return _node, nil
}
