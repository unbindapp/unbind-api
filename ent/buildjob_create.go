// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildjob"
	"github.com/unbindapp/unbind-api/ent/service"
)

// BuildJobCreate is the builder for creating a BuildJob entity.
type BuildJobCreate struct {
	config
	mutation *BuildJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bjc *BuildJobCreate) SetCreatedAt(t time.Time) *BuildJobCreate {
	bjc.mutation.SetCreatedAt(t)
	return bjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableCreatedAt(t *time.Time) *BuildJobCreate {
	if t != nil {
		bjc.SetCreatedAt(*t)
	}
	return bjc
}

// SetUpdatedAt sets the "updated_at" field.
func (bjc *BuildJobCreate) SetUpdatedAt(t time.Time) *BuildJobCreate {
	bjc.mutation.SetUpdatedAt(t)
	return bjc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableUpdatedAt(t *time.Time) *BuildJobCreate {
	if t != nil {
		bjc.SetUpdatedAt(*t)
	}
	return bjc
}

// SetServiceID sets the "service_id" field.
func (bjc *BuildJobCreate) SetServiceID(u uuid.UUID) *BuildJobCreate {
	bjc.mutation.SetServiceID(u)
	return bjc
}

// SetStatus sets the "status" field.
func (bjc *BuildJobCreate) SetStatus(b buildjob.Status) *BuildJobCreate {
	bjc.mutation.SetStatus(b)
	return bjc
}

// SetError sets the "error" field.
func (bjc *BuildJobCreate) SetError(s string) *BuildJobCreate {
	bjc.mutation.SetError(s)
	return bjc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableError(s *string) *BuildJobCreate {
	if s != nil {
		bjc.SetError(*s)
	}
	return bjc
}

// SetStartedAt sets the "started_at" field.
func (bjc *BuildJobCreate) SetStartedAt(t time.Time) *BuildJobCreate {
	bjc.mutation.SetStartedAt(t)
	return bjc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableStartedAt(t *time.Time) *BuildJobCreate {
	if t != nil {
		bjc.SetStartedAt(*t)
	}
	return bjc
}

// SetCompletedAt sets the "completed_at" field.
func (bjc *BuildJobCreate) SetCompletedAt(t time.Time) *BuildJobCreate {
	bjc.mutation.SetCompletedAt(t)
	return bjc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableCompletedAt(t *time.Time) *BuildJobCreate {
	if t != nil {
		bjc.SetCompletedAt(*t)
	}
	return bjc
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (bjc *BuildJobCreate) SetKubernetesJobName(s string) *BuildJobCreate {
	bjc.mutation.SetKubernetesJobName(s)
	return bjc
}

// SetNillableKubernetesJobName sets the "kubernetes_job_name" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableKubernetesJobName(s *string) *BuildJobCreate {
	if s != nil {
		bjc.SetKubernetesJobName(*s)
	}
	return bjc
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (bjc *BuildJobCreate) SetKubernetesJobStatus(s string) *BuildJobCreate {
	bjc.mutation.SetKubernetesJobStatus(s)
	return bjc
}

// SetNillableKubernetesJobStatus sets the "kubernetes_job_status" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableKubernetesJobStatus(s *string) *BuildJobCreate {
	if s != nil {
		bjc.SetKubernetesJobStatus(*s)
	}
	return bjc
}

// SetAttempts sets the "attempts" field.
func (bjc *BuildJobCreate) SetAttempts(i int) *BuildJobCreate {
	bjc.mutation.SetAttempts(i)
	return bjc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableAttempts(i *int) *BuildJobCreate {
	if i != nil {
		bjc.SetAttempts(*i)
	}
	return bjc
}

// SetID sets the "id" field.
func (bjc *BuildJobCreate) SetID(u uuid.UUID) *BuildJobCreate {
	bjc.mutation.SetID(u)
	return bjc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bjc *BuildJobCreate) SetNillableID(u *uuid.UUID) *BuildJobCreate {
	if u != nil {
		bjc.SetID(*u)
	}
	return bjc
}

// SetService sets the "service" edge to the Service entity.
func (bjc *BuildJobCreate) SetService(s *Service) *BuildJobCreate {
	return bjc.SetServiceID(s.ID)
}

// Mutation returns the BuildJobMutation object of the builder.
func (bjc *BuildJobCreate) Mutation() *BuildJobMutation {
	return bjc.mutation
}

// Save creates the BuildJob in the database.
func (bjc *BuildJobCreate) Save(ctx context.Context) (*BuildJob, error) {
	bjc.defaults()
	return withHooks(ctx, bjc.sqlSave, bjc.mutation, bjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bjc *BuildJobCreate) SaveX(ctx context.Context) *BuildJob {
	v, err := bjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bjc *BuildJobCreate) Exec(ctx context.Context) error {
	_, err := bjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjc *BuildJobCreate) ExecX(ctx context.Context) {
	if err := bjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bjc *BuildJobCreate) defaults() {
	if _, ok := bjc.mutation.CreatedAt(); !ok {
		v := buildjob.DefaultCreatedAt()
		bjc.mutation.SetCreatedAt(v)
	}
	if _, ok := bjc.mutation.UpdatedAt(); !ok {
		v := buildjob.DefaultUpdatedAt()
		bjc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bjc.mutation.Attempts(); !ok {
		v := buildjob.DefaultAttempts
		bjc.mutation.SetAttempts(v)
	}
	if _, ok := bjc.mutation.ID(); !ok {
		v := buildjob.DefaultID()
		bjc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bjc *BuildJobCreate) check() error {
	if _, ok := bjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BuildJob.created_at"`)}
	}
	if _, ok := bjc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BuildJob.updated_at"`)}
	}
	if _, ok := bjc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`ent: missing required field "BuildJob.service_id"`)}
	}
	if _, ok := bjc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BuildJob.status"`)}
	}
	if v, ok := bjc.mutation.Status(); ok {
		if err := buildjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BuildJob.status": %w`, err)}
		}
	}
	if _, ok := bjc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "BuildJob.attempts"`)}
	}
	if len(bjc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "BuildJob.service"`)}
	}
	return nil
}

func (bjc *BuildJobCreate) sqlSave(ctx context.Context) (*BuildJob, error) {
	if err := bjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bjc.mutation.id = &_node.ID
	bjc.mutation.done = true
	return _node, nil
}

func (bjc *BuildJobCreate) createSpec() (*BuildJob, *sqlgraph.CreateSpec) {
	var (
		_node = &BuildJob{config: bjc.config}
		_spec = sqlgraph.NewCreateSpec(buildjob.Table, sqlgraph.NewFieldSpec(buildjob.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bjc.conflict
	if id, ok := bjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bjc.mutation.CreatedAt(); ok {
		_spec.SetField(buildjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bjc.mutation.UpdatedAt(); ok {
		_spec.SetField(buildjob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bjc.mutation.Status(); ok {
		_spec.SetField(buildjob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bjc.mutation.Error(); ok {
		_spec.SetField(buildjob.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := bjc.mutation.StartedAt(); ok {
		_spec.SetField(buildjob.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := bjc.mutation.CompletedAt(); ok {
		_spec.SetField(buildjob.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := bjc.mutation.KubernetesJobName(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobName, field.TypeString, value)
		_node.KubernetesJobName = value
	}
	if value, ok := bjc.mutation.KubernetesJobStatus(); ok {
		_spec.SetField(buildjob.FieldKubernetesJobStatus, field.TypeString, value)
		_node.KubernetesJobStatus = value
	}
	if value, ok := bjc.mutation.Attempts(); ok {
		_spec.SetField(buildjob.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if nodes := bjc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildjob.ServiceTable,
			Columns: []string{buildjob.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BuildJob.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BuildJobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bjc *BuildJobCreate) OnConflict(opts ...sql.ConflictOption) *BuildJobUpsertOne {
	bjc.conflict = opts
	return &BuildJobUpsertOne{
		create: bjc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bjc *BuildJobCreate) OnConflictColumns(columns ...string) *BuildJobUpsertOne {
	bjc.conflict = append(bjc.conflict, sql.ConflictColumns(columns...))
	return &BuildJobUpsertOne{
		create: bjc,
	}
}

type (
	// BuildJobUpsertOne is the builder for "upsert"-ing
	//  one BuildJob node.
	BuildJobUpsertOne struct {
		create *BuildJobCreate
	}

	// BuildJobUpsert is the "OnConflict" setter.
	BuildJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildJobUpsert) SetUpdatedAt(v time.Time) *BuildJobUpsert {
	u.Set(buildjob.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateUpdatedAt() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldUpdatedAt)
	return u
}

// SetServiceID sets the "service_id" field.
func (u *BuildJobUpsert) SetServiceID(v uuid.UUID) *BuildJobUpsert {
	u.Set(buildjob.FieldServiceID, v)
	return u
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateServiceID() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldServiceID)
	return u
}

// SetStatus sets the "status" field.
func (u *BuildJobUpsert) SetStatus(v buildjob.Status) *BuildJobUpsert {
	u.Set(buildjob.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateStatus() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldStatus)
	return u
}

// SetError sets the "error" field.
func (u *BuildJobUpsert) SetError(v string) *BuildJobUpsert {
	u.Set(buildjob.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateError() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *BuildJobUpsert) ClearError() *BuildJobUpsert {
	u.SetNull(buildjob.FieldError)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *BuildJobUpsert) SetStartedAt(v time.Time) *BuildJobUpsert {
	u.Set(buildjob.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateStartedAt() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *BuildJobUpsert) ClearStartedAt() *BuildJobUpsert {
	u.SetNull(buildjob.FieldStartedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *BuildJobUpsert) SetCompletedAt(v time.Time) *BuildJobUpsert {
	u.Set(buildjob.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateCompletedAt() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *BuildJobUpsert) ClearCompletedAt() *BuildJobUpsert {
	u.SetNull(buildjob.FieldCompletedAt)
	return u
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *BuildJobUpsert) SetKubernetesJobName(v string) *BuildJobUpsert {
	u.Set(buildjob.FieldKubernetesJobName, v)
	return u
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateKubernetesJobName() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldKubernetesJobName)
	return u
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *BuildJobUpsert) ClearKubernetesJobName() *BuildJobUpsert {
	u.SetNull(buildjob.FieldKubernetesJobName)
	return u
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *BuildJobUpsert) SetKubernetesJobStatus(v string) *BuildJobUpsert {
	u.Set(buildjob.FieldKubernetesJobStatus, v)
	return u
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateKubernetesJobStatus() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldKubernetesJobStatus)
	return u
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *BuildJobUpsert) ClearKubernetesJobStatus() *BuildJobUpsert {
	u.SetNull(buildjob.FieldKubernetesJobStatus)
	return u
}

// SetAttempts sets the "attempts" field.
func (u *BuildJobUpsert) SetAttempts(v int) *BuildJobUpsert {
	u.Set(buildjob.FieldAttempts, v)
	return u
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *BuildJobUpsert) UpdateAttempts() *BuildJobUpsert {
	u.SetExcluded(buildjob.FieldAttempts)
	return u
}

// AddAttempts adds v to the "attempts" field.
func (u *BuildJobUpsert) AddAttempts(v int) *BuildJobUpsert {
	u.Add(buildjob.FieldAttempts, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(buildjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BuildJobUpsertOne) UpdateNewValues() *BuildJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(buildjob.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(buildjob.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BuildJobUpsertOne) Ignore() *BuildJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BuildJobUpsertOne) DoNothing() *BuildJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BuildJobCreate.OnConflict
// documentation for more info.
func (u *BuildJobUpsertOne) Update(set func(*BuildJobUpsert)) *BuildJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BuildJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildJobUpsertOne) SetUpdatedAt(v time.Time) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateUpdatedAt() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *BuildJobUpsertOne) SetServiceID(v uuid.UUID) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateServiceID() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateServiceID()
	})
}

// SetStatus sets the "status" field.
func (u *BuildJobUpsertOne) SetStatus(v buildjob.Status) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateStatus() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateStatus()
	})
}

// SetError sets the "error" field.
func (u *BuildJobUpsertOne) SetError(v string) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateError() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *BuildJobUpsertOne) ClearError() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearError()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *BuildJobUpsertOne) SetStartedAt(v time.Time) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateStartedAt() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *BuildJobUpsertOne) ClearStartedAt() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *BuildJobUpsertOne) SetCompletedAt(v time.Time) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateCompletedAt() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *BuildJobUpsertOne) ClearCompletedAt() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearCompletedAt()
	})
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *BuildJobUpsertOne) SetKubernetesJobName(v string) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetKubernetesJobName(v)
	})
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateKubernetesJobName() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateKubernetesJobName()
	})
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *BuildJobUpsertOne) ClearKubernetesJobName() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearKubernetesJobName()
	})
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *BuildJobUpsertOne) SetKubernetesJobStatus(v string) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetKubernetesJobStatus(v)
	})
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateKubernetesJobStatus() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateKubernetesJobStatus()
	})
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *BuildJobUpsertOne) ClearKubernetesJobStatus() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearKubernetesJobStatus()
	})
}

// SetAttempts sets the "attempts" field.
func (u *BuildJobUpsertOne) SetAttempts(v int) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *BuildJobUpsertOne) AddAttempts(v int) *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *BuildJobUpsertOne) UpdateAttempts() *BuildJobUpsertOne {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateAttempts()
	})
}

// Exec executes the query.
func (u *BuildJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BuildJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BuildJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BuildJobUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BuildJobUpsertOne.ID is not supported by MySQL driver. Use BuildJobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BuildJobUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BuildJobCreateBulk is the builder for creating many BuildJob entities in bulk.
type BuildJobCreateBulk struct {
	config
	err      error
	builders []*BuildJobCreate
	conflict []sql.ConflictOption
}

// Save creates the BuildJob entities in the database.
func (bjcb *BuildJobCreateBulk) Save(ctx context.Context) ([]*BuildJob, error) {
	if bjcb.err != nil {
		return nil, bjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bjcb.builders))
	nodes := make([]*BuildJob, len(bjcb.builders))
	mutators := make([]Mutator, len(bjcb.builders))
	for i := range bjcb.builders {
		func(i int, root context.Context) {
			builder := bjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BuildJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bjcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bjcb *BuildJobCreateBulk) SaveX(ctx context.Context) []*BuildJob {
	v, err := bjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bjcb *BuildJobCreateBulk) Exec(ctx context.Context) error {
	_, err := bjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjcb *BuildJobCreateBulk) ExecX(ctx context.Context) {
	if err := bjcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BuildJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BuildJobUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bjcb *BuildJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *BuildJobUpsertBulk {
	bjcb.conflict = opts
	return &BuildJobUpsertBulk{
		create: bjcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bjcb *BuildJobCreateBulk) OnConflictColumns(columns ...string) *BuildJobUpsertBulk {
	bjcb.conflict = append(bjcb.conflict, sql.ConflictColumns(columns...))
	return &BuildJobUpsertBulk{
		create: bjcb,
	}
}

// BuildJobUpsertBulk is the builder for "upsert"-ing
// a bulk of BuildJob nodes.
type BuildJobUpsertBulk struct {
	create *BuildJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(buildjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BuildJobUpsertBulk) UpdateNewValues() *BuildJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(buildjob.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(buildjob.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BuildJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BuildJobUpsertBulk) Ignore() *BuildJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BuildJobUpsertBulk) DoNothing() *BuildJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BuildJobCreateBulk.OnConflict
// documentation for more info.
func (u *BuildJobUpsertBulk) Update(set func(*BuildJobUpsert)) *BuildJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BuildJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BuildJobUpsertBulk) SetUpdatedAt(v time.Time) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateUpdatedAt() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *BuildJobUpsertBulk) SetServiceID(v uuid.UUID) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateServiceID() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateServiceID()
	})
}

// SetStatus sets the "status" field.
func (u *BuildJobUpsertBulk) SetStatus(v buildjob.Status) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateStatus() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateStatus()
	})
}

// SetError sets the "error" field.
func (u *BuildJobUpsertBulk) SetError(v string) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateError() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *BuildJobUpsertBulk) ClearError() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearError()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *BuildJobUpsertBulk) SetStartedAt(v time.Time) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateStartedAt() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *BuildJobUpsertBulk) ClearStartedAt() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *BuildJobUpsertBulk) SetCompletedAt(v time.Time) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateCompletedAt() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *BuildJobUpsertBulk) ClearCompletedAt() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearCompletedAt()
	})
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *BuildJobUpsertBulk) SetKubernetesJobName(v string) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetKubernetesJobName(v)
	})
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateKubernetesJobName() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateKubernetesJobName()
	})
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *BuildJobUpsertBulk) ClearKubernetesJobName() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearKubernetesJobName()
	})
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *BuildJobUpsertBulk) SetKubernetesJobStatus(v string) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetKubernetesJobStatus(v)
	})
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateKubernetesJobStatus() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateKubernetesJobStatus()
	})
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *BuildJobUpsertBulk) ClearKubernetesJobStatus() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.ClearKubernetesJobStatus()
	})
}

// SetAttempts sets the "attempts" field.
func (u *BuildJobUpsertBulk) SetAttempts(v int) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *BuildJobUpsertBulk) AddAttempts(v int) *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *BuildJobUpsertBulk) UpdateAttempts() *BuildJobUpsertBulk {
	return u.Update(func(s *BuildJobUpsert) {
		s.UpdateAttempts()
	})
}

// Exec executes the query.
func (u *BuildJobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BuildJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BuildJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BuildJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
