// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/deployment"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
)

// DeploymentCreate is the builder for creating a Deployment entity.
type DeploymentCreate struct {
	config
	mutation *DeploymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeploymentCreate) SetCreatedAt(t time.Time) *DeploymentCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableCreatedAt(t *time.Time) *DeploymentCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeploymentCreate) SetUpdatedAt(t time.Time) *DeploymentCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableUpdatedAt(t *time.Time) *DeploymentCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetServiceID sets the "service_id" field.
func (dc *DeploymentCreate) SetServiceID(u uuid.UUID) *DeploymentCreate {
	dc.mutation.SetServiceID(u)
	return dc
}

// SetStatus sets the "status" field.
func (dc *DeploymentCreate) SetStatus(ss schema.DeploymentStatus) *DeploymentCreate {
	dc.mutation.SetStatus(ss)
	return dc
}

// SetSource sets the "source" field.
func (dc *DeploymentCreate) SetSource(ss schema.DeploymentSource) *DeploymentCreate {
	dc.mutation.SetSource(ss)
	return dc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableSource(ss *schema.DeploymentSource) *DeploymentCreate {
	if ss != nil {
		dc.SetSource(*ss)
	}
	return dc
}

// SetError sets the "error" field.
func (dc *DeploymentCreate) SetError(s string) *DeploymentCreate {
	dc.mutation.SetError(s)
	return dc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableError(s *string) *DeploymentCreate {
	if s != nil {
		dc.SetError(*s)
	}
	return dc
}

// SetCommitSha sets the "commit_sha" field.
func (dc *DeploymentCreate) SetCommitSha(s string) *DeploymentCreate {
	dc.mutation.SetCommitSha(s)
	return dc
}

// SetNillableCommitSha sets the "commit_sha" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableCommitSha(s *string) *DeploymentCreate {
	if s != nil {
		dc.SetCommitSha(*s)
	}
	return dc
}

// SetCommitMessage sets the "commit_message" field.
func (dc *DeploymentCreate) SetCommitMessage(s string) *DeploymentCreate {
	dc.mutation.SetCommitMessage(s)
	return dc
}

// SetNillableCommitMessage sets the "commit_message" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableCommitMessage(s *string) *DeploymentCreate {
	if s != nil {
		dc.SetCommitMessage(*s)
	}
	return dc
}

// SetStartedAt sets the "started_at" field.
func (dc *DeploymentCreate) SetStartedAt(t time.Time) *DeploymentCreate {
	dc.mutation.SetStartedAt(t)
	return dc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableStartedAt(t *time.Time) *DeploymentCreate {
	if t != nil {
		dc.SetStartedAt(*t)
	}
	return dc
}

// SetCompletedAt sets the "completed_at" field.
func (dc *DeploymentCreate) SetCompletedAt(t time.Time) *DeploymentCreate {
	dc.mutation.SetCompletedAt(t)
	return dc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableCompletedAt(t *time.Time) *DeploymentCreate {
	if t != nil {
		dc.SetCompletedAt(*t)
	}
	return dc
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (dc *DeploymentCreate) SetKubernetesJobName(s string) *DeploymentCreate {
	dc.mutation.SetKubernetesJobName(s)
	return dc
}

// SetNillableKubernetesJobName sets the "kubernetes_job_name" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableKubernetesJobName(s *string) *DeploymentCreate {
	if s != nil {
		dc.SetKubernetesJobName(*s)
	}
	return dc
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (dc *DeploymentCreate) SetKubernetesJobStatus(s string) *DeploymentCreate {
	dc.mutation.SetKubernetesJobStatus(s)
	return dc
}

// SetNillableKubernetesJobStatus sets the "kubernetes_job_status" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableKubernetesJobStatus(s *string) *DeploymentCreate {
	if s != nil {
		dc.SetKubernetesJobStatus(*s)
	}
	return dc
}

// SetAttempts sets the "attempts" field.
func (dc *DeploymentCreate) SetAttempts(i int) *DeploymentCreate {
	dc.mutation.SetAttempts(i)
	return dc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableAttempts(i *int) *DeploymentCreate {
	if i != nil {
		dc.SetAttempts(*i)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeploymentCreate) SetID(u uuid.UUID) *DeploymentCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DeploymentCreate) SetNillableID(u *uuid.UUID) *DeploymentCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetService sets the "service" edge to the Service entity.
func (dc *DeploymentCreate) SetService(s *Service) *DeploymentCreate {
	return dc.SetServiceID(s.ID)
}

// Mutation returns the DeploymentMutation object of the builder.
func (dc *DeploymentCreate) Mutation() *DeploymentMutation {
	return dc.mutation
}

// Save creates the Deployment in the database.
func (dc *DeploymentCreate) Save(ctx context.Context) (*Deployment, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeploymentCreate) SaveX(ctx context.Context) *Deployment {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeploymentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeploymentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeploymentCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := deployment.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := deployment.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Source(); !ok {
		v := deployment.DefaultSource
		dc.mutation.SetSource(v)
	}
	if _, ok := dc.mutation.Attempts(); !ok {
		v := deployment.DefaultAttempts
		dc.mutation.SetAttempts(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := deployment.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeploymentCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deployment.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Deployment.updated_at"`)}
	}
	if _, ok := dc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`ent: missing required field "Deployment.service_id"`)}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Deployment.status"`)}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := deployment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Deployment.status": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Deployment.source"`)}
	}
	if v, ok := dc.mutation.Source(); ok {
		if err := deployment.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "Deployment.source": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "Deployment.attempts"`)}
	}
	if len(dc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "Deployment.service"`)}
	}
	return nil
}

func (dc *DeploymentCreate) sqlSave(ctx context.Context) (*Deployment, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeploymentCreate) createSpec() (*Deployment, *sqlgraph.CreateSpec) {
	var (
		_node = &Deployment{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deployment.Table, sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(deployment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(deployment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(deployment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.Source(); ok {
		_spec.SetField(deployment.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := dc.mutation.Error(); ok {
		_spec.SetField(deployment.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := dc.mutation.CommitSha(); ok {
		_spec.SetField(deployment.FieldCommitSha, field.TypeString, value)
		_node.CommitSha = value
	}
	if value, ok := dc.mutation.CommitMessage(); ok {
		_spec.SetField(deployment.FieldCommitMessage, field.TypeString, value)
		_node.CommitMessage = value
	}
	if value, ok := dc.mutation.StartedAt(); ok {
		_spec.SetField(deployment.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := dc.mutation.CompletedAt(); ok {
		_spec.SetField(deployment.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := dc.mutation.KubernetesJobName(); ok {
		_spec.SetField(deployment.FieldKubernetesJobName, field.TypeString, value)
		_node.KubernetesJobName = value
	}
	if value, ok := dc.mutation.KubernetesJobStatus(); ok {
		_spec.SetField(deployment.FieldKubernetesJobStatus, field.TypeString, value)
		_node.KubernetesJobStatus = value
	}
	if value, ok := dc.mutation.Attempts(); ok {
		_spec.SetField(deployment.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if nodes := dc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deployment.ServiceTable,
			Columns: []string{deployment.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deployment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeploymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dc *DeploymentCreate) OnConflict(opts ...sql.ConflictOption) *DeploymentUpsertOne {
	dc.conflict = opts
	return &DeploymentUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deployment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DeploymentCreate) OnConflictColumns(columns ...string) *DeploymentUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DeploymentUpsertOne{
		create: dc,
	}
}

type (
	// DeploymentUpsertOne is the builder for "upsert"-ing
	//  one Deployment node.
	DeploymentUpsertOne struct {
		create *DeploymentCreate
	}

	// DeploymentUpsert is the "OnConflict" setter.
	DeploymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DeploymentUpsert) SetUpdatedAt(v time.Time) *DeploymentUpsert {
	u.Set(deployment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateUpdatedAt() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldUpdatedAt)
	return u
}

// SetServiceID sets the "service_id" field.
func (u *DeploymentUpsert) SetServiceID(v uuid.UUID) *DeploymentUpsert {
	u.Set(deployment.FieldServiceID, v)
	return u
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateServiceID() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldServiceID)
	return u
}

// SetStatus sets the "status" field.
func (u *DeploymentUpsert) SetStatus(v schema.DeploymentStatus) *DeploymentUpsert {
	u.Set(deployment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateStatus() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldStatus)
	return u
}

// SetSource sets the "source" field.
func (u *DeploymentUpsert) SetSource(v schema.DeploymentSource) *DeploymentUpsert {
	u.Set(deployment.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateSource() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldSource)
	return u
}

// SetError sets the "error" field.
func (u *DeploymentUpsert) SetError(v string) *DeploymentUpsert {
	u.Set(deployment.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateError() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *DeploymentUpsert) ClearError() *DeploymentUpsert {
	u.SetNull(deployment.FieldError)
	return u
}

// SetCommitSha sets the "commit_sha" field.
func (u *DeploymentUpsert) SetCommitSha(v string) *DeploymentUpsert {
	u.Set(deployment.FieldCommitSha, v)
	return u
}

// UpdateCommitSha sets the "commit_sha" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateCommitSha() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldCommitSha)
	return u
}

// ClearCommitSha clears the value of the "commit_sha" field.
func (u *DeploymentUpsert) ClearCommitSha() *DeploymentUpsert {
	u.SetNull(deployment.FieldCommitSha)
	return u
}

// SetCommitMessage sets the "commit_message" field.
func (u *DeploymentUpsert) SetCommitMessage(v string) *DeploymentUpsert {
	u.Set(deployment.FieldCommitMessage, v)
	return u
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateCommitMessage() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldCommitMessage)
	return u
}

// ClearCommitMessage clears the value of the "commit_message" field.
func (u *DeploymentUpsert) ClearCommitMessage() *DeploymentUpsert {
	u.SetNull(deployment.FieldCommitMessage)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *DeploymentUpsert) SetStartedAt(v time.Time) *DeploymentUpsert {
	u.Set(deployment.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateStartedAt() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *DeploymentUpsert) ClearStartedAt() *DeploymentUpsert {
	u.SetNull(deployment.FieldStartedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *DeploymentUpsert) SetCompletedAt(v time.Time) *DeploymentUpsert {
	u.Set(deployment.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateCompletedAt() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *DeploymentUpsert) ClearCompletedAt() *DeploymentUpsert {
	u.SetNull(deployment.FieldCompletedAt)
	return u
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *DeploymentUpsert) SetKubernetesJobName(v string) *DeploymentUpsert {
	u.Set(deployment.FieldKubernetesJobName, v)
	return u
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateKubernetesJobName() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldKubernetesJobName)
	return u
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *DeploymentUpsert) ClearKubernetesJobName() *DeploymentUpsert {
	u.SetNull(deployment.FieldKubernetesJobName)
	return u
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *DeploymentUpsert) SetKubernetesJobStatus(v string) *DeploymentUpsert {
	u.Set(deployment.FieldKubernetesJobStatus, v)
	return u
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateKubernetesJobStatus() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldKubernetesJobStatus)
	return u
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *DeploymentUpsert) ClearKubernetesJobStatus() *DeploymentUpsert {
	u.SetNull(deployment.FieldKubernetesJobStatus)
	return u
}

// SetAttempts sets the "attempts" field.
func (u *DeploymentUpsert) SetAttempts(v int) *DeploymentUpsert {
	u.Set(deployment.FieldAttempts, v)
	return u
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *DeploymentUpsert) UpdateAttempts() *DeploymentUpsert {
	u.SetExcluded(deployment.FieldAttempts)
	return u
}

// AddAttempts adds v to the "attempts" field.
func (u *DeploymentUpsert) AddAttempts(v int) *DeploymentUpsert {
	u.Add(deployment.FieldAttempts, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Deployment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deployment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeploymentUpsertOne) UpdateNewValues() *DeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deployment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(deployment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deployment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeploymentUpsertOne) Ignore() *DeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeploymentUpsertOne) DoNothing() *DeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeploymentCreate.OnConflict
// documentation for more info.
func (u *DeploymentUpsertOne) Update(set func(*DeploymentUpsert)) *DeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeploymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeploymentUpsertOne) SetUpdatedAt(v time.Time) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateUpdatedAt() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *DeploymentUpsertOne) SetServiceID(v uuid.UUID) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateServiceID() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateServiceID()
	})
}

// SetStatus sets the "status" field.
func (u *DeploymentUpsertOne) SetStatus(v schema.DeploymentStatus) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateStatus() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *DeploymentUpsertOne) SetSource(v schema.DeploymentSource) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateSource() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateSource()
	})
}

// SetError sets the "error" field.
func (u *DeploymentUpsertOne) SetError(v string) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateError() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *DeploymentUpsertOne) ClearError() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearError()
	})
}

// SetCommitSha sets the "commit_sha" field.
func (u *DeploymentUpsertOne) SetCommitSha(v string) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCommitSha(v)
	})
}

// UpdateCommitSha sets the "commit_sha" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateCommitSha() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCommitSha()
	})
}

// ClearCommitSha clears the value of the "commit_sha" field.
func (u *DeploymentUpsertOne) ClearCommitSha() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCommitSha()
	})
}

// SetCommitMessage sets the "commit_message" field.
func (u *DeploymentUpsertOne) SetCommitMessage(v string) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCommitMessage(v)
	})
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateCommitMessage() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCommitMessage()
	})
}

// ClearCommitMessage clears the value of the "commit_message" field.
func (u *DeploymentUpsertOne) ClearCommitMessage() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCommitMessage()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *DeploymentUpsertOne) SetStartedAt(v time.Time) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateStartedAt() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *DeploymentUpsertOne) ClearStartedAt() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *DeploymentUpsertOne) SetCompletedAt(v time.Time) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateCompletedAt() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *DeploymentUpsertOne) ClearCompletedAt() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCompletedAt()
	})
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *DeploymentUpsertOne) SetKubernetesJobName(v string) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetKubernetesJobName(v)
	})
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateKubernetesJobName() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateKubernetesJobName()
	})
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *DeploymentUpsertOne) ClearKubernetesJobName() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearKubernetesJobName()
	})
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *DeploymentUpsertOne) SetKubernetesJobStatus(v string) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetKubernetesJobStatus(v)
	})
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateKubernetesJobStatus() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateKubernetesJobStatus()
	})
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *DeploymentUpsertOne) ClearKubernetesJobStatus() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearKubernetesJobStatus()
	})
}

// SetAttempts sets the "attempts" field.
func (u *DeploymentUpsertOne) SetAttempts(v int) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *DeploymentUpsertOne) AddAttempts(v int) *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *DeploymentUpsertOne) UpdateAttempts() *DeploymentUpsertOne {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateAttempts()
	})
}

// Exec executes the query.
func (u *DeploymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeploymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeploymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeploymentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeploymentUpsertOne.ID is not supported by MySQL driver. Use DeploymentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeploymentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeploymentCreateBulk is the builder for creating many Deployment entities in bulk.
type DeploymentCreateBulk struct {
	config
	err      error
	builders []*DeploymentCreate
	conflict []sql.ConflictOption
}

// Save creates the Deployment entities in the database.
func (dcb *DeploymentCreateBulk) Save(ctx context.Context) ([]*Deployment, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deployment, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeploymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeploymentCreateBulk) SaveX(ctx context.Context) []*Deployment {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeploymentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeploymentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deployment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeploymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcb *DeploymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeploymentUpsertBulk {
	dcb.conflict = opts
	return &DeploymentUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deployment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DeploymentCreateBulk) OnConflictColumns(columns ...string) *DeploymentUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DeploymentUpsertBulk{
		create: dcb,
	}
}

// DeploymentUpsertBulk is the builder for "upsert"-ing
// a bulk of Deployment nodes.
type DeploymentUpsertBulk struct {
	create *DeploymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Deployment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deployment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeploymentUpsertBulk) UpdateNewValues() *DeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deployment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(deployment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deployment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeploymentUpsertBulk) Ignore() *DeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeploymentUpsertBulk) DoNothing() *DeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeploymentCreateBulk.OnConflict
// documentation for more info.
func (u *DeploymentUpsertBulk) Update(set func(*DeploymentUpsert)) *DeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeploymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeploymentUpsertBulk) SetUpdatedAt(v time.Time) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateUpdatedAt() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *DeploymentUpsertBulk) SetServiceID(v uuid.UUID) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateServiceID() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateServiceID()
	})
}

// SetStatus sets the "status" field.
func (u *DeploymentUpsertBulk) SetStatus(v schema.DeploymentStatus) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateStatus() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateStatus()
	})
}

// SetSource sets the "source" field.
func (u *DeploymentUpsertBulk) SetSource(v schema.DeploymentSource) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateSource() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateSource()
	})
}

// SetError sets the "error" field.
func (u *DeploymentUpsertBulk) SetError(v string) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateError() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *DeploymentUpsertBulk) ClearError() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearError()
	})
}

// SetCommitSha sets the "commit_sha" field.
func (u *DeploymentUpsertBulk) SetCommitSha(v string) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCommitSha(v)
	})
}

// UpdateCommitSha sets the "commit_sha" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateCommitSha() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCommitSha()
	})
}

// ClearCommitSha clears the value of the "commit_sha" field.
func (u *DeploymentUpsertBulk) ClearCommitSha() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCommitSha()
	})
}

// SetCommitMessage sets the "commit_message" field.
func (u *DeploymentUpsertBulk) SetCommitMessage(v string) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCommitMessage(v)
	})
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateCommitMessage() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCommitMessage()
	})
}

// ClearCommitMessage clears the value of the "commit_message" field.
func (u *DeploymentUpsertBulk) ClearCommitMessage() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCommitMessage()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *DeploymentUpsertBulk) SetStartedAt(v time.Time) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateStartedAt() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *DeploymentUpsertBulk) ClearStartedAt() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *DeploymentUpsertBulk) SetCompletedAt(v time.Time) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateCompletedAt() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *DeploymentUpsertBulk) ClearCompletedAt() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearCompletedAt()
	})
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (u *DeploymentUpsertBulk) SetKubernetesJobName(v string) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetKubernetesJobName(v)
	})
}

// UpdateKubernetesJobName sets the "kubernetes_job_name" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateKubernetesJobName() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateKubernetesJobName()
	})
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (u *DeploymentUpsertBulk) ClearKubernetesJobName() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearKubernetesJobName()
	})
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (u *DeploymentUpsertBulk) SetKubernetesJobStatus(v string) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetKubernetesJobStatus(v)
	})
}

// UpdateKubernetesJobStatus sets the "kubernetes_job_status" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateKubernetesJobStatus() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateKubernetesJobStatus()
	})
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (u *DeploymentUpsertBulk) ClearKubernetesJobStatus() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.ClearKubernetesJobStatus()
	})
}

// SetAttempts sets the "attempts" field.
func (u *DeploymentUpsertBulk) SetAttempts(v int) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *DeploymentUpsertBulk) AddAttempts(v int) *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *DeploymentUpsertBulk) UpdateAttempts() *DeploymentUpsertBulk {
	return u.Update(func(s *DeploymentUpsert) {
		s.UpdateAttempts()
	})
}

// Exec executes the query.
func (u *DeploymentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeploymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeploymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeploymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
