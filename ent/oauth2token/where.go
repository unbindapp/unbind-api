// Code generated by ent, DO NOT EDIT.

package oauth2token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldRefreshToken, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldClientID, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldExpiresAt, v))
}

// Revoked applies equality check predicate on the "revoked" field. It's identical to RevokedEQ.
func Revoked(v bool) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldRevoked, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldScope, v))
}

// DeviceInfo applies equality check predicate on the "device_info" field. It's identical to DeviceInfoEQ.
func DeviceInfo(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldDeviceInfo, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldUpdatedAt, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContainsFold(FieldClientID, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldExpiresAt, v))
}

// RevokedEQ applies the EQ predicate on the "revoked" field.
func RevokedEQ(v bool) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldRevoked, v))
}

// RevokedNEQ applies the NEQ predicate on the "revoked" field.
func RevokedNEQ(v bool) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldRevoked, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContainsFold(FieldScope, v))
}

// DeviceInfoEQ applies the EQ predicate on the "device_info" field.
func DeviceInfoEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEQ(FieldDeviceInfo, v))
}

// DeviceInfoNEQ applies the NEQ predicate on the "device_info" field.
func DeviceInfoNEQ(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNEQ(FieldDeviceInfo, v))
}

// DeviceInfoIn applies the In predicate on the "device_info" field.
func DeviceInfoIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIn(FieldDeviceInfo, vs...))
}

// DeviceInfoNotIn applies the NotIn predicate on the "device_info" field.
func DeviceInfoNotIn(vs ...string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotIn(FieldDeviceInfo, vs...))
}

// DeviceInfoGT applies the GT predicate on the "device_info" field.
func DeviceInfoGT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGT(FieldDeviceInfo, v))
}

// DeviceInfoGTE applies the GTE predicate on the "device_info" field.
func DeviceInfoGTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldGTE(FieldDeviceInfo, v))
}

// DeviceInfoLT applies the LT predicate on the "device_info" field.
func DeviceInfoLT(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLT(FieldDeviceInfo, v))
}

// DeviceInfoLTE applies the LTE predicate on the "device_info" field.
func DeviceInfoLTE(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldLTE(FieldDeviceInfo, v))
}

// DeviceInfoContains applies the Contains predicate on the "device_info" field.
func DeviceInfoContains(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContains(FieldDeviceInfo, v))
}

// DeviceInfoHasPrefix applies the HasPrefix predicate on the "device_info" field.
func DeviceInfoHasPrefix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasPrefix(FieldDeviceInfo, v))
}

// DeviceInfoHasSuffix applies the HasSuffix predicate on the "device_info" field.
func DeviceInfoHasSuffix(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldHasSuffix(FieldDeviceInfo, v))
}

// DeviceInfoIsNil applies the IsNil predicate on the "device_info" field.
func DeviceInfoIsNil() predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldIsNull(FieldDeviceInfo))
}

// DeviceInfoNotNil applies the NotNil predicate on the "device_info" field.
func DeviceInfoNotNil() predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldNotNull(FieldDeviceInfo))
}

// DeviceInfoEqualFold applies the EqualFold predicate on the "device_info" field.
func DeviceInfoEqualFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldEqualFold(FieldDeviceInfo, v))
}

// DeviceInfoContainsFold applies the ContainsFold predicate on the "device_info" field.
func DeviceInfoContainsFold(v string) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.FieldContainsFold(FieldDeviceInfo, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Oauth2Token {
	return predicate.Oauth2Token(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Token) predicate.Oauth2Token {
	return predicate.Oauth2Token(sql.NotPredicates(p))
}
