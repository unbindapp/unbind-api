// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildjob"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/service"
)

// BuildJobQuery is the builder for querying BuildJob entities.
type BuildJobQuery struct {
	config
	ctx         *QueryContext
	order       []buildjob.OrderOption
	inters      []Interceptor
	predicates  []predicate.BuildJob
	withService *ServiceQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BuildJobQuery builder.
func (bjq *BuildJobQuery) Where(ps ...predicate.BuildJob) *BuildJobQuery {
	bjq.predicates = append(bjq.predicates, ps...)
	return bjq
}

// Limit the number of records to be returned by this query.
func (bjq *BuildJobQuery) Limit(limit int) *BuildJobQuery {
	bjq.ctx.Limit = &limit
	return bjq
}

// Offset to start from.
func (bjq *BuildJobQuery) Offset(offset int) *BuildJobQuery {
	bjq.ctx.Offset = &offset
	return bjq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bjq *BuildJobQuery) Unique(unique bool) *BuildJobQuery {
	bjq.ctx.Unique = &unique
	return bjq
}

// Order specifies how the records should be ordered.
func (bjq *BuildJobQuery) Order(o ...buildjob.OrderOption) *BuildJobQuery {
	bjq.order = append(bjq.order, o...)
	return bjq
}

// QueryService chains the current query on the "service" edge.
func (bjq *BuildJobQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: bjq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(buildjob.Table, buildjob.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, buildjob.ServiceTable, buildjob.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(bjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BuildJob entity from the query.
// Returns a *NotFoundError when no BuildJob was found.
func (bjq *BuildJobQuery) First(ctx context.Context) (*BuildJob, error) {
	nodes, err := bjq.Limit(1).All(setContextOp(ctx, bjq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{buildjob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bjq *BuildJobQuery) FirstX(ctx context.Context) *BuildJob {
	node, err := bjq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BuildJob ID from the query.
// Returns a *NotFoundError when no BuildJob ID was found.
func (bjq *BuildJobQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bjq.Limit(1).IDs(setContextOp(ctx, bjq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{buildjob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bjq *BuildJobQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bjq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BuildJob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BuildJob entity is found.
// Returns a *NotFoundError when no BuildJob entities are found.
func (bjq *BuildJobQuery) Only(ctx context.Context) (*BuildJob, error) {
	nodes, err := bjq.Limit(2).All(setContextOp(ctx, bjq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{buildjob.Label}
	default:
		return nil, &NotSingularError{buildjob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bjq *BuildJobQuery) OnlyX(ctx context.Context) *BuildJob {
	node, err := bjq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BuildJob ID in the query.
// Returns a *NotSingularError when more than one BuildJob ID is found.
// Returns a *NotFoundError when no entities are found.
func (bjq *BuildJobQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bjq.Limit(2).IDs(setContextOp(ctx, bjq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{buildjob.Label}
	default:
		err = &NotSingularError{buildjob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bjq *BuildJobQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bjq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BuildJobs.
func (bjq *BuildJobQuery) All(ctx context.Context) ([]*BuildJob, error) {
	ctx = setContextOp(ctx, bjq.ctx, ent.OpQueryAll)
	if err := bjq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BuildJob, *BuildJobQuery]()
	return withInterceptors[[]*BuildJob](ctx, bjq, qr, bjq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bjq *BuildJobQuery) AllX(ctx context.Context) []*BuildJob {
	nodes, err := bjq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BuildJob IDs.
func (bjq *BuildJobQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if bjq.ctx.Unique == nil && bjq.path != nil {
		bjq.Unique(true)
	}
	ctx = setContextOp(ctx, bjq.ctx, ent.OpQueryIDs)
	if err = bjq.Select(buildjob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bjq *BuildJobQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bjq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bjq *BuildJobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bjq.ctx, ent.OpQueryCount)
	if err := bjq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bjq, querierCount[*BuildJobQuery](), bjq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bjq *BuildJobQuery) CountX(ctx context.Context) int {
	count, err := bjq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bjq *BuildJobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bjq.ctx, ent.OpQueryExist)
	switch _, err := bjq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bjq *BuildJobQuery) ExistX(ctx context.Context) bool {
	exist, err := bjq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BuildJobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bjq *BuildJobQuery) Clone() *BuildJobQuery {
	if bjq == nil {
		return nil
	}
	return &BuildJobQuery{
		config:      bjq.config,
		ctx:         bjq.ctx.Clone(),
		order:       append([]buildjob.OrderOption{}, bjq.order...),
		inters:      append([]Interceptor{}, bjq.inters...),
		predicates:  append([]predicate.BuildJob{}, bjq.predicates...),
		withService: bjq.withService.Clone(),
		// clone intermediate query.
		sql:       bjq.sql.Clone(),
		path:      bjq.path,
		modifiers: append([]func(*sql.Selector){}, bjq.modifiers...),
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (bjq *BuildJobQuery) WithService(opts ...func(*ServiceQuery)) *BuildJobQuery {
	query := (&ServiceClient{config: bjq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bjq.withService = query
	return bjq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BuildJob.Query().
//		GroupBy(buildjob.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bjq *BuildJobQuery) GroupBy(field string, fields ...string) *BuildJobGroupBy {
	bjq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BuildJobGroupBy{build: bjq}
	grbuild.flds = &bjq.ctx.Fields
	grbuild.label = buildjob.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BuildJob.Query().
//		Select(buildjob.FieldCreatedAt).
//		Scan(ctx, &v)
func (bjq *BuildJobQuery) Select(fields ...string) *BuildJobSelect {
	bjq.ctx.Fields = append(bjq.ctx.Fields, fields...)
	sbuild := &BuildJobSelect{BuildJobQuery: bjq}
	sbuild.label = buildjob.Label
	sbuild.flds, sbuild.scan = &bjq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BuildJobSelect configured with the given aggregations.
func (bjq *BuildJobQuery) Aggregate(fns ...AggregateFunc) *BuildJobSelect {
	return bjq.Select().Aggregate(fns...)
}

func (bjq *BuildJobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bjq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bjq); err != nil {
				return err
			}
		}
	}
	for _, f := range bjq.ctx.Fields {
		if !buildjob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bjq.path != nil {
		prev, err := bjq.path(ctx)
		if err != nil {
			return err
		}
		bjq.sql = prev
	}
	return nil
}

func (bjq *BuildJobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BuildJob, error) {
	var (
		nodes       = []*BuildJob{}
		_spec       = bjq.querySpec()
		loadedTypes = [1]bool{
			bjq.withService != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BuildJob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BuildJob{config: bjq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bjq.modifiers) > 0 {
		_spec.Modifiers = bjq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bjq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bjq.withService; query != nil {
		if err := bjq.loadService(ctx, query, nodes, nil,
			func(n *BuildJob, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bjq *BuildJobQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*BuildJob, init func(*BuildJob), assign func(*BuildJob, *Service)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BuildJob)
	for i := range nodes {
		fk := nodes[i].ServiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bjq *BuildJobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bjq.querySpec()
	if len(bjq.modifiers) > 0 {
		_spec.Modifiers = bjq.modifiers
	}
	_spec.Node.Columns = bjq.ctx.Fields
	if len(bjq.ctx.Fields) > 0 {
		_spec.Unique = bjq.ctx.Unique != nil && *bjq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bjq.driver, _spec)
}

func (bjq *BuildJobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(buildjob.Table, buildjob.Columns, sqlgraph.NewFieldSpec(buildjob.FieldID, field.TypeUUID))
	_spec.From = bjq.sql
	if unique := bjq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bjq.path != nil {
		_spec.Unique = true
	}
	if fields := bjq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildjob.FieldID)
		for i := range fields {
			if fields[i] != buildjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bjq.withService != nil {
			_spec.Node.AddColumnOnce(buildjob.FieldServiceID)
		}
	}
	if ps := bjq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bjq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bjq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bjq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bjq *BuildJobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bjq.driver.Dialect())
	t1 := builder.Table(buildjob.Table)
	columns := bjq.ctx.Fields
	if len(columns) == 0 {
		columns = buildjob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bjq.sql != nil {
		selector = bjq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bjq.ctx.Unique != nil && *bjq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bjq.modifiers {
		m(selector)
	}
	for _, p := range bjq.predicates {
		p(selector)
	}
	for _, p := range bjq.order {
		p(selector)
	}
	if offset := bjq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bjq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bjq *BuildJobQuery) Modify(modifiers ...func(s *sql.Selector)) *BuildJobSelect {
	bjq.modifiers = append(bjq.modifiers, modifiers...)
	return bjq.Select()
}

// BuildJobGroupBy is the group-by builder for BuildJob entities.
type BuildJobGroupBy struct {
	selector
	build *BuildJobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bjgb *BuildJobGroupBy) Aggregate(fns ...AggregateFunc) *BuildJobGroupBy {
	bjgb.fns = append(bjgb.fns, fns...)
	return bjgb
}

// Scan applies the selector query and scans the result into the given value.
func (bjgb *BuildJobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bjgb.build.ctx, ent.OpQueryGroupBy)
	if err := bjgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildJobQuery, *BuildJobGroupBy](ctx, bjgb.build, bjgb, bjgb.build.inters, v)
}

func (bjgb *BuildJobGroupBy) sqlScan(ctx context.Context, root *BuildJobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bjgb.fns))
	for _, fn := range bjgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bjgb.flds)+len(bjgb.fns))
		for _, f := range *bjgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bjgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bjgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BuildJobSelect is the builder for selecting fields of BuildJob entities.
type BuildJobSelect struct {
	*BuildJobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bjs *BuildJobSelect) Aggregate(fns ...AggregateFunc) *BuildJobSelect {
	bjs.fns = append(bjs.fns, fns...)
	return bjs
}

// Scan applies the selector query and scans the result into the given value.
func (bjs *BuildJobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bjs.ctx, ent.OpQuerySelect)
	if err := bjs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildJobQuery, *BuildJobSelect](ctx, bjs.BuildJobQuery, bjs, bjs.inters, v)
}

func (bjs *BuildJobSelect) sqlScan(ctx context.Context, root *BuildJobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bjs.fns))
	for _, fn := range bjs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bjs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bjs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bjs *BuildJobSelect) Modify(modifiers ...func(s *sql.Selector)) *BuildJobSelect {
	bjs.modifiers = append(bjs.modifiers, modifiers...)
	return bjs
}
