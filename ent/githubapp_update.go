// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// GithubAppUpdate is the builder for updating GithubApp entities.
type GithubAppUpdate struct {
	config
	hooks     []Hook
	mutation  *GithubAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GithubAppUpdate builder.
func (gau *GithubAppUpdate) Where(ps ...predicate.GithubApp) *GithubAppUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GithubAppUpdate) SetUpdatedAt(t time.Time) *GithubAppUpdate {
	gau.mutation.SetUpdatedAt(t)
	return gau
}

// SetName sets the "name" field.
func (gau *GithubAppUpdate) SetName(s string) *GithubAppUpdate {
	gau.mutation.SetName(s)
	return gau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gau *GithubAppUpdate) SetNillableName(s *string) *GithubAppUpdate {
	if s != nil {
		gau.SetName(*s)
	}
	return gau
}

// SetClientID sets the "client_id" field.
func (gau *GithubAppUpdate) SetClientID(s string) *GithubAppUpdate {
	gau.mutation.SetClientID(s)
	return gau
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (gau *GithubAppUpdate) SetNillableClientID(s *string) *GithubAppUpdate {
	if s != nil {
		gau.SetClientID(*s)
	}
	return gau
}

// SetClientSecret sets the "client_secret" field.
func (gau *GithubAppUpdate) SetClientSecret(s string) *GithubAppUpdate {
	gau.mutation.SetClientSecret(s)
	return gau
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (gau *GithubAppUpdate) SetNillableClientSecret(s *string) *GithubAppUpdate {
	if s != nil {
		gau.SetClientSecret(*s)
	}
	return gau
}

// SetWebhookSecret sets the "webhook_secret" field.
func (gau *GithubAppUpdate) SetWebhookSecret(s string) *GithubAppUpdate {
	gau.mutation.SetWebhookSecret(s)
	return gau
}

// SetNillableWebhookSecret sets the "webhook_secret" field if the given value is not nil.
func (gau *GithubAppUpdate) SetNillableWebhookSecret(s *string) *GithubAppUpdate {
	if s != nil {
		gau.SetWebhookSecret(*s)
	}
	return gau
}

// SetPrivateKey sets the "private_key" field.
func (gau *GithubAppUpdate) SetPrivateKey(s string) *GithubAppUpdate {
	gau.mutation.SetPrivateKey(s)
	return gau
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (gau *GithubAppUpdate) SetNillablePrivateKey(s *string) *GithubAppUpdate {
	if s != nil {
		gau.SetPrivateKey(*s)
	}
	return gau
}

// AddInstallationIDs adds the "installations" edge to the GithubInstallation entity by IDs.
func (gau *GithubAppUpdate) AddInstallationIDs(ids ...int64) *GithubAppUpdate {
	gau.mutation.AddInstallationIDs(ids...)
	return gau
}

// AddInstallations adds the "installations" edges to the GithubInstallation entity.
func (gau *GithubAppUpdate) AddInstallations(g ...*GithubInstallation) *GithubAppUpdate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gau.AddInstallationIDs(ids...)
}

// Mutation returns the GithubAppMutation object of the builder.
func (gau *GithubAppUpdate) Mutation() *GithubAppMutation {
	return gau.mutation
}

// ClearInstallations clears all "installations" edges to the GithubInstallation entity.
func (gau *GithubAppUpdate) ClearInstallations() *GithubAppUpdate {
	gau.mutation.ClearInstallations()
	return gau
}

// RemoveInstallationIDs removes the "installations" edge to GithubInstallation entities by IDs.
func (gau *GithubAppUpdate) RemoveInstallationIDs(ids ...int64) *GithubAppUpdate {
	gau.mutation.RemoveInstallationIDs(ids...)
	return gau
}

// RemoveInstallations removes "installations" edges to GithubInstallation entities.
func (gau *GithubAppUpdate) RemoveInstallations(g ...*GithubInstallation) *GithubAppUpdate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gau.RemoveInstallationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GithubAppUpdate) Save(ctx context.Context) (int, error) {
	gau.defaults()
	return withHooks(ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GithubAppUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GithubAppUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GithubAppUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GithubAppUpdate) defaults() {
	if _, ok := gau.mutation.UpdatedAt(); !ok {
		v := githubapp.UpdateDefaultUpdatedAt()
		gau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gau *GithubAppUpdate) check() error {
	if v, ok := gau.mutation.Name(); ok {
		if err := githubapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GithubApp.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gau *GithubAppUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GithubAppUpdate {
	gau.modifiers = append(gau.modifiers, modifiers...)
	return gau
}

func (gau *GithubAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(githubapp.Table, githubapp.Columns, sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.SetField(githubapp.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gau.mutation.Name(); ok {
		_spec.SetField(githubapp.FieldName, field.TypeString, value)
	}
	if value, ok := gau.mutation.ClientID(); ok {
		_spec.SetField(githubapp.FieldClientID, field.TypeString, value)
	}
	if value, ok := gau.mutation.ClientSecret(); ok {
		_spec.SetField(githubapp.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := gau.mutation.WebhookSecret(); ok {
		_spec.SetField(githubapp.FieldWebhookSecret, field.TypeString, value)
	}
	if value, ok := gau.mutation.PrivateKey(); ok {
		_spec.SetField(githubapp.FieldPrivateKey, field.TypeString, value)
	}
	if gau.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !gau.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GithubAppUpdateOne is the builder for updating a single GithubApp entity.
type GithubAppUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GithubAppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GithubAppUpdateOne) SetUpdatedAt(t time.Time) *GithubAppUpdateOne {
	gauo.mutation.SetUpdatedAt(t)
	return gauo
}

// SetName sets the "name" field.
func (gauo *GithubAppUpdateOne) SetName(s string) *GithubAppUpdateOne {
	gauo.mutation.SetName(s)
	return gauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gauo *GithubAppUpdateOne) SetNillableName(s *string) *GithubAppUpdateOne {
	if s != nil {
		gauo.SetName(*s)
	}
	return gauo
}

// SetClientID sets the "client_id" field.
func (gauo *GithubAppUpdateOne) SetClientID(s string) *GithubAppUpdateOne {
	gauo.mutation.SetClientID(s)
	return gauo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (gauo *GithubAppUpdateOne) SetNillableClientID(s *string) *GithubAppUpdateOne {
	if s != nil {
		gauo.SetClientID(*s)
	}
	return gauo
}

// SetClientSecret sets the "client_secret" field.
func (gauo *GithubAppUpdateOne) SetClientSecret(s string) *GithubAppUpdateOne {
	gauo.mutation.SetClientSecret(s)
	return gauo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (gauo *GithubAppUpdateOne) SetNillableClientSecret(s *string) *GithubAppUpdateOne {
	if s != nil {
		gauo.SetClientSecret(*s)
	}
	return gauo
}

// SetWebhookSecret sets the "webhook_secret" field.
func (gauo *GithubAppUpdateOne) SetWebhookSecret(s string) *GithubAppUpdateOne {
	gauo.mutation.SetWebhookSecret(s)
	return gauo
}

// SetNillableWebhookSecret sets the "webhook_secret" field if the given value is not nil.
func (gauo *GithubAppUpdateOne) SetNillableWebhookSecret(s *string) *GithubAppUpdateOne {
	if s != nil {
		gauo.SetWebhookSecret(*s)
	}
	return gauo
}

// SetPrivateKey sets the "private_key" field.
func (gauo *GithubAppUpdateOne) SetPrivateKey(s string) *GithubAppUpdateOne {
	gauo.mutation.SetPrivateKey(s)
	return gauo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (gauo *GithubAppUpdateOne) SetNillablePrivateKey(s *string) *GithubAppUpdateOne {
	if s != nil {
		gauo.SetPrivateKey(*s)
	}
	return gauo
}

// AddInstallationIDs adds the "installations" edge to the GithubInstallation entity by IDs.
func (gauo *GithubAppUpdateOne) AddInstallationIDs(ids ...int64) *GithubAppUpdateOne {
	gauo.mutation.AddInstallationIDs(ids...)
	return gauo
}

// AddInstallations adds the "installations" edges to the GithubInstallation entity.
func (gauo *GithubAppUpdateOne) AddInstallations(g ...*GithubInstallation) *GithubAppUpdateOne {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gauo.AddInstallationIDs(ids...)
}

// Mutation returns the GithubAppMutation object of the builder.
func (gauo *GithubAppUpdateOne) Mutation() *GithubAppMutation {
	return gauo.mutation
}

// ClearInstallations clears all "installations" edges to the GithubInstallation entity.
func (gauo *GithubAppUpdateOne) ClearInstallations() *GithubAppUpdateOne {
	gauo.mutation.ClearInstallations()
	return gauo
}

// RemoveInstallationIDs removes the "installations" edge to GithubInstallation entities by IDs.
func (gauo *GithubAppUpdateOne) RemoveInstallationIDs(ids ...int64) *GithubAppUpdateOne {
	gauo.mutation.RemoveInstallationIDs(ids...)
	return gauo
}

// RemoveInstallations removes "installations" edges to GithubInstallation entities.
func (gauo *GithubAppUpdateOne) RemoveInstallations(g ...*GithubInstallation) *GithubAppUpdateOne {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gauo.RemoveInstallationIDs(ids...)
}

// Where appends a list predicates to the GithubAppUpdate builder.
func (gauo *GithubAppUpdateOne) Where(ps ...predicate.GithubApp) *GithubAppUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GithubAppUpdateOne) Select(field string, fields ...string) *GithubAppUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GithubApp entity.
func (gauo *GithubAppUpdateOne) Save(ctx context.Context) (*GithubApp, error) {
	gauo.defaults()
	return withHooks(ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GithubAppUpdateOne) SaveX(ctx context.Context) *GithubApp {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GithubAppUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GithubAppUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GithubAppUpdateOne) defaults() {
	if _, ok := gauo.mutation.UpdatedAt(); !ok {
		v := githubapp.UpdateDefaultUpdatedAt()
		gauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GithubAppUpdateOne) check() error {
	if v, ok := gauo.mutation.Name(); ok {
		if err := githubapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GithubApp.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gauo *GithubAppUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GithubAppUpdateOne {
	gauo.modifiers = append(gauo.modifiers, modifiers...)
	return gauo
}

func (gauo *GithubAppUpdateOne) sqlSave(ctx context.Context) (_node *GithubApp, err error) {
	if err := gauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(githubapp.Table, githubapp.Columns, sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GithubApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, githubapp.FieldID)
		for _, f := range fields {
			if !githubapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != githubapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.SetField(githubapp.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gauo.mutation.Name(); ok {
		_spec.SetField(githubapp.FieldName, field.TypeString, value)
	}
	if value, ok := gauo.mutation.ClientID(); ok {
		_spec.SetField(githubapp.FieldClientID, field.TypeString, value)
	}
	if value, ok := gauo.mutation.ClientSecret(); ok {
		_spec.SetField(githubapp.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := gauo.mutation.WebhookSecret(); ok {
		_spec.SetField(githubapp.FieldWebhookSecret, field.TypeString, value)
	}
	if value, ok := gauo.mutation.PrivateKey(); ok {
		_spec.SetField(githubapp.FieldPrivateKey, field.TypeString, value)
	}
	if gauo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.RemovedInstallationsIDs(); len(nodes) > 0 && !gauo.mutation.InstallationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gauo.modifiers...)
	_node = &GithubApp{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{githubapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}
