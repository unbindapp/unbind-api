// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/template"
)

// TemplateCreate is the builder for creating a Template entity.
type TemplateCreate struct {
	config
	mutation *TemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TemplateCreate) SetCreatedAt(t time.Time) *TemplateCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCreatedAt(t *time.Time) *TemplateCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TemplateCreate) SetUpdatedAt(t time.Time) *TemplateCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableUpdatedAt(t *time.Time) *TemplateCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TemplateCreate) SetName(s string) *TemplateCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetVersion sets the "version" field.
func (tc *TemplateCreate) SetVersion(i int) *TemplateCreate {
	tc.mutation.SetVersion(i)
	return tc
}

// SetImmutable sets the "immutable" field.
func (tc *TemplateCreate) SetImmutable(b bool) *TemplateCreate {
	tc.mutation.SetImmutable(b)
	return tc
}

// SetNillableImmutable sets the "immutable" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableImmutable(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetImmutable(*b)
	}
	return tc
}

// SetDefinition sets the "definition" field.
func (tc *TemplateCreate) SetDefinition(sd schema.TemplateDefinition) *TemplateCreate {
	tc.mutation.SetDefinition(sd)
	return tc
}

// SetID sets the "id" field.
func (tc *TemplateCreate) SetID(u uuid.UUID) *TemplateCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableID(u *uuid.UUID) *TemplateCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (tc *TemplateCreate) AddServiceIDs(ids ...uuid.UUID) *TemplateCreate {
	tc.mutation.AddServiceIDs(ids...)
	return tc
}

// AddServices adds the "services" edges to the Service entity.
func (tc *TemplateCreate) AddServices(s ...*Service) *TemplateCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddServiceIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tc *TemplateCreate) Mutation() *TemplateMutation {
	return tc.mutation
}

// Save creates the Template in the database.
func (tc *TemplateCreate) Save(ctx context.Context) (*Template, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TemplateCreate) SaveX(ctx context.Context) *Template {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TemplateCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TemplateCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TemplateCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := template.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := template.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Immutable(); !ok {
		v := template.DefaultImmutable
		tc.mutation.SetImmutable(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := template.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TemplateCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Template.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Template.updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Template.name"`)}
	}
	if _, ok := tc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Template.version"`)}
	}
	if _, ok := tc.mutation.Immutable(); !ok {
		return &ValidationError{Name: "immutable", err: errors.New(`ent: missing required field "Template.immutable"`)}
	}
	if _, ok := tc.mutation.Definition(); !ok {
		return &ValidationError{Name: "definition", err: errors.New(`ent: missing required field "Template.definition"`)}
	}
	return nil
}

func (tc *TemplateCreate) sqlSave(ctx context.Context) (*Template, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TemplateCreate) createSpec() (*Template, *sqlgraph.CreateSpec) {
	var (
		_node = &Template{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(template.Table, sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(template.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := tc.mutation.Immutable(); ok {
		_spec.SetField(template.FieldImmutable, field.TypeBool, value)
		_node.Immutable = value
	}
	if value, ok := tc.mutation.Definition(); ok {
		_spec.SetField(template.FieldDefinition, field.TypeJSON, value)
		_node.Definition = value
	}
	if nodes := tc.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Template.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TemplateCreate) OnConflict(opts ...sql.ConflictOption) *TemplateUpsertOne {
	tc.conflict = opts
	return &TemplateUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Template.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TemplateCreate) OnConflictColumns(columns ...string) *TemplateUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TemplateUpsertOne{
		create: tc,
	}
}

type (
	// TemplateUpsertOne is the builder for "upsert"-ing
	//  one Template node.
	TemplateUpsertOne struct {
		create *TemplateCreate
	}

	// TemplateUpsert is the "OnConflict" setter.
	TemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplateUpsert) SetUpdatedAt(v time.Time) *TemplateUpsert {
	u.Set(template.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplateUpsert) UpdateUpdatedAt() *TemplateUpsert {
	u.SetExcluded(template.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *TemplateUpsert) SetName(v string) *TemplateUpsert {
	u.Set(template.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplateUpsert) UpdateName() *TemplateUpsert {
	u.SetExcluded(template.FieldName)
	return u
}

// SetVersion sets the "version" field.
func (u *TemplateUpsert) SetVersion(v int) *TemplateUpsert {
	u.Set(template.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TemplateUpsert) UpdateVersion() *TemplateUpsert {
	u.SetExcluded(template.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *TemplateUpsert) AddVersion(v int) *TemplateUpsert {
	u.Add(template.FieldVersion, v)
	return u
}

// SetImmutable sets the "immutable" field.
func (u *TemplateUpsert) SetImmutable(v bool) *TemplateUpsert {
	u.Set(template.FieldImmutable, v)
	return u
}

// UpdateImmutable sets the "immutable" field to the value that was provided on create.
func (u *TemplateUpsert) UpdateImmutable() *TemplateUpsert {
	u.SetExcluded(template.FieldImmutable)
	return u
}

// SetDefinition sets the "definition" field.
func (u *TemplateUpsert) SetDefinition(v schema.TemplateDefinition) *TemplateUpsert {
	u.Set(template.FieldDefinition, v)
	return u
}

// UpdateDefinition sets the "definition" field to the value that was provided on create.
func (u *TemplateUpsert) UpdateDefinition() *TemplateUpsert {
	u.SetExcluded(template.FieldDefinition)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Template.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(template.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplateUpsertOne) UpdateNewValues() *TemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(template.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(template.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Template.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TemplateUpsertOne) Ignore() *TemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplateUpsertOne) DoNothing() *TemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplateCreate.OnConflict
// documentation for more info.
func (u *TemplateUpsertOne) Update(set func(*TemplateUpsert)) *TemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplateUpsertOne) SetUpdatedAt(v time.Time) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplateUpsertOne) UpdateUpdatedAt() *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TemplateUpsertOne) SetName(v string) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplateUpsertOne) UpdateName() *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *TemplateUpsertOne) SetVersion(v int) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *TemplateUpsertOne) AddVersion(v int) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TemplateUpsertOne) UpdateVersion() *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateVersion()
	})
}

// SetImmutable sets the "immutable" field.
func (u *TemplateUpsertOne) SetImmutable(v bool) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.SetImmutable(v)
	})
}

// UpdateImmutable sets the "immutable" field to the value that was provided on create.
func (u *TemplateUpsertOne) UpdateImmutable() *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateImmutable()
	})
}

// SetDefinition sets the "definition" field.
func (u *TemplateUpsertOne) SetDefinition(v schema.TemplateDefinition) *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.SetDefinition(v)
	})
}

// UpdateDefinition sets the "definition" field to the value that was provided on create.
func (u *TemplateUpsertOne) UpdateDefinition() *TemplateUpsertOne {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateDefinition()
	})
}

// Exec executes the query.
func (u *TemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TemplateUpsertOne.ID is not supported by MySQL driver. Use TemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TemplateCreateBulk is the builder for creating many Template entities in bulk.
type TemplateCreateBulk struct {
	config
	err      error
	builders []*TemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the Template entities in the database.
func (tcb *TemplateCreateBulk) Save(ctx context.Context) ([]*Template, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Template, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TemplateCreateBulk) SaveX(ctx context.Context) []*Template {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TemplateCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Template.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *TemplateUpsertBulk {
	tcb.conflict = opts
	return &TemplateUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Template.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TemplateCreateBulk) OnConflictColumns(columns ...string) *TemplateUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TemplateUpsertBulk{
		create: tcb,
	}
}

// TemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of Template nodes.
type TemplateUpsertBulk struct {
	create *TemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Template.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(template.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplateUpsertBulk) UpdateNewValues() *TemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(template.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(template.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Template.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TemplateUpsertBulk) Ignore() *TemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplateUpsertBulk) DoNothing() *TemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplateCreateBulk.OnConflict
// documentation for more info.
func (u *TemplateUpsertBulk) Update(set func(*TemplateUpsert)) *TemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplateUpsertBulk) SetUpdatedAt(v time.Time) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplateUpsertBulk) UpdateUpdatedAt() *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TemplateUpsertBulk) SetName(v string) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplateUpsertBulk) UpdateName() *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *TemplateUpsertBulk) SetVersion(v int) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *TemplateUpsertBulk) AddVersion(v int) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TemplateUpsertBulk) UpdateVersion() *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateVersion()
	})
}

// SetImmutable sets the "immutable" field.
func (u *TemplateUpsertBulk) SetImmutable(v bool) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.SetImmutable(v)
	})
}

// UpdateImmutable sets the "immutable" field to the value that was provided on create.
func (u *TemplateUpsertBulk) UpdateImmutable() *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateImmutable()
	})
}

// SetDefinition sets the "definition" field.
func (u *TemplateUpsertBulk) SetDefinition(v schema.TemplateDefinition) *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.SetDefinition(v)
	})
}

// UpdateDefinition sets the "definition" field to the value that was provided on create.
func (u *TemplateUpsertBulk) UpdateDefinition() *TemplateUpsertBulk {
	return u.Update(func(s *TemplateUpsert) {
		s.UpdateDefinition()
	})
}

// Exec executes the query.
func (u *TemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
