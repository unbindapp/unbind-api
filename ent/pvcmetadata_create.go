// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/pvcmetadata"
)

// PVCMetadataCreate is the builder for creating a PVCMetadata entity.
type PVCMetadataCreate struct {
	config
	mutation *PVCMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PVCMetadataCreate) SetCreatedAt(t time.Time) *PVCMetadataCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PVCMetadataCreate) SetNillableCreatedAt(t *time.Time) *PVCMetadataCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PVCMetadataCreate) SetUpdatedAt(t time.Time) *PVCMetadataCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PVCMetadataCreate) SetNillableUpdatedAt(t *time.Time) *PVCMetadataCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetPvcID sets the "pvc_id" field.
func (pmc *PVCMetadataCreate) SetPvcID(s string) *PVCMetadataCreate {
	pmc.mutation.SetPvcID(s)
	return pmc
}

// SetName sets the "name" field.
func (pmc *PVCMetadataCreate) SetName(s string) *PVCMetadataCreate {
	pmc.mutation.SetName(s)
	return pmc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmc *PVCMetadataCreate) SetNillableName(s *string) *PVCMetadataCreate {
	if s != nil {
		pmc.SetName(*s)
	}
	return pmc
}

// SetDescription sets the "description" field.
func (pmc *PVCMetadataCreate) SetDescription(s string) *PVCMetadataCreate {
	pmc.mutation.SetDescription(s)
	return pmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmc *PVCMetadataCreate) SetNillableDescription(s *string) *PVCMetadataCreate {
	if s != nil {
		pmc.SetDescription(*s)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PVCMetadataCreate) SetID(u uuid.UUID) *PVCMetadataCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pmc *PVCMetadataCreate) SetNillableID(u *uuid.UUID) *PVCMetadataCreate {
	if u != nil {
		pmc.SetID(*u)
	}
	return pmc
}

// Mutation returns the PVCMetadataMutation object of the builder.
func (pmc *PVCMetadataCreate) Mutation() *PVCMetadataMutation {
	return pmc.mutation
}

// Save creates the PVCMetadata in the database.
func (pmc *PVCMetadataCreate) Save(ctx context.Context) (*PVCMetadata, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PVCMetadataCreate) SaveX(ctx context.Context) *PVCMetadata {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PVCMetadataCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PVCMetadataCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PVCMetadataCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := pvcmetadata.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := pvcmetadata.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.ID(); !ok {
		v := pvcmetadata.DefaultID()
		pmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PVCMetadataCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PVCMetadata.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PVCMetadata.updated_at"`)}
	}
	if _, ok := pmc.mutation.PvcID(); !ok {
		return &ValidationError{Name: "pvc_id", err: errors.New(`ent: missing required field "PVCMetadata.pvc_id"`)}
	}
	return nil
}

func (pmc *PVCMetadataCreate) sqlSave(ctx context.Context) (*PVCMetadata, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PVCMetadataCreate) createSpec() (*PVCMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &PVCMetadata{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(pvcmetadata.Table, sqlgraph.NewFieldSpec(pvcmetadata.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(pvcmetadata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(pvcmetadata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.PvcID(); ok {
		_spec.SetField(pvcmetadata.FieldPvcID, field.TypeString, value)
		_node.PvcID = value
	}
	if value, ok := pmc.mutation.Name(); ok {
		_spec.SetField(pvcmetadata.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := pmc.mutation.Description(); ok {
		_spec.SetField(pvcmetadata.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PVCMetadata.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PVCMetadataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmc *PVCMetadataCreate) OnConflict(opts ...sql.ConflictOption) *PVCMetadataUpsertOne {
	pmc.conflict = opts
	return &PVCMetadataUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PVCMetadataCreate) OnConflictColumns(columns ...string) *PVCMetadataUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PVCMetadataUpsertOne{
		create: pmc,
	}
}

type (
	// PVCMetadataUpsertOne is the builder for "upsert"-ing
	//  one PVCMetadata node.
	PVCMetadataUpsertOne struct {
		create *PVCMetadataCreate
	}

	// PVCMetadataUpsert is the "OnConflict" setter.
	PVCMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PVCMetadataUpsert) SetUpdatedAt(v time.Time) *PVCMetadataUpsert {
	u.Set(pvcmetadata.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PVCMetadataUpsert) UpdateUpdatedAt() *PVCMetadataUpsert {
	u.SetExcluded(pvcmetadata.FieldUpdatedAt)
	return u
}

// SetPvcID sets the "pvc_id" field.
func (u *PVCMetadataUpsert) SetPvcID(v string) *PVCMetadataUpsert {
	u.Set(pvcmetadata.FieldPvcID, v)
	return u
}

// UpdatePvcID sets the "pvc_id" field to the value that was provided on create.
func (u *PVCMetadataUpsert) UpdatePvcID() *PVCMetadataUpsert {
	u.SetExcluded(pvcmetadata.FieldPvcID)
	return u
}

// SetName sets the "name" field.
func (u *PVCMetadataUpsert) SetName(v string) *PVCMetadataUpsert {
	u.Set(pvcmetadata.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PVCMetadataUpsert) UpdateName() *PVCMetadataUpsert {
	u.SetExcluded(pvcmetadata.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PVCMetadataUpsert) ClearName() *PVCMetadataUpsert {
	u.SetNull(pvcmetadata.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PVCMetadataUpsert) SetDescription(v string) *PVCMetadataUpsert {
	u.Set(pvcmetadata.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PVCMetadataUpsert) UpdateDescription() *PVCMetadataUpsert {
	u.SetExcluded(pvcmetadata.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PVCMetadataUpsert) ClearDescription() *PVCMetadataUpsert {
	u.SetNull(pvcmetadata.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pvcmetadata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PVCMetadataUpsertOne) UpdateNewValues() *PVCMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pvcmetadata.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pvcmetadata.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PVCMetadataUpsertOne) Ignore() *PVCMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PVCMetadataUpsertOne) DoNothing() *PVCMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PVCMetadataCreate.OnConflict
// documentation for more info.
func (u *PVCMetadataUpsertOne) Update(set func(*PVCMetadataUpsert)) *PVCMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PVCMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PVCMetadataUpsertOne) SetUpdatedAt(v time.Time) *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PVCMetadataUpsertOne) UpdateUpdatedAt() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPvcID sets the "pvc_id" field.
func (u *PVCMetadataUpsertOne) SetPvcID(v string) *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetPvcID(v)
	})
}

// UpdatePvcID sets the "pvc_id" field to the value that was provided on create.
func (u *PVCMetadataUpsertOne) UpdatePvcID() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdatePvcID()
	})
}

// SetName sets the "name" field.
func (u *PVCMetadataUpsertOne) SetName(v string) *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PVCMetadataUpsertOne) UpdateName() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PVCMetadataUpsertOne) ClearName() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *PVCMetadataUpsertOne) SetDescription(v string) *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PVCMetadataUpsertOne) UpdateDescription() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PVCMetadataUpsertOne) ClearDescription() *PVCMetadataUpsertOne {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PVCMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PVCMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PVCMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PVCMetadataUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PVCMetadataUpsertOne.ID is not supported by MySQL driver. Use PVCMetadataUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PVCMetadataUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PVCMetadataCreateBulk is the builder for creating many PVCMetadata entities in bulk.
type PVCMetadataCreateBulk struct {
	config
	err      error
	builders []*PVCMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the PVCMetadata entities in the database.
func (pmcb *PVCMetadataCreateBulk) Save(ctx context.Context) ([]*PVCMetadata, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PVCMetadata, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PVCMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PVCMetadataCreateBulk) SaveX(ctx context.Context) []*PVCMetadata {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PVCMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PVCMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PVCMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PVCMetadataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PVCMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *PVCMetadataUpsertBulk {
	pmcb.conflict = opts
	return &PVCMetadataUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PVCMetadataCreateBulk) OnConflictColumns(columns ...string) *PVCMetadataUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PVCMetadataUpsertBulk{
		create: pmcb,
	}
}

// PVCMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of PVCMetadata nodes.
type PVCMetadataUpsertBulk struct {
	create *PVCMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pvcmetadata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PVCMetadataUpsertBulk) UpdateNewValues() *PVCMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pvcmetadata.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pvcmetadata.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PVCMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PVCMetadataUpsertBulk) Ignore() *PVCMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PVCMetadataUpsertBulk) DoNothing() *PVCMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PVCMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *PVCMetadataUpsertBulk) Update(set func(*PVCMetadataUpsert)) *PVCMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PVCMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PVCMetadataUpsertBulk) SetUpdatedAt(v time.Time) *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PVCMetadataUpsertBulk) UpdateUpdatedAt() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPvcID sets the "pvc_id" field.
func (u *PVCMetadataUpsertBulk) SetPvcID(v string) *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetPvcID(v)
	})
}

// UpdatePvcID sets the "pvc_id" field to the value that was provided on create.
func (u *PVCMetadataUpsertBulk) UpdatePvcID() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdatePvcID()
	})
}

// SetName sets the "name" field.
func (u *PVCMetadataUpsertBulk) SetName(v string) *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PVCMetadataUpsertBulk) UpdateName() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PVCMetadataUpsertBulk) ClearName() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *PVCMetadataUpsertBulk) SetDescription(v string) *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PVCMetadataUpsertBulk) UpdateDescription() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PVCMetadataUpsertBulk) ClearDescription() *PVCMetadataUpsertBulk {
	return u.Update(func(s *PVCMetadataUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PVCMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PVCMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PVCMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PVCMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
