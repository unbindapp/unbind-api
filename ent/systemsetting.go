// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/systemsetting"
)

// SystemSetting is the model entity for the SystemSetting schema.
type SystemSetting struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Wildcard base URL for the system
	WildcardBaseURL *string `json:"wildcard_base_url,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemsetting.FieldWildcardBaseURL:
			values[i] = new(sql.NullString)
		case systemsetting.FieldCreatedAt, systemsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case systemsetting.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemSetting fields.
func (ss *SystemSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ss.ID = *value
			}
		case systemsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Time
			}
		case systemsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Time
			}
		case systemsetting.FieldWildcardBaseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wildcard_base_url", values[i])
			} else if value.Valid {
				ss.WildcardBaseURL = new(string)
				*ss.WildcardBaseURL = value.String
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemSetting.
// This includes values selected through modifiers, order, etc.
func (ss *SystemSetting) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this SystemSetting.
// Note that you need to call SystemSetting.Unwrap() before calling this method if this SystemSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SystemSetting) Update() *SystemSettingUpdateOne {
	return NewSystemSettingClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SystemSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SystemSetting) Unwrap() *SystemSetting {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemSetting is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SystemSetting) String() string {
	var builder strings.Builder
	builder.WriteString("SystemSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ss.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ss.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ss.WildcardBaseURL; v != nil {
		builder.WriteString("wildcard_base_url=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SystemSettings is a parsable slice of SystemSetting.
type SystemSettings []*SystemSetting
