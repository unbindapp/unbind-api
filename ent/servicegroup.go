// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/environment"
	"github.com/unbindapp/unbind-api/ent/servicegroup"
)

// ServiceGroup is the model entity for the ServiceGroup schema.
type ServiceGroup struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name of the service group
	Name string `json:"name,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Description of the service group
	Description *string `json:"description,omitempty"`
	// Reference to the environment this service group belongs to
	EnvironmentID uuid.UUID `json:"environment_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceGroupQuery when eager-loading is set.
	Edges        ServiceGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceGroupEdges holds the relations/edges for other nodes in the graph.
type ServiceGroupEdges struct {
	// Environment holds the value of the environment edge.
	Environment *Environment `json:"environment,omitempty"`
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceGroupEdges) EnvironmentOrErr() (*Environment, error) {
	if e.Environment != nil {
		return e.Environment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: environment.Label}
	}
	return nil, &NotLoadedError{edge: "environment"}
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceGroupEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[1] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicegroup.FieldName, servicegroup.FieldIcon, servicegroup.FieldDescription:
			values[i] = new(sql.NullString)
		case servicegroup.FieldCreatedAt, servicegroup.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case servicegroup.FieldID, servicegroup.FieldEnvironmentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceGroup fields.
func (sg *ServiceGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicegroup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sg.ID = *value
			}
		case servicegroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sg.CreatedAt = value.Time
			}
		case servicegroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sg.UpdatedAt = value.Time
			}
		case servicegroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sg.Name = value.String
			}
		case servicegroup.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				sg.Icon = value.String
			}
		case servicegroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sg.Description = new(string)
				*sg.Description = value.String
			}
		case servicegroup.FieldEnvironmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value != nil {
				sg.EnvironmentID = *value
			}
		default:
			sg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceGroup.
// This includes values selected through modifiers, order, etc.
func (sg *ServiceGroup) Value(name string) (ent.Value, error) {
	return sg.selectValues.Get(name)
}

// QueryEnvironment queries the "environment" edge of the ServiceGroup entity.
func (sg *ServiceGroup) QueryEnvironment() *EnvironmentQuery {
	return NewServiceGroupClient(sg.config).QueryEnvironment(sg)
}

// QueryServices queries the "services" edge of the ServiceGroup entity.
func (sg *ServiceGroup) QueryServices() *ServiceQuery {
	return NewServiceGroupClient(sg.config).QueryServices(sg)
}

// Update returns a builder for updating this ServiceGroup.
// Note that you need to call ServiceGroup.Unwrap() before calling this method if this ServiceGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *ServiceGroup) Update() *ServiceGroupUpdateOne {
	return NewServiceGroupClient(sg.config).UpdateOne(sg)
}

// Unwrap unwraps the ServiceGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *ServiceGroup) Unwrap() *ServiceGroup {
	_tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceGroup is not a transactional entity")
	}
	sg.config.driver = _tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *ServiceGroup) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sg.Name)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(sg.Icon)
	builder.WriteString(", ")
	if v := sg.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(fmt.Sprintf("%v", sg.EnvironmentID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceGroups is a parsable slice of ServiceGroup.
type ServiceGroups []*ServiceGroup
