// Code generated by ent, DO NOT EDIT.

package githubinstallation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the githubinstallation type in the database.
	Label = "github_installation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldGithubAppID holds the string denoting the github_app_id field in the database.
	FieldGithubAppID = "github_app_id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldAccountLogin holds the string denoting the account_login field in the database.
	FieldAccountLogin = "account_login"
	// FieldAccountType holds the string denoting the account_type field in the database.
	FieldAccountType = "account_type"
	// FieldAccountURL holds the string denoting the account_url field in the database.
	FieldAccountURL = "account_url"
	// FieldRepositorySelection holds the string denoting the repository_selection field in the database.
	FieldRepositorySelection = "repository_selection"
	// FieldSuspended holds the string denoting the suspended field in the database.
	FieldSuspended = "suspended"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldEvents holds the string denoting the events field in the database.
	FieldEvents = "events"
	// EdgeGithubApps holds the string denoting the github_apps edge name in mutations.
	EdgeGithubApps = "github_apps"
	// Table holds the table name of the githubinstallation in the database.
	Table = "github_installations"
	// GithubAppsTable is the table that holds the github_apps relation/edge.
	GithubAppsTable = "github_installations"
	// GithubAppsInverseTable is the table name for the GithubApp entity.
	// It exists in this package in order to avoid circular dependency with the "githubapp" package.
	GithubAppsInverseTable = "github_apps"
	// GithubAppsColumn is the table column denoting the github_apps relation/edge.
	GithubAppsColumn = "github_app_id"
)

// Columns holds all SQL columns for githubinstallation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldGithubAppID,
	FieldAccountID,
	FieldAccountLogin,
	FieldAccountType,
	FieldAccountURL,
	FieldRepositorySelection,
	FieldSuspended,
	FieldActive,
	FieldPermissions,
	FieldEvents,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// AccountLoginValidator is a validator for the "account_login" field. It is called by the builders before save.
	AccountLoginValidator func(string) error
	// AccountURLValidator is a validator for the "account_url" field. It is called by the builders before save.
	AccountURLValidator func(string) error
	// DefaultSuspended holds the default value on creation for the "suspended" field.
	DefaultSuspended bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// AccountType defines the type for the "account_type" enum field.
type AccountType string

// AccountType values.
const (
	AccountTypeOrganization AccountType = "Organization"
	AccountTypeUser         AccountType = "User"
)

func (at AccountType) String() string {
	return string(at)
}

// AccountTypeValidator is a validator for the "account_type" field enum values. It is called by the builders before save.
func AccountTypeValidator(at AccountType) error {
	switch at {
	case AccountTypeOrganization, AccountTypeUser:
		return nil
	default:
		return fmt.Errorf("githubinstallation: invalid enum value for account_type field: %q", at)
	}
}

// RepositorySelection defines the type for the "repository_selection" enum field.
type RepositorySelection string

// RepositorySelectionAll is the default value of the RepositorySelection enum.
const DefaultRepositorySelection = RepositorySelectionAll

// RepositorySelection values.
const (
	RepositorySelectionAll      RepositorySelection = "all"
	RepositorySelectionSelected RepositorySelection = "selected"
)

func (rs RepositorySelection) String() string {
	return string(rs)
}

// RepositorySelectionValidator is a validator for the "repository_selection" field enum values. It is called by the builders before save.
func RepositorySelectionValidator(rs RepositorySelection) error {
	switch rs {
	case RepositorySelectionAll, RepositorySelectionSelected:
		return nil
	default:
		return fmt.Errorf("githubinstallation: invalid enum value for repository_selection field: %q", rs)
	}
}

// OrderOption defines the ordering options for the GithubInstallation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGithubAppID orders the results by the github_app_id field.
func ByGithubAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubAppID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByAccountLogin orders the results by the account_login field.
func ByAccountLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountLogin, opts...).ToFunc()
}

// ByAccountType orders the results by the account_type field.
func ByAccountType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountType, opts...).ToFunc()
}

// ByAccountURL orders the results by the account_url field.
func ByAccountURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountURL, opts...).ToFunc()
}

// ByRepositorySelection orders the results by the repository_selection field.
func ByRepositorySelection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepositorySelection, opts...).ToFunc()
}

// BySuspended orders the results by the suspended field.
func BySuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspended, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByGithubAppsField orders the results by github_apps field.
func ByGithubAppsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGithubAppsStep(), sql.OrderByField(field, opts...))
	}
}
func newGithubAppsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GithubAppsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GithubAppsTable, GithubAppsColumn),
	)
}
