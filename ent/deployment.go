// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/deployment"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID uuid.UUID `json:"service_id,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.DeploymentStatus `json:"status,omitempty"`
	// Source holds the value of the "source" field.
	Source schema.DeploymentSource `json:"source,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// CommitSha holds the value of the "commit_sha" field.
	CommitSha string `json:"commit_sha,omitempty"`
	// CommitMessage holds the value of the "commit_message" field.
	CommitMessage string `json:"commit_message,omitempty"`
	// CommitAuthor holds the value of the "commit_author" field.
	CommitAuthor *schema.GitCommitter `json:"commit_author,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// The name of the kubernetes job
	KubernetesJobName string `json:"kubernetes_job_name,omitempty"`
	// The status of the kubernetes job
	KubernetesJobStatus string `json:"kubernetes_job_status,omitempty"`
	// Attempts holds the value of the "attempts" field.
	Attempts int `json:"attempts,omitempty"`
	// Reference to the image used for the deployment
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges        DeploymentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldCommitAuthor:
			values[i] = new([]byte)
		case deployment.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case deployment.FieldStatus, deployment.FieldSource, deployment.FieldError, deployment.FieldCommitSha, deployment.FieldCommitMessage, deployment.FieldKubernetesJobName, deployment.FieldKubernetesJobStatus, deployment.FieldImage:
			values[i] = new(sql.NullString)
		case deployment.FieldCreatedAt, deployment.FieldUpdatedAt, deployment.FieldStartedAt, deployment.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case deployment.FieldID, deployment.FieldServiceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case deployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case deployment.FieldServiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value != nil {
				d.ServiceID = *value
			}
		case deployment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = schema.DeploymentStatus(value.String)
			}
		case deployment.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				d.Source = schema.DeploymentSource(value.String)
			}
		case deployment.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				d.Error = value.String
			}
		case deployment.FieldCommitSha:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_sha", values[i])
			} else if value.Valid {
				d.CommitSha = value.String
			}
		case deployment.FieldCommitMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_message", values[i])
			} else if value.Valid {
				d.CommitMessage = value.String
			}
		case deployment.FieldCommitAuthor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field commit_author", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.CommitAuthor); err != nil {
					return fmt.Errorf("unmarshal field commit_author: %w", err)
				}
			}
		case deployment.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				d.StartedAt = new(time.Time)
				*d.StartedAt = value.Time
			}
		case deployment.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				d.CompletedAt = new(time.Time)
				*d.CompletedAt = value.Time
			}
		case deployment.FieldKubernetesJobName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubernetes_job_name", values[i])
			} else if value.Valid {
				d.KubernetesJobName = value.String
			}
		case deployment.FieldKubernetesJobStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubernetes_job_status", values[i])
			} else if value.Valid {
				d.KubernetesJobStatus = value.String
			}
		case deployment.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				d.Attempts = int(value.Int64)
			}
		case deployment.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				d.Image = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Deployment.
// This includes values selected through modifiers, order, etc.
func (d *Deployment) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryService queries the "service" edge of the Deployment entity.
func (d *Deployment) QueryService() *ServiceQuery {
	return NewDeploymentClient(d.config).QueryService(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return NewDeploymentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_id=")
	builder.WriteString(fmt.Sprintf("%v", d.ServiceID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", d.Source))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(d.Error)
	builder.WriteString(", ")
	builder.WriteString("commit_sha=")
	builder.WriteString(d.CommitSha)
	builder.WriteString(", ")
	builder.WriteString("commit_message=")
	builder.WriteString(d.CommitMessage)
	builder.WriteString(", ")
	builder.WriteString("commit_author=")
	builder.WriteString(fmt.Sprintf("%v", d.CommitAuthor))
	builder.WriteString(", ")
	if v := d.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("kubernetes_job_name=")
	builder.WriteString(d.KubernetesJobName)
	builder.WriteString(", ")
	builder.WriteString("kubernetes_job_status=")
	builder.WriteString(d.KubernetesJobStatus)
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", d.Attempts))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(d.Image)
	builder.WriteByte(')')
	return builder.String()
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment
