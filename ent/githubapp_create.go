// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
)

// GithubAppCreate is the builder for creating a GithubApp entity.
type GithubAppCreate struct {
	config
	mutation *GithubAppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gac *GithubAppCreate) SetCreatedAt(t time.Time) *GithubAppCreate {
	gac.mutation.SetCreatedAt(t)
	return gac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gac *GithubAppCreate) SetNillableCreatedAt(t *time.Time) *GithubAppCreate {
	if t != nil {
		gac.SetCreatedAt(*t)
	}
	return gac
}

// SetUpdatedAt sets the "updated_at" field.
func (gac *GithubAppCreate) SetUpdatedAt(t time.Time) *GithubAppCreate {
	gac.mutation.SetUpdatedAt(t)
	return gac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gac *GithubAppCreate) SetNillableUpdatedAt(t *time.Time) *GithubAppCreate {
	if t != nil {
		gac.SetUpdatedAt(*t)
	}
	return gac
}

// SetName sets the "name" field.
func (gac *GithubAppCreate) SetName(s string) *GithubAppCreate {
	gac.mutation.SetName(s)
	return gac
}

// SetClientID sets the "client_id" field.
func (gac *GithubAppCreate) SetClientID(s string) *GithubAppCreate {
	gac.mutation.SetClientID(s)
	return gac
}

// SetClientSecret sets the "client_secret" field.
func (gac *GithubAppCreate) SetClientSecret(s string) *GithubAppCreate {
	gac.mutation.SetClientSecret(s)
	return gac
}

// SetWebhookSecret sets the "webhook_secret" field.
func (gac *GithubAppCreate) SetWebhookSecret(s string) *GithubAppCreate {
	gac.mutation.SetWebhookSecret(s)
	return gac
}

// SetPrivateKey sets the "private_key" field.
func (gac *GithubAppCreate) SetPrivateKey(s string) *GithubAppCreate {
	gac.mutation.SetPrivateKey(s)
	return gac
}

// SetID sets the "id" field.
func (gac *GithubAppCreate) SetID(i int64) *GithubAppCreate {
	gac.mutation.SetID(i)
	return gac
}

// AddInstallationIDs adds the "installations" edge to the GithubInstallation entity by IDs.
func (gac *GithubAppCreate) AddInstallationIDs(ids ...int64) *GithubAppCreate {
	gac.mutation.AddInstallationIDs(ids...)
	return gac
}

// AddInstallations adds the "installations" edges to the GithubInstallation entity.
func (gac *GithubAppCreate) AddInstallations(g ...*GithubInstallation) *GithubAppCreate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gac.AddInstallationIDs(ids...)
}

// Mutation returns the GithubAppMutation object of the builder.
func (gac *GithubAppCreate) Mutation() *GithubAppMutation {
	return gac.mutation
}

// Save creates the GithubApp in the database.
func (gac *GithubAppCreate) Save(ctx context.Context) (*GithubApp, error) {
	gac.defaults()
	return withHooks(ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GithubAppCreate) SaveX(ctx context.Context) *GithubApp {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GithubAppCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GithubAppCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GithubAppCreate) defaults() {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		v := githubapp.DefaultCreatedAt()
		gac.mutation.SetCreatedAt(v)
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		v := githubapp.DefaultUpdatedAt()
		gac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GithubAppCreate) check() error {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubApp.created_at"`)}
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GithubApp.updated_at"`)}
	}
	if _, ok := gac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GithubApp.name"`)}
	}
	if v, ok := gac.mutation.Name(); ok {
		if err := githubapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GithubApp.name": %w`, err)}
		}
	}
	if _, ok := gac.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "GithubApp.client_id"`)}
	}
	if _, ok := gac.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "GithubApp.client_secret"`)}
	}
	if _, ok := gac.mutation.WebhookSecret(); !ok {
		return &ValidationError{Name: "webhook_secret", err: errors.New(`ent: missing required field "GithubApp.webhook_secret"`)}
	}
	if _, ok := gac.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "GithubApp.private_key"`)}
	}
	if v, ok := gac.mutation.ID(); ok {
		if err := githubapp.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "GithubApp.id": %w`, err)}
		}
	}
	return nil
}

func (gac *GithubAppCreate) sqlSave(ctx context.Context) (*GithubApp, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gac.mutation.id = &_node.ID
	gac.mutation.done = true
	return _node, nil
}

func (gac *GithubAppCreate) createSpec() (*GithubApp, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubApp{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(githubapp.Table, sqlgraph.NewFieldSpec(githubapp.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = gac.conflict
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gac.mutation.CreatedAt(); ok {
		_spec.SetField(githubapp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gac.mutation.UpdatedAt(); ok {
		_spec.SetField(githubapp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gac.mutation.Name(); ok {
		_spec.SetField(githubapp.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gac.mutation.ClientID(); ok {
		_spec.SetField(githubapp.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := gac.mutation.ClientSecret(); ok {
		_spec.SetField(githubapp.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := gac.mutation.WebhookSecret(); ok {
		_spec.SetField(githubapp.FieldWebhookSecret, field.TypeString, value)
		_node.WebhookSecret = value
	}
	if value, ok := gac.mutation.PrivateKey(); ok {
		_spec.SetField(githubapp.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if nodes := gac.mutation.InstallationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubapp.InstallationsTable,
			Columns: []string{githubapp.InstallationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubinstallation.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubApp.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubAppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gac *GithubAppCreate) OnConflict(opts ...sql.ConflictOption) *GithubAppUpsertOne {
	gac.conflict = opts
	return &GithubAppUpsertOne{
		create: gac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gac *GithubAppCreate) OnConflictColumns(columns ...string) *GithubAppUpsertOne {
	gac.conflict = append(gac.conflict, sql.ConflictColumns(columns...))
	return &GithubAppUpsertOne{
		create: gac,
	}
}

type (
	// GithubAppUpsertOne is the builder for "upsert"-ing
	//  one GithubApp node.
	GithubAppUpsertOne struct {
		create *GithubAppCreate
	}

	// GithubAppUpsert is the "OnConflict" setter.
	GithubAppUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubAppUpsert) SetUpdatedAt(v time.Time) *GithubAppUpsert {
	u.Set(githubapp.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdateUpdatedAt() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *GithubAppUpsert) SetName(v string) *GithubAppUpsert {
	u.Set(githubapp.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdateName() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldName)
	return u
}

// SetClientID sets the "client_id" field.
func (u *GithubAppUpsert) SetClientID(v string) *GithubAppUpsert {
	u.Set(githubapp.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdateClientID() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *GithubAppUpsert) SetClientSecret(v string) *GithubAppUpsert {
	u.Set(githubapp.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdateClientSecret() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldClientSecret)
	return u
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *GithubAppUpsert) SetWebhookSecret(v string) *GithubAppUpsert {
	u.Set(githubapp.FieldWebhookSecret, v)
	return u
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdateWebhookSecret() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldWebhookSecret)
	return u
}

// SetPrivateKey sets the "private_key" field.
func (u *GithubAppUpsert) SetPrivateKey(v string) *GithubAppUpsert {
	u.Set(githubapp.FieldPrivateKey, v)
	return u
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *GithubAppUpsert) UpdatePrivateKey() *GithubAppUpsert {
	u.SetExcluded(githubapp.FieldPrivateKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubAppUpsertOne) UpdateNewValues() *GithubAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(githubapp.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(githubapp.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GithubAppUpsertOne) Ignore() *GithubAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubAppUpsertOne) DoNothing() *GithubAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubAppCreate.OnConflict
// documentation for more info.
func (u *GithubAppUpsertOne) Update(set func(*GithubAppUpsert)) *GithubAppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubAppUpsertOne) SetUpdatedAt(v time.Time) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdateUpdatedAt() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *GithubAppUpsertOne) SetName(v string) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdateName() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *GithubAppUpsertOne) SetClientID(v string) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdateClientID() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *GithubAppUpsertOne) SetClientSecret(v string) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdateClientSecret() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateClientSecret()
	})
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *GithubAppUpsertOne) SetWebhookSecret(v string) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetWebhookSecret(v)
	})
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdateWebhookSecret() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateWebhookSecret()
	})
}

// SetPrivateKey sets the "private_key" field.
func (u *GithubAppUpsertOne) SetPrivateKey(v string) *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetPrivateKey(v)
	})
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *GithubAppUpsertOne) UpdatePrivateKey() *GithubAppUpsertOne {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdatePrivateKey()
	})
}

// Exec executes the query.
func (u *GithubAppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubAppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubAppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GithubAppUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GithubAppUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GithubAppCreateBulk is the builder for creating many GithubApp entities in bulk.
type GithubAppCreateBulk struct {
	config
	err      error
	builders []*GithubAppCreate
	conflict []sql.ConflictOption
}

// Save creates the GithubApp entities in the database.
func (gacb *GithubAppCreateBulk) Save(ctx context.Context) ([]*GithubApp, error) {
	if gacb.err != nil {
		return nil, gacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GithubApp, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubAppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GithubAppCreateBulk) SaveX(ctx context.Context) []*GithubApp {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GithubAppCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GithubAppCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubApp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubAppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gacb *GithubAppCreateBulk) OnConflict(opts ...sql.ConflictOption) *GithubAppUpsertBulk {
	gacb.conflict = opts
	return &GithubAppUpsertBulk{
		create: gacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gacb *GithubAppCreateBulk) OnConflictColumns(columns ...string) *GithubAppUpsertBulk {
	gacb.conflict = append(gacb.conflict, sql.ConflictColumns(columns...))
	return &GithubAppUpsertBulk{
		create: gacb,
	}
}

// GithubAppUpsertBulk is the builder for "upsert"-ing
// a bulk of GithubApp nodes.
type GithubAppUpsertBulk struct {
	create *GithubAppCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(githubapp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GithubAppUpsertBulk) UpdateNewValues() *GithubAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(githubapp.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(githubapp.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubApp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GithubAppUpsertBulk) Ignore() *GithubAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubAppUpsertBulk) DoNothing() *GithubAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubAppCreateBulk.OnConflict
// documentation for more info.
func (u *GithubAppUpsertBulk) Update(set func(*GithubAppUpsert)) *GithubAppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubAppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubAppUpsertBulk) SetUpdatedAt(v time.Time) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdateUpdatedAt() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *GithubAppUpsertBulk) SetName(v string) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdateName() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *GithubAppUpsertBulk) SetClientID(v string) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdateClientID() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *GithubAppUpsertBulk) SetClientSecret(v string) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdateClientSecret() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateClientSecret()
	})
}

// SetWebhookSecret sets the "webhook_secret" field.
func (u *GithubAppUpsertBulk) SetWebhookSecret(v string) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetWebhookSecret(v)
	})
}

// UpdateWebhookSecret sets the "webhook_secret" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdateWebhookSecret() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdateWebhookSecret()
	})
}

// SetPrivateKey sets the "private_key" field.
func (u *GithubAppUpsertBulk) SetPrivateKey(v string) *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.SetPrivateKey(v)
	})
}

// UpdatePrivateKey sets the "private_key" field to the value that was provided on create.
func (u *GithubAppUpsertBulk) UpdatePrivateKey() *GithubAppUpsertBulk {
	return u.Update(func(s *GithubAppUpsert) {
		s.UpdatePrivateKey()
	})
}

// Exec executes the query.
func (u *GithubAppUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GithubAppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubAppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubAppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
