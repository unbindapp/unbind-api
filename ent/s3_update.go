// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/s3"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
	"github.com/unbindapp/unbind-api/ent/team"
)

// S3Update is the builder for updating S3 entities.
type S3Update struct {
	config
	hooks     []Hook
	mutation  *S3Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the S3Update builder.
func (s *S3Update) Where(ps ...predicate.S3) *S3Update {
	s.mutation.Where(ps...)
	return s
}

// SetUpdatedAt sets the "updated_at" field.
func (s *S3Update) SetUpdatedAt(t time.Time) *S3Update {
	s.mutation.SetUpdatedAt(t)
	return s
}

// SetName sets the "name" field.
func (s *S3Update) SetName(value string) *S3Update {
	s.mutation.SetName(value)
	return s
}

// SetNillableName sets the "name" field if the given value is not nil.
func (s *S3Update) SetNillableName(value *string) *S3Update {
	if value != nil {
		s.SetName(*value)
	}
	return s
}

// SetEndpoint sets the "endpoint" field.
func (s *S3Update) SetEndpoint(value string) *S3Update {
	s.mutation.SetEndpoint(value)
	return s
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (s *S3Update) SetNillableEndpoint(value *string) *S3Update {
	if value != nil {
		s.SetEndpoint(*value)
	}
	return s
}

// SetRegion sets the "region" field.
func (s *S3Update) SetRegion(value string) *S3Update {
	s.mutation.SetRegion(value)
	return s
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (s *S3Update) SetNillableRegion(value *string) *S3Update {
	if value != nil {
		s.SetRegion(*value)
	}
	return s
}

// SetForcePathStyle sets the "force_path_style" field.
func (s *S3Update) SetForcePathStyle(b bool) *S3Update {
	s.mutation.SetForcePathStyle(b)
	return s
}

// SetNillableForcePathStyle sets the "force_path_style" field if the given value is not nil.
func (s *S3Update) SetNillableForcePathStyle(b *bool) *S3Update {
	if b != nil {
		s.SetForcePathStyle(*b)
	}
	return s
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (s *S3Update) SetKubernetesSecret(value string) *S3Update {
	s.mutation.SetKubernetesSecret(value)
	return s
}

// SetNillableKubernetesSecret sets the "kubernetes_secret" field if the given value is not nil.
func (s *S3Update) SetNillableKubernetesSecret(value *string) *S3Update {
	if value != nil {
		s.SetKubernetesSecret(*value)
	}
	return s
}

// SetTeamID sets the "team_id" field.
func (s *S3Update) SetTeamID(u uuid.UUID) *S3Update {
	s.mutation.SetTeamID(u)
	return s
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (s *S3Update) SetNillableTeamID(u *uuid.UUID) *S3Update {
	if u != nil {
		s.SetTeamID(*u)
	}
	return s
}

// SetTeam sets the "team" edge to the Team entity.
func (s *S3Update) SetTeam(t *Team) *S3Update {
	return s.SetTeamID(t.ID)
}

// AddServiceBackupSourceIDs adds the "service_backup_source" edge to the ServiceConfig entity by IDs.
func (s *S3Update) AddServiceBackupSourceIDs(ids ...uuid.UUID) *S3Update {
	s.mutation.AddServiceBackupSourceIDs(ids...)
	return s
}

// AddServiceBackupSource adds the "service_backup_source" edges to the ServiceConfig entity.
func (s *S3Update) AddServiceBackupSource(v ...*ServiceConfig) *S3Update {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return s.AddServiceBackupSourceIDs(ids...)
}

// Mutation returns the S3Mutation object of the builder.
func (s *S3Update) Mutation() *S3Mutation {
	return s.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (s *S3Update) ClearTeam() *S3Update {
	s.mutation.ClearTeam()
	return s
}

// ClearServiceBackupSource clears all "service_backup_source" edges to the ServiceConfig entity.
func (s *S3Update) ClearServiceBackupSource() *S3Update {
	s.mutation.ClearServiceBackupSource()
	return s
}

// RemoveServiceBackupSourceIDs removes the "service_backup_source" edge to ServiceConfig entities by IDs.
func (s *S3Update) RemoveServiceBackupSourceIDs(ids ...uuid.UUID) *S3Update {
	s.mutation.RemoveServiceBackupSourceIDs(ids...)
	return s
}

// RemoveServiceBackupSource removes "service_backup_source" edges to ServiceConfig entities.
func (s *S3Update) RemoveServiceBackupSource(v ...*ServiceConfig) *S3Update {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return s.RemoveServiceBackupSourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (s *S3Update) Save(ctx context.Context) (int, error) {
	s.defaults()
	return withHooks(ctx, s.sqlSave, s.mutation, s.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (s *S3Update) SaveX(ctx context.Context) int {
	affected, err := s.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (s *S3Update) Exec(ctx context.Context) error {
	_, err := s.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (s *S3Update) ExecX(ctx context.Context) {
	if err := s.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (s *S3Update) defaults() {
	if _, ok := s.mutation.UpdatedAt(); !ok {
		v := s3.UpdateDefaultUpdatedAt()
		s.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (s *S3Update) check() error {
	if v, ok := s.mutation.Name(); ok {
		if err := s3.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "S3.name": %w`, err)}
		}
	}
	if s.mutation.TeamCleared() && len(s.mutation.TeamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "S3.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (s *S3Update) Modify(modifiers ...func(u *sql.UpdateBuilder)) *S3Update {
	s.modifiers = append(s.modifiers, modifiers...)
	return s
}

func (s *S3Update) sqlSave(ctx context.Context) (n int, err error) {
	if err := s.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3.Table, s3.Columns, sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID))
	if ps := s.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := s.mutation.UpdatedAt(); ok {
		_spec.SetField(s3.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := s.mutation.Name(); ok {
		_spec.SetField(s3.FieldName, field.TypeString, value)
	}
	if value, ok := s.mutation.Endpoint(); ok {
		_spec.SetField(s3.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := s.mutation.Region(); ok {
		_spec.SetField(s3.FieldRegion, field.TypeString, value)
	}
	if value, ok := s.mutation.ForcePathStyle(); ok {
		_spec.SetField(s3.FieldForcePathStyle, field.TypeBool, value)
	}
	if value, ok := s.mutation.KubernetesSecret(); ok {
		_spec.SetField(s3.FieldKubernetesSecret, field.TypeString, value)
	}
	if s.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3.TeamTable,
			Columns: []string{s3.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := s.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3.TeamTable,
			Columns: []string{s3.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if s.mutation.ServiceBackupSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := s.mutation.RemovedServiceBackupSourceIDs(); len(nodes) > 0 && !s.mutation.ServiceBackupSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := s.mutation.ServiceBackupSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(s.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, s.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	s.mutation.done = true
	return n, nil
}

// S3UpdateOne is the builder for updating a single S3 entity.
type S3UpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *S3Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (so *S3UpdateOne) SetUpdatedAt(t time.Time) *S3UpdateOne {
	so.mutation.SetUpdatedAt(t)
	return so
}

// SetName sets the "name" field.
func (so *S3UpdateOne) SetName(s string) *S3UpdateOne {
	so.mutation.SetName(s)
	return so
}

// SetNillableName sets the "name" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableName(s *string) *S3UpdateOne {
	if s != nil {
		so.SetName(*s)
	}
	return so
}

// SetEndpoint sets the "endpoint" field.
func (so *S3UpdateOne) SetEndpoint(s string) *S3UpdateOne {
	so.mutation.SetEndpoint(s)
	return so
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableEndpoint(s *string) *S3UpdateOne {
	if s != nil {
		so.SetEndpoint(*s)
	}
	return so
}

// SetRegion sets the "region" field.
func (so *S3UpdateOne) SetRegion(s string) *S3UpdateOne {
	so.mutation.SetRegion(s)
	return so
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableRegion(s *string) *S3UpdateOne {
	if s != nil {
		so.SetRegion(*s)
	}
	return so
}

// SetForcePathStyle sets the "force_path_style" field.
func (so *S3UpdateOne) SetForcePathStyle(b bool) *S3UpdateOne {
	so.mutation.SetForcePathStyle(b)
	return so
}

// SetNillableForcePathStyle sets the "force_path_style" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableForcePathStyle(b *bool) *S3UpdateOne {
	if b != nil {
		so.SetForcePathStyle(*b)
	}
	return so
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (so *S3UpdateOne) SetKubernetesSecret(s string) *S3UpdateOne {
	so.mutation.SetKubernetesSecret(s)
	return so
}

// SetNillableKubernetesSecret sets the "kubernetes_secret" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableKubernetesSecret(s *string) *S3UpdateOne {
	if s != nil {
		so.SetKubernetesSecret(*s)
	}
	return so
}

// SetTeamID sets the "team_id" field.
func (so *S3UpdateOne) SetTeamID(u uuid.UUID) *S3UpdateOne {
	so.mutation.SetTeamID(u)
	return so
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (so *S3UpdateOne) SetNillableTeamID(u *uuid.UUID) *S3UpdateOne {
	if u != nil {
		so.SetTeamID(*u)
	}
	return so
}

// SetTeam sets the "team" edge to the Team entity.
func (so *S3UpdateOne) SetTeam(t *Team) *S3UpdateOne {
	return so.SetTeamID(t.ID)
}

// AddServiceBackupSourceIDs adds the "service_backup_source" edge to the ServiceConfig entity by IDs.
func (so *S3UpdateOne) AddServiceBackupSourceIDs(ids ...uuid.UUID) *S3UpdateOne {
	so.mutation.AddServiceBackupSourceIDs(ids...)
	return so
}

// AddServiceBackupSource adds the "service_backup_source" edges to the ServiceConfig entity.
func (so *S3UpdateOne) AddServiceBackupSource(s ...*ServiceConfig) *S3UpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return so.AddServiceBackupSourceIDs(ids...)
}

// Mutation returns the S3Mutation object of the builder.
func (so *S3UpdateOne) Mutation() *S3Mutation {
	return so.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (so *S3UpdateOne) ClearTeam() *S3UpdateOne {
	so.mutation.ClearTeam()
	return so
}

// ClearServiceBackupSource clears all "service_backup_source" edges to the ServiceConfig entity.
func (so *S3UpdateOne) ClearServiceBackupSource() *S3UpdateOne {
	so.mutation.ClearServiceBackupSource()
	return so
}

// RemoveServiceBackupSourceIDs removes the "service_backup_source" edge to ServiceConfig entities by IDs.
func (so *S3UpdateOne) RemoveServiceBackupSourceIDs(ids ...uuid.UUID) *S3UpdateOne {
	so.mutation.RemoveServiceBackupSourceIDs(ids...)
	return so
}

// RemoveServiceBackupSource removes "service_backup_source" edges to ServiceConfig entities.
func (so *S3UpdateOne) RemoveServiceBackupSource(s ...*ServiceConfig) *S3UpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return so.RemoveServiceBackupSourceIDs(ids...)
}

// Where appends a list predicates to the S3Update builder.
func (so *S3UpdateOne) Where(ps ...predicate.S3) *S3UpdateOne {
	so.mutation.Where(ps...)
	return so
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (so *S3UpdateOne) Select(field string, fields ...string) *S3UpdateOne {
	so.fields = append([]string{field}, fields...)
	return so
}

// Save executes the query and returns the updated S3 entity.
func (so *S3UpdateOne) Save(ctx context.Context) (*S3, error) {
	so.defaults()
	return withHooks(ctx, so.sqlSave, so.mutation, so.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (so *S3UpdateOne) SaveX(ctx context.Context) *S3 {
	node, err := so.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (so *S3UpdateOne) Exec(ctx context.Context) error {
	_, err := so.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (so *S3UpdateOne) ExecX(ctx context.Context) {
	if err := so.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (so *S3UpdateOne) defaults() {
	if _, ok := so.mutation.UpdatedAt(); !ok {
		v := s3.UpdateDefaultUpdatedAt()
		so.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (so *S3UpdateOne) check() error {
	if v, ok := so.mutation.Name(); ok {
		if err := s3.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "S3.name": %w`, err)}
		}
	}
	if so.mutation.TeamCleared() && len(so.mutation.TeamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "S3.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (so *S3UpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *S3UpdateOne {
	so.modifiers = append(so.modifiers, modifiers...)
	return so
}

func (so *S3UpdateOne) sqlSave(ctx context.Context) (_node *S3, err error) {
	if err := so.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(s3.Table, s3.Columns, sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID))
	id, ok := so.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "S3.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := so.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3.FieldID)
		for _, f := range fields {
			if !s3.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != s3.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := so.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := so.mutation.UpdatedAt(); ok {
		_spec.SetField(s3.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := so.mutation.Name(); ok {
		_spec.SetField(s3.FieldName, field.TypeString, value)
	}
	if value, ok := so.mutation.Endpoint(); ok {
		_spec.SetField(s3.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := so.mutation.Region(); ok {
		_spec.SetField(s3.FieldRegion, field.TypeString, value)
	}
	if value, ok := so.mutation.ForcePathStyle(); ok {
		_spec.SetField(s3.FieldForcePathStyle, field.TypeBool, value)
	}
	if value, ok := so.mutation.KubernetesSecret(); ok {
		_spec.SetField(s3.FieldKubernetesSecret, field.TypeString, value)
	}
	if so.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3.TeamTable,
			Columns: []string{s3.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := so.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   s3.TeamTable,
			Columns: []string{s3.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if so.mutation.ServiceBackupSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := so.mutation.RemovedServiceBackupSourceIDs(); len(nodes) > 0 && !so.mutation.ServiceBackupSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := so.mutation.ServiceBackupSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   s3.ServiceBackupSourceTable,
			Columns: []string{s3.ServiceBackupSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(so.modifiers...)
	_node = &S3{config: so.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, so.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	so.mutation.done = true
	return _node, nil
}
