// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/team"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// KubernetesName holds the value of the "kubernetes_name" field.
	KubernetesName string `json:"kubernetes_name,omitempty"`
	// Human-readable name
	Name string `json:"name,omitempty"`
	// Kubernetes namespace tied to this team
	Namespace string `json:"namespace,omitempty"`
	// Kubernetes secret for this team
	KubernetesSecret string `json:"kubernetes_secret,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges        TeamEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// S3Endpoints holds the value of the s3_endpoints edge.
	S3Endpoints []*S3 `json:"s3_endpoints,omitempty"`
	// Members holds the value of the members edge.
	Members []*User `json:"members,omitempty"`
	// TeamWebhooks holds the value of the team_webhooks edge.
	TeamWebhooks []*Webhook `json:"team_webhooks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// S3EndpointsOrErr returns the S3Endpoints value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) S3EndpointsOrErr() ([]*S3, error) {
	if e.loadedTypes[1] {
		return e.S3Endpoints, nil
	}
	return nil, &NotLoadedError{edge: "s3_endpoints"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) MembersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// TeamWebhooksOrErr returns the TeamWebhooks value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamWebhooksOrErr() ([]*Webhook, error) {
	if e.loadedTypes[3] {
		return e.TeamWebhooks, nil
	}
	return nil, &NotLoadedError{edge: "team_webhooks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldKubernetesName, team.FieldName, team.FieldNamespace, team.FieldKubernetesSecret, team.FieldDescription:
			values[i] = new(sql.NullString)
		case team.FieldCreatedAt, team.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case team.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case team.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case team.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case team.FieldKubernetesName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubernetes_name", values[i])
			} else if value.Valid {
				t.KubernetesName = value.String
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case team.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				t.Namespace = value.String
			}
		case team.FieldKubernetesSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubernetes_secret", values[i])
			} else if value.Valid {
				t.KubernetesSecret = value.String
			}
		case team.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryProjects queries the "projects" edge of the Team entity.
func (t *Team) QueryProjects() *ProjectQuery {
	return NewTeamClient(t.config).QueryProjects(t)
}

// QueryS3Endpoints queries the "s3_endpoints" edge of the Team entity.
func (t *Team) QueryS3Endpoints() *S3Query {
	return NewTeamClient(t.config).QueryS3Endpoints(t)
}

// QueryMembers queries the "members" edge of the Team entity.
func (t *Team) QueryMembers() *UserQuery {
	return NewTeamClient(t.config).QueryMembers(t)
}

// QueryTeamWebhooks queries the "team_webhooks" edge of the Team entity.
func (t *Team) QueryTeamWebhooks() *WebhookQuery {
	return NewTeamClient(t.config).QueryTeamWebhooks(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kubernetes_name=")
	builder.WriteString(t.KubernetesName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(t.Namespace)
	builder.WriteString(", ")
	builder.WriteString("kubernetes_secret=")
	builder.WriteString(t.KubernetesSecret)
	builder.WriteString(", ")
	if v := t.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
