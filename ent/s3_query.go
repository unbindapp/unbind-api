// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/s3"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
	"github.com/unbindapp/unbind-api/ent/team"
)

// S3Query is the builder for querying S3 entities.
type S3Query struct {
	config
	ctx                     *QueryContext
	order                   []s3.OrderOption
	inters                  []Interceptor
	predicates              []predicate.S3
	withTeam                *TeamQuery
	withServiceBackupSource *ServiceConfigQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the S3Query builder.
func (s *S3Query) Where(ps ...predicate.S3) *S3Query {
	s.predicates = append(s.predicates, ps...)
	return s
}

// Limit the number of records to be returned by this query.
func (s *S3Query) Limit(limit int) *S3Query {
	s.ctx.Limit = &limit
	return s
}

// Offset to start from.
func (s *S3Query) Offset(offset int) *S3Query {
	s.ctx.Offset = &offset
	return s
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (s *S3Query) Unique(unique bool) *S3Query {
	s.ctx.Unique = &unique
	return s
}

// Order specifies how the records should be ordered.
func (s *S3Query) Order(o ...s3.OrderOption) *S3Query {
	s.order = append(s.order, o...)
	return s
}

// QueryTeam chains the current query on the "team" edge.
func (s *S3Query) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: s.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := s.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := s.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(s3.Table, s3.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, s3.TeamTable, s3.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(s.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceBackupSource chains the current query on the "service_backup_source" edge.
func (s *S3Query) QueryServiceBackupSource() *ServiceConfigQuery {
	query := (&ServiceConfigClient{config: s.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := s.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := s.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(s3.Table, s3.FieldID, selector),
			sqlgraph.To(serviceconfig.Table, serviceconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, s3.ServiceBackupSourceTable, s3.ServiceBackupSourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(s.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first S3 entity from the query.
// Returns a *NotFoundError when no S3 was found.
func (s *S3Query) First(ctx context.Context) (*S3, error) {
	nodes, err := s.Limit(1).All(setContextOp(ctx, s.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{s3.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (s *S3Query) FirstX(ctx context.Context) *S3 {
	node, err := s.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first S3 ID from the query.
// Returns a *NotFoundError when no S3 ID was found.
func (s *S3Query) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = s.Limit(1).IDs(setContextOp(ctx, s.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{s3.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (s *S3Query) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := s.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single S3 entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one S3 entity is found.
// Returns a *NotFoundError when no S3 entities are found.
func (s *S3Query) Only(ctx context.Context) (*S3, error) {
	nodes, err := s.Limit(2).All(setContextOp(ctx, s.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{s3.Label}
	default:
		return nil, &NotSingularError{s3.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (s *S3Query) OnlyX(ctx context.Context) *S3 {
	node, err := s.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only S3 ID in the query.
// Returns a *NotSingularError when more than one S3 ID is found.
// Returns a *NotFoundError when no entities are found.
func (s *S3Query) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = s.Limit(2).IDs(setContextOp(ctx, s.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{s3.Label}
	default:
		err = &NotSingularError{s3.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (s *S3Query) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := s.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of S3s.
func (s *S3Query) All(ctx context.Context) ([]*S3, error) {
	ctx = setContextOp(ctx, s.ctx, ent.OpQueryAll)
	if err := s.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*S3, *S3Query]()
	return withInterceptors[[]*S3](ctx, s, qr, s.inters)
}

// AllX is like All, but panics if an error occurs.
func (s *S3Query) AllX(ctx context.Context) []*S3 {
	nodes, err := s.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of S3 IDs.
func (s *S3Query) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if s.ctx.Unique == nil && s.path != nil {
		s.Unique(true)
	}
	ctx = setContextOp(ctx, s.ctx, ent.OpQueryIDs)
	if err = s.Select(s3.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (s *S3Query) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := s.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (s *S3Query) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, s.ctx, ent.OpQueryCount)
	if err := s.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, s, querierCount[*S3Query](), s.inters)
}

// CountX is like Count, but panics if an error occurs.
func (s *S3Query) CountX(ctx context.Context) int {
	count, err := s.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (s *S3Query) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, s.ctx, ent.OpQueryExist)
	switch _, err := s.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (s *S3Query) ExistX(ctx context.Context) bool {
	exist, err := s.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the S3Query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (s *S3Query) Clone() *S3Query {
	if s == nil {
		return nil
	}
	return &S3Query{
		config:                  s.config,
		ctx:                     s.ctx.Clone(),
		order:                   append([]s3.OrderOption{}, s.order...),
		inters:                  append([]Interceptor{}, s.inters...),
		predicates:              append([]predicate.S3{}, s.predicates...),
		withTeam:                s.withTeam.Clone(),
		withServiceBackupSource: s.withServiceBackupSource.Clone(),
		// clone intermediate query.
		sql:       s.sql.Clone(),
		path:      s.path,
		modifiers: append([]func(*sql.Selector){}, s.modifiers...),
	}
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (s *S3Query) WithTeam(opts ...func(*TeamQuery)) *S3Query {
	query := (&TeamClient{config: s.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	s.withTeam = query
	return s
}

// WithServiceBackupSource tells the query-builder to eager-load the nodes that are connected to
// the "service_backup_source" edge. The optional arguments are used to configure the query builder of the edge.
func (s *S3Query) WithServiceBackupSource(opts ...func(*ServiceConfigQuery)) *S3Query {
	query := (&ServiceConfigClient{config: s.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	s.withServiceBackupSource = query
	return s
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.S3.Query().
//		GroupBy(s3.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (s *S3Query) GroupBy(field string, fields ...string) *S3GroupBy {
	s.ctx.Fields = append([]string{field}, fields...)
	grbuild := &S3GroupBy{build: s}
	grbuild.flds = &s.ctx.Fields
	grbuild.label = s3.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.S3.Query().
//		Select(s3.FieldCreatedAt).
//		Scan(ctx, &v)
func (s *S3Query) Select(fields ...string) *S3Select {
	s.ctx.Fields = append(s.ctx.Fields, fields...)
	sbuild := &S3Select{S3Query: s}
	sbuild.label = s3.Label
	sbuild.flds, sbuild.scan = &s.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a S3Select configured with the given aggregations.
func (s *S3Query) Aggregate(fns ...AggregateFunc) *S3Select {
	return s.Select().Aggregate(fns...)
}

func (s *S3Query) prepareQuery(ctx context.Context) error {
	for _, inter := range s.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, s); err != nil {
				return err
			}
		}
	}
	for _, f := range s.ctx.Fields {
		if !s3.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if s.path != nil {
		prev, err := s.path(ctx)
		if err != nil {
			return err
		}
		s.sql = prev
	}
	return nil
}

func (s *S3Query) sqlAll(ctx context.Context, hooks ...queryHook) ([]*S3, error) {
	var (
		nodes       = []*S3{}
		_spec       = s.querySpec()
		loadedTypes = [2]bool{
			s.withTeam != nil,
			s.withServiceBackupSource != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*S3).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &S3{config: s.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(s.modifiers) > 0 {
		_spec.Modifiers = s.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, s.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := s.withTeam; query != nil {
		if err := s.loadTeam(ctx, query, nodes, nil,
			func(n *S3, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := s.withServiceBackupSource; query != nil {
		if err := s.loadServiceBackupSource(ctx, query, nodes,
			func(n *S3) { n.Edges.ServiceBackupSource = []*ServiceConfig{} },
			func(n *S3, e *ServiceConfig) { n.Edges.ServiceBackupSource = append(n.Edges.ServiceBackupSource, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (s *S3Query) loadTeam(ctx context.Context, query *TeamQuery, nodes []*S3, init func(*S3), assign func(*S3, *Team)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*S3)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (s *S3Query) loadServiceBackupSource(ctx context.Context, query *ServiceConfigQuery, nodes []*S3, init func(*S3), assign func(*S3, *ServiceConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*S3)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(serviceconfig.FieldS3BackupSourceID)
	}
	query.Where(predicate.ServiceConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(s3.ServiceBackupSourceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.S3BackupSourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "s3_backup_source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "s3_backup_source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (s *S3Query) sqlCount(ctx context.Context) (int, error) {
	_spec := s.querySpec()
	if len(s.modifiers) > 0 {
		_spec.Modifiers = s.modifiers
	}
	_spec.Node.Columns = s.ctx.Fields
	if len(s.ctx.Fields) > 0 {
		_spec.Unique = s.ctx.Unique != nil && *s.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, s.driver, _spec)
}

func (s *S3Query) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(s3.Table, s3.Columns, sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID))
	_spec.From = s.sql
	if unique := s.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if s.path != nil {
		_spec.Unique = true
	}
	if fields := s.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3.FieldID)
		for i := range fields {
			if fields[i] != s3.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if s.withTeam != nil {
			_spec.Node.AddColumnOnce(s3.FieldTeamID)
		}
	}
	if ps := s.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := s.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := s.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := s.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (s *S3Query) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(s.driver.Dialect())
	t1 := builder.Table(s3.Table)
	columns := s.ctx.Fields
	if len(columns) == 0 {
		columns = s3.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if s.sql != nil {
		selector = s.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if s.ctx.Unique != nil && *s.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range s.modifiers {
		m(selector)
	}
	for _, p := range s.predicates {
		p(selector)
	}
	for _, p := range s.order {
		p(selector)
	}
	if offset := s.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := s.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (s *S3Query) Modify(modifiers ...func(s *sql.Selector)) *S3Select {
	s.modifiers = append(s.modifiers, modifiers...)
	return s.Select()
}

// S3GroupBy is the group-by builder for S3 entities.
type S3GroupBy struct {
	selector
	build *S3Query
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sb *S3GroupBy) Aggregate(fns ...AggregateFunc) *S3GroupBy {
	sb.fns = append(sb.fns, fns...)
	return sb
}

// Scan applies the selector query and scans the result into the given value.
func (sb *S3GroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sb.build.ctx, ent.OpQueryGroupBy)
	if err := sb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*S3Query, *S3GroupBy](ctx, sb.build, sb, sb.build.inters, v)
}

func (sb *S3GroupBy) sqlScan(ctx context.Context, root *S3Query, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sb.fns))
	for _, fn := range sb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sb.flds)+len(sb.fns))
		for _, f := range *sb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// S3Select is the builder for selecting fields of S3 entities.
type S3Select struct {
	*S3Query
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (s *S3Select) Aggregate(fns ...AggregateFunc) *S3Select {
	s.fns = append(s.fns, fns...)
	return s
}

// Scan applies the selector query and scans the result into the given value.
func (s *S3Select) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, s.ctx, ent.OpQuerySelect)
	if err := s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*S3Query, *S3Select](ctx, s.S3Query, s, s.inters, v)
}

func (s *S3Select) sqlScan(ctx context.Context, root *S3Query, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(s.fns))
	for _, fn := range s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (s *S3Select) Modify(modifiers ...func(s *sql.Selector)) *S3Select {
	s.modifiers = append(s.modifiers, modifiers...)
	return s
}
