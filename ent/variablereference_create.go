// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/variablereference"
)

// VariableReferenceCreate is the builder for creating a VariableReference entity.
type VariableReferenceCreate struct {
	config
	mutation *VariableReferenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vrc *VariableReferenceCreate) SetCreatedAt(t time.Time) *VariableReferenceCreate {
	vrc.mutation.SetCreatedAt(t)
	return vrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vrc *VariableReferenceCreate) SetNillableCreatedAt(t *time.Time) *VariableReferenceCreate {
	if t != nil {
		vrc.SetCreatedAt(*t)
	}
	return vrc
}

// SetUpdatedAt sets the "updated_at" field.
func (vrc *VariableReferenceCreate) SetUpdatedAt(t time.Time) *VariableReferenceCreate {
	vrc.mutation.SetUpdatedAt(t)
	return vrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vrc *VariableReferenceCreate) SetNillableUpdatedAt(t *time.Time) *VariableReferenceCreate {
	if t != nil {
		vrc.SetUpdatedAt(*t)
	}
	return vrc
}

// SetTargetServiceID sets the "target_service_id" field.
func (vrc *VariableReferenceCreate) SetTargetServiceID(u uuid.UUID) *VariableReferenceCreate {
	vrc.mutation.SetTargetServiceID(u)
	return vrc
}

// SetTargetName sets the "target_name" field.
func (vrc *VariableReferenceCreate) SetTargetName(s string) *VariableReferenceCreate {
	vrc.mutation.SetTargetName(s)
	return vrc
}

// SetSources sets the "sources" field.
func (vrc *VariableReferenceCreate) SetSources(srs []schema.VariableReferenceSource) *VariableReferenceCreate {
	vrc.mutation.SetSources(srs)
	return vrc
}

// SetValueTemplate sets the "value_template" field.
func (vrc *VariableReferenceCreate) SetValueTemplate(s string) *VariableReferenceCreate {
	vrc.mutation.SetValueTemplate(s)
	return vrc
}

// SetError sets the "error" field.
func (vrc *VariableReferenceCreate) SetError(s string) *VariableReferenceCreate {
	vrc.mutation.SetError(s)
	return vrc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (vrc *VariableReferenceCreate) SetNillableError(s *string) *VariableReferenceCreate {
	if s != nil {
		vrc.SetError(*s)
	}
	return vrc
}

// SetID sets the "id" field.
func (vrc *VariableReferenceCreate) SetID(u uuid.UUID) *VariableReferenceCreate {
	vrc.mutation.SetID(u)
	return vrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vrc *VariableReferenceCreate) SetNillableID(u *uuid.UUID) *VariableReferenceCreate {
	if u != nil {
		vrc.SetID(*u)
	}
	return vrc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (vrc *VariableReferenceCreate) SetServiceID(id uuid.UUID) *VariableReferenceCreate {
	vrc.mutation.SetServiceID(id)
	return vrc
}

// SetService sets the "service" edge to the Service entity.
func (vrc *VariableReferenceCreate) SetService(s *Service) *VariableReferenceCreate {
	return vrc.SetServiceID(s.ID)
}

// Mutation returns the VariableReferenceMutation object of the builder.
func (vrc *VariableReferenceCreate) Mutation() *VariableReferenceMutation {
	return vrc.mutation
}

// Save creates the VariableReference in the database.
func (vrc *VariableReferenceCreate) Save(ctx context.Context) (*VariableReference, error) {
	vrc.defaults()
	return withHooks(ctx, vrc.sqlSave, vrc.mutation, vrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VariableReferenceCreate) SaveX(ctx context.Context) *VariableReference {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrc *VariableReferenceCreate) Exec(ctx context.Context) error {
	_, err := vrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrc *VariableReferenceCreate) ExecX(ctx context.Context) {
	if err := vrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vrc *VariableReferenceCreate) defaults() {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		v := variablereference.DefaultCreatedAt()
		vrc.mutation.SetCreatedAt(v)
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		v := variablereference.DefaultUpdatedAt()
		vrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vrc.mutation.ID(); !ok {
		v := variablereference.DefaultID()
		vrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VariableReferenceCreate) check() error {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VariableReference.created_at"`)}
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VariableReference.updated_at"`)}
	}
	if _, ok := vrc.mutation.TargetServiceID(); !ok {
		return &ValidationError{Name: "target_service_id", err: errors.New(`ent: missing required field "VariableReference.target_service_id"`)}
	}
	if _, ok := vrc.mutation.TargetName(); !ok {
		return &ValidationError{Name: "target_name", err: errors.New(`ent: missing required field "VariableReference.target_name"`)}
	}
	if _, ok := vrc.mutation.Sources(); !ok {
		return &ValidationError{Name: "sources", err: errors.New(`ent: missing required field "VariableReference.sources"`)}
	}
	if _, ok := vrc.mutation.ValueTemplate(); !ok {
		return &ValidationError{Name: "value_template", err: errors.New(`ent: missing required field "VariableReference.value_template"`)}
	}
	if len(vrc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "VariableReference.service"`)}
	}
	return nil
}

func (vrc *VariableReferenceCreate) sqlSave(ctx context.Context) (*VariableReference, error) {
	if err := vrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vrc.mutation.id = &_node.ID
	vrc.mutation.done = true
	return _node, nil
}

func (vrc *VariableReferenceCreate) createSpec() (*VariableReference, *sqlgraph.CreateSpec) {
	var (
		_node = &VariableReference{config: vrc.config}
		_spec = sqlgraph.NewCreateSpec(variablereference.Table, sqlgraph.NewFieldSpec(variablereference.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = vrc.conflict
	if id, ok := vrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vrc.mutation.CreatedAt(); ok {
		_spec.SetField(variablereference.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vrc.mutation.UpdatedAt(); ok {
		_spec.SetField(variablereference.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vrc.mutation.TargetName(); ok {
		_spec.SetField(variablereference.FieldTargetName, field.TypeString, value)
		_node.TargetName = value
	}
	if value, ok := vrc.mutation.Sources(); ok {
		_spec.SetField(variablereference.FieldSources, field.TypeJSON, value)
		_node.Sources = value
	}
	if value, ok := vrc.mutation.ValueTemplate(); ok {
		_spec.SetField(variablereference.FieldValueTemplate, field.TypeString, value)
		_node.ValueTemplate = value
	}
	if value, ok := vrc.mutation.Error(); ok {
		_spec.SetField(variablereference.FieldError, field.TypeString, value)
		_node.Error = &value
	}
	if nodes := vrc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variablereference.ServiceTable,
			Columns: []string{variablereference.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VariableReference.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableReferenceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrc *VariableReferenceCreate) OnConflict(opts ...sql.ConflictOption) *VariableReferenceUpsertOne {
	vrc.conflict = opts
	return &VariableReferenceUpsertOne{
		create: vrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrc *VariableReferenceCreate) OnConflictColumns(columns ...string) *VariableReferenceUpsertOne {
	vrc.conflict = append(vrc.conflict, sql.ConflictColumns(columns...))
	return &VariableReferenceUpsertOne{
		create: vrc,
	}
}

type (
	// VariableReferenceUpsertOne is the builder for "upsert"-ing
	//  one VariableReference node.
	VariableReferenceUpsertOne struct {
		create *VariableReferenceCreate
	}

	// VariableReferenceUpsert is the "OnConflict" setter.
	VariableReferenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VariableReferenceUpsert) SetUpdatedAt(v time.Time) *VariableReferenceUpsert {
	u.Set(variablereference.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateUpdatedAt() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldUpdatedAt)
	return u
}

// SetTargetServiceID sets the "target_service_id" field.
func (u *VariableReferenceUpsert) SetTargetServiceID(v uuid.UUID) *VariableReferenceUpsert {
	u.Set(variablereference.FieldTargetServiceID, v)
	return u
}

// UpdateTargetServiceID sets the "target_service_id" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateTargetServiceID() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldTargetServiceID)
	return u
}

// SetTargetName sets the "target_name" field.
func (u *VariableReferenceUpsert) SetTargetName(v string) *VariableReferenceUpsert {
	u.Set(variablereference.FieldTargetName, v)
	return u
}

// UpdateTargetName sets the "target_name" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateTargetName() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldTargetName)
	return u
}

// SetSources sets the "sources" field.
func (u *VariableReferenceUpsert) SetSources(v []schema.VariableReferenceSource) *VariableReferenceUpsert {
	u.Set(variablereference.FieldSources, v)
	return u
}

// UpdateSources sets the "sources" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateSources() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldSources)
	return u
}

// SetValueTemplate sets the "value_template" field.
func (u *VariableReferenceUpsert) SetValueTemplate(v string) *VariableReferenceUpsert {
	u.Set(variablereference.FieldValueTemplate, v)
	return u
}

// UpdateValueTemplate sets the "value_template" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateValueTemplate() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldValueTemplate)
	return u
}

// SetError sets the "error" field.
func (u *VariableReferenceUpsert) SetError(v string) *VariableReferenceUpsert {
	u.Set(variablereference.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *VariableReferenceUpsert) UpdateError() *VariableReferenceUpsert {
	u.SetExcluded(variablereference.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *VariableReferenceUpsert) ClearError() *VariableReferenceUpsert {
	u.SetNull(variablereference.FieldError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(variablereference.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VariableReferenceUpsertOne) UpdateNewValues() *VariableReferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(variablereference.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(variablereference.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VariableReferenceUpsertOne) Ignore() *VariableReferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableReferenceUpsertOne) DoNothing() *VariableReferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableReferenceCreate.OnConflict
// documentation for more info.
func (u *VariableReferenceUpsertOne) Update(set func(*VariableReferenceUpsert)) *VariableReferenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableReferenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VariableReferenceUpsertOne) SetUpdatedAt(v time.Time) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateUpdatedAt() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTargetServiceID sets the "target_service_id" field.
func (u *VariableReferenceUpsertOne) SetTargetServiceID(v uuid.UUID) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetTargetServiceID(v)
	})
}

// UpdateTargetServiceID sets the "target_service_id" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateTargetServiceID() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateTargetServiceID()
	})
}

// SetTargetName sets the "target_name" field.
func (u *VariableReferenceUpsertOne) SetTargetName(v string) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetTargetName(v)
	})
}

// UpdateTargetName sets the "target_name" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateTargetName() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateTargetName()
	})
}

// SetSources sets the "sources" field.
func (u *VariableReferenceUpsertOne) SetSources(v []schema.VariableReferenceSource) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetSources(v)
	})
}

// UpdateSources sets the "sources" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateSources() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateSources()
	})
}

// SetValueTemplate sets the "value_template" field.
func (u *VariableReferenceUpsertOne) SetValueTemplate(v string) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetValueTemplate(v)
	})
}

// UpdateValueTemplate sets the "value_template" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateValueTemplate() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateValueTemplate()
	})
}

// SetError sets the "error" field.
func (u *VariableReferenceUpsertOne) SetError(v string) *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *VariableReferenceUpsertOne) UpdateError() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *VariableReferenceUpsertOne) ClearError() *VariableReferenceUpsertOne {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *VariableReferenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VariableReferenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableReferenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VariableReferenceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VariableReferenceUpsertOne.ID is not supported by MySQL driver. Use VariableReferenceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VariableReferenceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VariableReferenceCreateBulk is the builder for creating many VariableReference entities in bulk.
type VariableReferenceCreateBulk struct {
	config
	err      error
	builders []*VariableReferenceCreate
	conflict []sql.ConflictOption
}

// Save creates the VariableReference entities in the database.
func (vrcb *VariableReferenceCreateBulk) Save(ctx context.Context) ([]*VariableReference, error) {
	if vrcb.err != nil {
		return nil, vrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VariableReference, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariableReferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VariableReferenceCreateBulk) SaveX(ctx context.Context) []*VariableReference {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrcb *VariableReferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := vrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrcb *VariableReferenceCreateBulk) ExecX(ctx context.Context) {
	if err := vrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VariableReference.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableReferenceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrcb *VariableReferenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *VariableReferenceUpsertBulk {
	vrcb.conflict = opts
	return &VariableReferenceUpsertBulk{
		create: vrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrcb *VariableReferenceCreateBulk) OnConflictColumns(columns ...string) *VariableReferenceUpsertBulk {
	vrcb.conflict = append(vrcb.conflict, sql.ConflictColumns(columns...))
	return &VariableReferenceUpsertBulk{
		create: vrcb,
	}
}

// VariableReferenceUpsertBulk is the builder for "upsert"-ing
// a bulk of VariableReference nodes.
type VariableReferenceUpsertBulk struct {
	create *VariableReferenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(variablereference.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VariableReferenceUpsertBulk) UpdateNewValues() *VariableReferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(variablereference.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(variablereference.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VariableReference.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VariableReferenceUpsertBulk) Ignore() *VariableReferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableReferenceUpsertBulk) DoNothing() *VariableReferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableReferenceCreateBulk.OnConflict
// documentation for more info.
func (u *VariableReferenceUpsertBulk) Update(set func(*VariableReferenceUpsert)) *VariableReferenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableReferenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VariableReferenceUpsertBulk) SetUpdatedAt(v time.Time) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateUpdatedAt() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTargetServiceID sets the "target_service_id" field.
func (u *VariableReferenceUpsertBulk) SetTargetServiceID(v uuid.UUID) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetTargetServiceID(v)
	})
}

// UpdateTargetServiceID sets the "target_service_id" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateTargetServiceID() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateTargetServiceID()
	})
}

// SetTargetName sets the "target_name" field.
func (u *VariableReferenceUpsertBulk) SetTargetName(v string) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetTargetName(v)
	})
}

// UpdateTargetName sets the "target_name" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateTargetName() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateTargetName()
	})
}

// SetSources sets the "sources" field.
func (u *VariableReferenceUpsertBulk) SetSources(v []schema.VariableReferenceSource) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetSources(v)
	})
}

// UpdateSources sets the "sources" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateSources() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateSources()
	})
}

// SetValueTemplate sets the "value_template" field.
func (u *VariableReferenceUpsertBulk) SetValueTemplate(v string) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetValueTemplate(v)
	})
}

// UpdateValueTemplate sets the "value_template" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateValueTemplate() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateValueTemplate()
	})
}

// SetError sets the "error" field.
func (u *VariableReferenceUpsertBulk) SetError(v string) *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *VariableReferenceUpsertBulk) UpdateError() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *VariableReferenceUpsertBulk) ClearError() *VariableReferenceUpsertBulk {
	return u.Update(func(s *VariableReferenceUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *VariableReferenceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VariableReferenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VariableReferenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableReferenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
