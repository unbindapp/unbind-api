// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/environment"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/servicegroup"
)

// ServiceGroupCreate is the builder for creating a ServiceGroup entity.
type ServiceGroupCreate struct {
	config
	mutation *ServiceGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sgc *ServiceGroupCreate) SetCreatedAt(t time.Time) *ServiceGroupCreate {
	sgc.mutation.SetCreatedAt(t)
	return sgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgc *ServiceGroupCreate) SetNillableCreatedAt(t *time.Time) *ServiceGroupCreate {
	if t != nil {
		sgc.SetCreatedAt(*t)
	}
	return sgc
}

// SetUpdatedAt sets the "updated_at" field.
func (sgc *ServiceGroupCreate) SetUpdatedAt(t time.Time) *ServiceGroupCreate {
	sgc.mutation.SetUpdatedAt(t)
	return sgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgc *ServiceGroupCreate) SetNillableUpdatedAt(t *time.Time) *ServiceGroupCreate {
	if t != nil {
		sgc.SetUpdatedAt(*t)
	}
	return sgc
}

// SetName sets the "name" field.
func (sgc *ServiceGroupCreate) SetName(s string) *ServiceGroupCreate {
	sgc.mutation.SetName(s)
	return sgc
}

// SetIcon sets the "icon" field.
func (sgc *ServiceGroupCreate) SetIcon(s string) *ServiceGroupCreate {
	sgc.mutation.SetIcon(s)
	return sgc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (sgc *ServiceGroupCreate) SetNillableIcon(s *string) *ServiceGroupCreate {
	if s != nil {
		sgc.SetIcon(*s)
	}
	return sgc
}

// SetDescription sets the "description" field.
func (sgc *ServiceGroupCreate) SetDescription(s string) *ServiceGroupCreate {
	sgc.mutation.SetDescription(s)
	return sgc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgc *ServiceGroupCreate) SetNillableDescription(s *string) *ServiceGroupCreate {
	if s != nil {
		sgc.SetDescription(*s)
	}
	return sgc
}

// SetEnvironmentID sets the "environment_id" field.
func (sgc *ServiceGroupCreate) SetEnvironmentID(u uuid.UUID) *ServiceGroupCreate {
	sgc.mutation.SetEnvironmentID(u)
	return sgc
}

// SetID sets the "id" field.
func (sgc *ServiceGroupCreate) SetID(u uuid.UUID) *ServiceGroupCreate {
	sgc.mutation.SetID(u)
	return sgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sgc *ServiceGroupCreate) SetNillableID(u *uuid.UUID) *ServiceGroupCreate {
	if u != nil {
		sgc.SetID(*u)
	}
	return sgc
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (sgc *ServiceGroupCreate) SetEnvironment(e *Environment) *ServiceGroupCreate {
	return sgc.SetEnvironmentID(e.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (sgc *ServiceGroupCreate) AddServiceIDs(ids ...uuid.UUID) *ServiceGroupCreate {
	sgc.mutation.AddServiceIDs(ids...)
	return sgc
}

// AddServices adds the "services" edges to the Service entity.
func (sgc *ServiceGroupCreate) AddServices(s ...*Service) *ServiceGroupCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgc.AddServiceIDs(ids...)
}

// Mutation returns the ServiceGroupMutation object of the builder.
func (sgc *ServiceGroupCreate) Mutation() *ServiceGroupMutation {
	return sgc.mutation
}

// Save creates the ServiceGroup in the database.
func (sgc *ServiceGroupCreate) Save(ctx context.Context) (*ServiceGroup, error) {
	sgc.defaults()
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *ServiceGroupCreate) SaveX(ctx context.Context) *ServiceGroup {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *ServiceGroupCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *ServiceGroupCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *ServiceGroupCreate) defaults() {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		v := servicegroup.DefaultCreatedAt()
		sgc.mutation.SetCreatedAt(v)
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		v := servicegroup.DefaultUpdatedAt()
		sgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sgc.mutation.ID(); !ok {
		v := servicegroup.DefaultID()
		sgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgc *ServiceGroupCreate) check() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceGroup.created_at"`)}
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceGroup.updated_at"`)}
	}
	if _, ok := sgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceGroup.name"`)}
	}
	if _, ok := sgc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`ent: missing required field "ServiceGroup.environment_id"`)}
	}
	if len(sgc.mutation.EnvironmentIDs()) == 0 {
		return &ValidationError{Name: "environment", err: errors.New(`ent: missing required edge "ServiceGroup.environment"`)}
	}
	return nil
}

func (sgc *ServiceGroupCreate) sqlSave(ctx context.Context) (*ServiceGroup, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *ServiceGroupCreate) createSpec() (*ServiceGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceGroup{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(servicegroup.Table, sqlgraph.NewFieldSpec(servicegroup.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sgc.conflict
	if id, ok := sgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sgc.mutation.CreatedAt(); ok {
		_spec.SetField(servicegroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sgc.mutation.UpdatedAt(); ok {
		_spec.SetField(servicegroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sgc.mutation.Name(); ok {
		_spec.SetField(servicegroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sgc.mutation.Icon(); ok {
		_spec.SetField(servicegroup.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := sgc.mutation.Description(); ok {
		_spec.SetField(servicegroup.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if nodes := sgc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicegroup.EnvironmentTable,
			Columns: []string{servicegroup.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceGroup.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgc *ServiceGroupCreate) OnConflict(opts ...sql.ConflictOption) *ServiceGroupUpsertOne {
	sgc.conflict = opts
	return &ServiceGroupUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *ServiceGroupCreate) OnConflictColumns(columns ...string) *ServiceGroupUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &ServiceGroupUpsertOne{
		create: sgc,
	}
}

type (
	// ServiceGroupUpsertOne is the builder for "upsert"-ing
	//  one ServiceGroup node.
	ServiceGroupUpsertOne struct {
		create *ServiceGroupCreate
	}

	// ServiceGroupUpsert is the "OnConflict" setter.
	ServiceGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceGroupUpsert) SetUpdatedAt(v time.Time) *ServiceGroupUpsert {
	u.Set(servicegroup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceGroupUpsert) UpdateUpdatedAt() *ServiceGroupUpsert {
	u.SetExcluded(servicegroup.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *ServiceGroupUpsert) SetName(v string) *ServiceGroupUpsert {
	u.Set(servicegroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceGroupUpsert) UpdateName() *ServiceGroupUpsert {
	u.SetExcluded(servicegroup.FieldName)
	return u
}

// SetIcon sets the "icon" field.
func (u *ServiceGroupUpsert) SetIcon(v string) *ServiceGroupUpsert {
	u.Set(servicegroup.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *ServiceGroupUpsert) UpdateIcon() *ServiceGroupUpsert {
	u.SetExcluded(servicegroup.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *ServiceGroupUpsert) ClearIcon() *ServiceGroupUpsert {
	u.SetNull(servicegroup.FieldIcon)
	return u
}

// SetDescription sets the "description" field.
func (u *ServiceGroupUpsert) SetDescription(v string) *ServiceGroupUpsert {
	u.Set(servicegroup.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceGroupUpsert) UpdateDescription() *ServiceGroupUpsert {
	u.SetExcluded(servicegroup.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceGroupUpsert) ClearDescription() *ServiceGroupUpsert {
	u.SetNull(servicegroup.FieldDescription)
	return u
}

// SetEnvironmentID sets the "environment_id" field.
func (u *ServiceGroupUpsert) SetEnvironmentID(v uuid.UUID) *ServiceGroupUpsert {
	u.Set(servicegroup.FieldEnvironmentID, v)
	return u
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *ServiceGroupUpsert) UpdateEnvironmentID() *ServiceGroupUpsert {
	u.SetExcluded(servicegroup.FieldEnvironmentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servicegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceGroupUpsertOne) UpdateNewValues() *ServiceGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(servicegroup.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(servicegroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceGroupUpsertOne) Ignore() *ServiceGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceGroupUpsertOne) DoNothing() *ServiceGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceGroupCreate.OnConflict
// documentation for more info.
func (u *ServiceGroupUpsertOne) Update(set func(*ServiceGroupUpsert)) *ServiceGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceGroupUpsertOne) SetUpdatedAt(v time.Time) *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceGroupUpsertOne) UpdateUpdatedAt() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *ServiceGroupUpsertOne) SetName(v string) *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceGroupUpsertOne) UpdateName() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *ServiceGroupUpsertOne) SetIcon(v string) *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *ServiceGroupUpsertOne) UpdateIcon() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *ServiceGroupUpsertOne) ClearIcon() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.ClearIcon()
	})
}

// SetDescription sets the "description" field.
func (u *ServiceGroupUpsertOne) SetDescription(v string) *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceGroupUpsertOne) UpdateDescription() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceGroupUpsertOne) ClearDescription() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.ClearDescription()
	})
}

// SetEnvironmentID sets the "environment_id" field.
func (u *ServiceGroupUpsertOne) SetEnvironmentID(v uuid.UUID) *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetEnvironmentID(v)
	})
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *ServiceGroupUpsertOne) UpdateEnvironmentID() *ServiceGroupUpsertOne {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateEnvironmentID()
	})
}

// Exec executes the query.
func (u *ServiceGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceGroupUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ServiceGroupUpsertOne.ID is not supported by MySQL driver. Use ServiceGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceGroupUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceGroupCreateBulk is the builder for creating many ServiceGroup entities in bulk.
type ServiceGroupCreateBulk struct {
	config
	err      error
	builders []*ServiceGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the ServiceGroup entities in the database.
func (sgcb *ServiceGroupCreateBulk) Save(ctx context.Context) ([]*ServiceGroup, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*ServiceGroup, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *ServiceGroupCreateBulk) SaveX(ctx context.Context) []*ServiceGroup {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *ServiceGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *ServiceGroupCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgcb *ServiceGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceGroupUpsertBulk {
	sgcb.conflict = opts
	return &ServiceGroupUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *ServiceGroupCreateBulk) OnConflictColumns(columns ...string) *ServiceGroupUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &ServiceGroupUpsertBulk{
		create: sgcb,
	}
}

// ServiceGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of ServiceGroup nodes.
type ServiceGroupUpsertBulk struct {
	create *ServiceGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servicegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceGroupUpsertBulk) UpdateNewValues() *ServiceGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(servicegroup.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(servicegroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceGroupUpsertBulk) Ignore() *ServiceGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceGroupUpsertBulk) DoNothing() *ServiceGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceGroupCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceGroupUpsertBulk) Update(set func(*ServiceGroupUpsert)) *ServiceGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceGroupUpsertBulk) SetUpdatedAt(v time.Time) *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceGroupUpsertBulk) UpdateUpdatedAt() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *ServiceGroupUpsertBulk) SetName(v string) *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceGroupUpsertBulk) UpdateName() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *ServiceGroupUpsertBulk) SetIcon(v string) *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *ServiceGroupUpsertBulk) UpdateIcon() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *ServiceGroupUpsertBulk) ClearIcon() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.ClearIcon()
	})
}

// SetDescription sets the "description" field.
func (u *ServiceGroupUpsertBulk) SetDescription(v string) *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceGroupUpsertBulk) UpdateDescription() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceGroupUpsertBulk) ClearDescription() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.ClearDescription()
	})
}

// SetEnvironmentID sets the "environment_id" field.
func (u *ServiceGroupUpsertBulk) SetEnvironmentID(v uuid.UUID) *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.SetEnvironmentID(v)
	})
}

// UpdateEnvironmentID sets the "environment_id" field to the value that was provided on create.
func (u *ServiceGroupUpsertBulk) UpdateEnvironmentID() *ServiceGroupUpsertBulk {
	return u.Update(func(s *ServiceGroupUpsert) {
		s.UpdateEnvironmentID()
	})
}

// Exec executes the query.
func (u *ServiceGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ServiceGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
