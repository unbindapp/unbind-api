// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/environment"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/servicegroup"
)

// ServiceGroupUpdate is the builder for updating ServiceGroup entities.
type ServiceGroupUpdate struct {
	config
	hooks     []Hook
	mutation  *ServiceGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServiceGroupUpdate builder.
func (sgu *ServiceGroupUpdate) Where(ps ...predicate.ServiceGroup) *ServiceGroupUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetUpdatedAt sets the "updated_at" field.
func (sgu *ServiceGroupUpdate) SetUpdatedAt(t time.Time) *ServiceGroupUpdate {
	sgu.mutation.SetUpdatedAt(t)
	return sgu
}

// SetName sets the "name" field.
func (sgu *ServiceGroupUpdate) SetName(s string) *ServiceGroupUpdate {
	sgu.mutation.SetName(s)
	return sgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sgu *ServiceGroupUpdate) SetNillableName(s *string) *ServiceGroupUpdate {
	if s != nil {
		sgu.SetName(*s)
	}
	return sgu
}

// SetDescription sets the "description" field.
func (sgu *ServiceGroupUpdate) SetDescription(s string) *ServiceGroupUpdate {
	sgu.mutation.SetDescription(s)
	return sgu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sgu *ServiceGroupUpdate) SetNillableDescription(s *string) *ServiceGroupUpdate {
	if s != nil {
		sgu.SetDescription(*s)
	}
	return sgu
}

// ClearDescription clears the value of the "description" field.
func (sgu *ServiceGroupUpdate) ClearDescription() *ServiceGroupUpdate {
	sgu.mutation.ClearDescription()
	return sgu
}

// SetEnvironmentID sets the "environment_id" field.
func (sgu *ServiceGroupUpdate) SetEnvironmentID(u uuid.UUID) *ServiceGroupUpdate {
	sgu.mutation.SetEnvironmentID(u)
	return sgu
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (sgu *ServiceGroupUpdate) SetNillableEnvironmentID(u *uuid.UUID) *ServiceGroupUpdate {
	if u != nil {
		sgu.SetEnvironmentID(*u)
	}
	return sgu
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (sgu *ServiceGroupUpdate) SetEnvironment(e *Environment) *ServiceGroupUpdate {
	return sgu.SetEnvironmentID(e.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (sgu *ServiceGroupUpdate) AddServiceIDs(ids ...uuid.UUID) *ServiceGroupUpdate {
	sgu.mutation.AddServiceIDs(ids...)
	return sgu
}

// AddServices adds the "services" edges to the Service entity.
func (sgu *ServiceGroupUpdate) AddServices(s ...*Service) *ServiceGroupUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.AddServiceIDs(ids...)
}

// Mutation returns the ServiceGroupMutation object of the builder.
func (sgu *ServiceGroupUpdate) Mutation() *ServiceGroupMutation {
	return sgu.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (sgu *ServiceGroupUpdate) ClearEnvironment() *ServiceGroupUpdate {
	sgu.mutation.ClearEnvironment()
	return sgu
}

// ClearServices clears all "services" edges to the Service entity.
func (sgu *ServiceGroupUpdate) ClearServices() *ServiceGroupUpdate {
	sgu.mutation.ClearServices()
	return sgu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (sgu *ServiceGroupUpdate) RemoveServiceIDs(ids ...uuid.UUID) *ServiceGroupUpdate {
	sgu.mutation.RemoveServiceIDs(ids...)
	return sgu
}

// RemoveServices removes "services" edges to Service entities.
func (sgu *ServiceGroupUpdate) RemoveServices(s ...*Service) *ServiceGroupUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *ServiceGroupUpdate) Save(ctx context.Context) (int, error) {
	sgu.defaults()
	return withHooks(ctx, sgu.sqlSave, sgu.mutation, sgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *ServiceGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *ServiceGroupUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *ServiceGroupUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgu *ServiceGroupUpdate) defaults() {
	if _, ok := sgu.mutation.UpdatedAt(); !ok {
		v := servicegroup.UpdateDefaultUpdatedAt()
		sgu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgu *ServiceGroupUpdate) check() error {
	if sgu.mutation.EnvironmentCleared() && len(sgu.mutation.EnvironmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceGroup.environment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sgu *ServiceGroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceGroupUpdate {
	sgu.modifiers = append(sgu.modifiers, modifiers...)
	return sgu
}

func (sgu *ServiceGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicegroup.Table, servicegroup.Columns, sqlgraph.NewFieldSpec(servicegroup.FieldID, field.TypeUUID))
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.UpdatedAt(); ok {
		_spec.SetField(servicegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sgu.mutation.Name(); ok {
		_spec.SetField(servicegroup.FieldName, field.TypeString, value)
	}
	if value, ok := sgu.mutation.Description(); ok {
		_spec.SetField(servicegroup.FieldDescription, field.TypeString, value)
	}
	if sgu.mutation.DescriptionCleared() {
		_spec.ClearField(servicegroup.FieldDescription, field.TypeString)
	}
	if sgu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicegroup.EnvironmentTable,
			Columns: []string{servicegroup.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicegroup.EnvironmentTable,
			Columns: []string{servicegroup.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !sgu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgu.mutation.done = true
	return n, nil
}

// ServiceGroupUpdateOne is the builder for updating a single ServiceGroup entity.
type ServiceGroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServiceGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sguo *ServiceGroupUpdateOne) SetUpdatedAt(t time.Time) *ServiceGroupUpdateOne {
	sguo.mutation.SetUpdatedAt(t)
	return sguo
}

// SetName sets the "name" field.
func (sguo *ServiceGroupUpdateOne) SetName(s string) *ServiceGroupUpdateOne {
	sguo.mutation.SetName(s)
	return sguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sguo *ServiceGroupUpdateOne) SetNillableName(s *string) *ServiceGroupUpdateOne {
	if s != nil {
		sguo.SetName(*s)
	}
	return sguo
}

// SetDescription sets the "description" field.
func (sguo *ServiceGroupUpdateOne) SetDescription(s string) *ServiceGroupUpdateOne {
	sguo.mutation.SetDescription(s)
	return sguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sguo *ServiceGroupUpdateOne) SetNillableDescription(s *string) *ServiceGroupUpdateOne {
	if s != nil {
		sguo.SetDescription(*s)
	}
	return sguo
}

// ClearDescription clears the value of the "description" field.
func (sguo *ServiceGroupUpdateOne) ClearDescription() *ServiceGroupUpdateOne {
	sguo.mutation.ClearDescription()
	return sguo
}

// SetEnvironmentID sets the "environment_id" field.
func (sguo *ServiceGroupUpdateOne) SetEnvironmentID(u uuid.UUID) *ServiceGroupUpdateOne {
	sguo.mutation.SetEnvironmentID(u)
	return sguo
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (sguo *ServiceGroupUpdateOne) SetNillableEnvironmentID(u *uuid.UUID) *ServiceGroupUpdateOne {
	if u != nil {
		sguo.SetEnvironmentID(*u)
	}
	return sguo
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (sguo *ServiceGroupUpdateOne) SetEnvironment(e *Environment) *ServiceGroupUpdateOne {
	return sguo.SetEnvironmentID(e.ID)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (sguo *ServiceGroupUpdateOne) AddServiceIDs(ids ...uuid.UUID) *ServiceGroupUpdateOne {
	sguo.mutation.AddServiceIDs(ids...)
	return sguo
}

// AddServices adds the "services" edges to the Service entity.
func (sguo *ServiceGroupUpdateOne) AddServices(s ...*Service) *ServiceGroupUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.AddServiceIDs(ids...)
}

// Mutation returns the ServiceGroupMutation object of the builder.
func (sguo *ServiceGroupUpdateOne) Mutation() *ServiceGroupMutation {
	return sguo.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (sguo *ServiceGroupUpdateOne) ClearEnvironment() *ServiceGroupUpdateOne {
	sguo.mutation.ClearEnvironment()
	return sguo
}

// ClearServices clears all "services" edges to the Service entity.
func (sguo *ServiceGroupUpdateOne) ClearServices() *ServiceGroupUpdateOne {
	sguo.mutation.ClearServices()
	return sguo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (sguo *ServiceGroupUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *ServiceGroupUpdateOne {
	sguo.mutation.RemoveServiceIDs(ids...)
	return sguo
}

// RemoveServices removes "services" edges to Service entities.
func (sguo *ServiceGroupUpdateOne) RemoveServices(s ...*Service) *ServiceGroupUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the ServiceGroupUpdate builder.
func (sguo *ServiceGroupUpdateOne) Where(ps ...predicate.ServiceGroup) *ServiceGroupUpdateOne {
	sguo.mutation.Where(ps...)
	return sguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *ServiceGroupUpdateOne) Select(field string, fields ...string) *ServiceGroupUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated ServiceGroup entity.
func (sguo *ServiceGroupUpdateOne) Save(ctx context.Context) (*ServiceGroup, error) {
	sguo.defaults()
	return withHooks(ctx, sguo.sqlSave, sguo.mutation, sguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *ServiceGroupUpdateOne) SaveX(ctx context.Context) *ServiceGroup {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *ServiceGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *ServiceGroupUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguo *ServiceGroupUpdateOne) defaults() {
	if _, ok := sguo.mutation.UpdatedAt(); !ok {
		v := servicegroup.UpdateDefaultUpdatedAt()
		sguo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sguo *ServiceGroupUpdateOne) check() error {
	if sguo.mutation.EnvironmentCleared() && len(sguo.mutation.EnvironmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceGroup.environment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sguo *ServiceGroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceGroupUpdateOne {
	sguo.modifiers = append(sguo.modifiers, modifiers...)
	return sguo
}

func (sguo *ServiceGroupUpdateOne) sqlSave(ctx context.Context) (_node *ServiceGroup, err error) {
	if err := sguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicegroup.Table, servicegroup.Columns, sqlgraph.NewFieldSpec(servicegroup.FieldID, field.TypeUUID))
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicegroup.FieldID)
		for _, f := range fields {
			if !servicegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.UpdatedAt(); ok {
		_spec.SetField(servicegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sguo.mutation.Name(); ok {
		_spec.SetField(servicegroup.FieldName, field.TypeString, value)
	}
	if value, ok := sguo.mutation.Description(); ok {
		_spec.SetField(servicegroup.FieldDescription, field.TypeString, value)
	}
	if sguo.mutation.DescriptionCleared() {
		_spec.ClearField(servicegroup.FieldDescription, field.TypeString)
	}
	if sguo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicegroup.EnvironmentTable,
			Columns: []string{servicegroup.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicegroup.EnvironmentTable,
			Columns: []string{servicegroup.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !sguo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicegroup.ServicesTable,
			Columns: []string{servicegroup.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sguo.modifiers...)
	_node = &ServiceGroup{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sguo.mutation.done = true
	return _node, nil
}
