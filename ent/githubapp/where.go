// Code generated by ent, DO NOT EDIT.

package githubapp

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldName, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldClientSecret, v))
}

// WebhookSecret applies equality check predicate on the "webhook_secret" field. It's identical to WebhookSecretEQ.
func WebhookSecret(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldWebhookSecret, v))
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldPrivateKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContainsFold(FieldName, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContainsFold(FieldClientSecret, v))
}

// WebhookSecretEQ applies the EQ predicate on the "webhook_secret" field.
func WebhookSecretEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldWebhookSecret, v))
}

// WebhookSecretNEQ applies the NEQ predicate on the "webhook_secret" field.
func WebhookSecretNEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldWebhookSecret, v))
}

// WebhookSecretIn applies the In predicate on the "webhook_secret" field.
func WebhookSecretIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldWebhookSecret, vs...))
}

// WebhookSecretNotIn applies the NotIn predicate on the "webhook_secret" field.
func WebhookSecretNotIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldWebhookSecret, vs...))
}

// WebhookSecretGT applies the GT predicate on the "webhook_secret" field.
func WebhookSecretGT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldWebhookSecret, v))
}

// WebhookSecretGTE applies the GTE predicate on the "webhook_secret" field.
func WebhookSecretGTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldWebhookSecret, v))
}

// WebhookSecretLT applies the LT predicate on the "webhook_secret" field.
func WebhookSecretLT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldWebhookSecret, v))
}

// WebhookSecretLTE applies the LTE predicate on the "webhook_secret" field.
func WebhookSecretLTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldWebhookSecret, v))
}

// WebhookSecretContains applies the Contains predicate on the "webhook_secret" field.
func WebhookSecretContains(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContains(FieldWebhookSecret, v))
}

// WebhookSecretHasPrefix applies the HasPrefix predicate on the "webhook_secret" field.
func WebhookSecretHasPrefix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasPrefix(FieldWebhookSecret, v))
}

// WebhookSecretHasSuffix applies the HasSuffix predicate on the "webhook_secret" field.
func WebhookSecretHasSuffix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasSuffix(FieldWebhookSecret, v))
}

// WebhookSecretEqualFold applies the EqualFold predicate on the "webhook_secret" field.
func WebhookSecretEqualFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEqualFold(FieldWebhookSecret, v))
}

// WebhookSecretContainsFold applies the ContainsFold predicate on the "webhook_secret" field.
func WebhookSecretContainsFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContainsFold(FieldWebhookSecret, v))
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContains(FieldPrivateKey, v))
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasPrefix(FieldPrivateKey, v))
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldHasSuffix(FieldPrivateKey, v))
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldEqualFold(FieldPrivateKey, v))
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.GithubApp {
	return predicate.GithubApp(sql.FieldContainsFold(FieldPrivateKey, v))
}

// HasInstallations applies the HasEdge predicate on the "installations" edge.
func HasInstallations() predicate.GithubApp {
	return predicate.GithubApp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstallationsTable, InstallationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstallationsWith applies the HasEdge predicate on the "installations" edge with a given conditions (other predicates).
func HasInstallationsWith(preds ...predicate.GithubInstallation) predicate.GithubApp {
	return predicate.GithubApp(func(s *sql.Selector) {
		step := newInstallationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GithubApp) predicate.GithubApp {
	return predicate.GithubApp(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GithubApp) predicate.GithubApp {
	return predicate.GithubApp(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GithubApp) predicate.GithubApp {
	return predicate.GithubApp(sql.NotPredicates(p))
}
