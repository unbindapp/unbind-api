// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/internal/models"
)

// GithubInstallation is the model entity for the GithubInstallation schema.
type GithubInstallation struct {
	config `json:"-"`
	// ID of the ent.
	// The GitHub Installation ID
	ID int64 `json:"id,omitempty"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The GitHub App ID this installation belongs to
	GithubAppID int64 `json:"github_app_id,omitempty"`
	// The GitHub account ID (org or user)
	AccountID int64 `json:"account_id,omitempty"`
	// The GitHub account login (org or user name)
	AccountLogin string `json:"account_login,omitempty"`
	// Type of GitHub account
	AccountType githubinstallation.AccountType `json:"account_type,omitempty"`
	// The HTML URL to the GitHub account
	AccountURL string `json:"account_url,omitempty"`
	// Whether the installation has access to all repos or only selected ones
	RepositorySelection githubinstallation.RepositorySelection `json:"repository_selection,omitempty"`
	// Whether the installation is suspended
	Suspended bool `json:"suspended,omitempty"`
	// Whether the installation is active
	Active bool `json:"active,omitempty"`
	// Permissions granted to this installation
	Permissions models.GithubInstallationPermissions `json:"permissions,omitempty"`
	// Events this installation subscribes to
	Events []string `json:"events,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubInstallationQuery when eager-loading is set.
	Edges        GithubInstallationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GithubInstallationEdges holds the relations/edges for other nodes in the graph.
type GithubInstallationEdges struct {
	// GithubApp holds the value of the github_app edge.
	GithubApp *GithubApp `json:"github_app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GithubAppOrErr returns the GithubApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GithubInstallationEdges) GithubAppOrErr() (*GithubApp, error) {
	if e.GithubApp != nil {
		return e.GithubApp, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: githubapp.Label}
	}
	return nil, &NotLoadedError{edge: "github_app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubInstallation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubinstallation.FieldPermissions, githubinstallation.FieldEvents:
			values[i] = new([]byte)
		case githubinstallation.FieldSuspended, githubinstallation.FieldActive:
			values[i] = new(sql.NullBool)
		case githubinstallation.FieldID, githubinstallation.FieldGithubAppID, githubinstallation.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case githubinstallation.FieldAccountLogin, githubinstallation.FieldAccountType, githubinstallation.FieldAccountURL, githubinstallation.FieldRepositorySelection:
			values[i] = new(sql.NullString)
		case githubinstallation.FieldCreatedAt, githubinstallation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubInstallation fields.
func (gi *GithubInstallation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubinstallation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gi.ID = int64(value.Int64)
		case githubinstallation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gi.CreatedAt = value.Time
			}
		case githubinstallation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gi.UpdatedAt = value.Time
			}
		case githubinstallation.FieldGithubAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field github_app_id", values[i])
			} else if value.Valid {
				gi.GithubAppID = value.Int64
			}
		case githubinstallation.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				gi.AccountID = value.Int64
			}
		case githubinstallation.FieldAccountLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_login", values[i])
			} else if value.Valid {
				gi.AccountLogin = value.String
			}
		case githubinstallation.FieldAccountType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_type", values[i])
			} else if value.Valid {
				gi.AccountType = githubinstallation.AccountType(value.String)
			}
		case githubinstallation.FieldAccountURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_url", values[i])
			} else if value.Valid {
				gi.AccountURL = value.String
			}
		case githubinstallation.FieldRepositorySelection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_selection", values[i])
			} else if value.Valid {
				gi.RepositorySelection = githubinstallation.RepositorySelection(value.String)
			}
		case githubinstallation.FieldSuspended:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field suspended", values[i])
			} else if value.Valid {
				gi.Suspended = value.Bool
			}
		case githubinstallation.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				gi.Active = value.Bool
			}
		case githubinstallation.FieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gi.Permissions); err != nil {
					return fmt.Errorf("unmarshal field permissions: %w", err)
				}
			}
		case githubinstallation.FieldEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gi.Events); err != nil {
					return fmt.Errorf("unmarshal field events: %w", err)
				}
			}
		default:
			gi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GithubInstallation.
// This includes values selected through modifiers, order, etc.
func (gi *GithubInstallation) Value(name string) (ent.Value, error) {
	return gi.selectValues.Get(name)
}

// QueryGithubApp queries the "github_app" edge of the GithubInstallation entity.
func (gi *GithubInstallation) QueryGithubApp() *GithubAppQuery {
	return NewGithubInstallationClient(gi.config).QueryGithubApp(gi)
}

// Update returns a builder for updating this GithubInstallation.
// Note that you need to call GithubInstallation.Unwrap() before calling this method if this GithubInstallation
// was returned from a transaction, and the transaction was committed or rolled back.
func (gi *GithubInstallation) Update() *GithubInstallationUpdateOne {
	return NewGithubInstallationClient(gi.config).UpdateOne(gi)
}

// Unwrap unwraps the GithubInstallation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gi *GithubInstallation) Unwrap() *GithubInstallation {
	_tx, ok := gi.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubInstallation is not a transactional entity")
	}
	gi.config.driver = _tx.drv
	return gi
}

// String implements the fmt.Stringer.
func (gi *GithubInstallation) String() string {
	var builder strings.Builder
	builder.WriteString("GithubInstallation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("github_app_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.GithubAppID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.AccountID))
	builder.WriteString(", ")
	builder.WriteString("account_login=")
	builder.WriteString(gi.AccountLogin)
	builder.WriteString(", ")
	builder.WriteString("account_type=")
	builder.WriteString(fmt.Sprintf("%v", gi.AccountType))
	builder.WriteString(", ")
	builder.WriteString("account_url=")
	builder.WriteString(gi.AccountURL)
	builder.WriteString(", ")
	builder.WriteString("repository_selection=")
	builder.WriteString(fmt.Sprintf("%v", gi.RepositorySelection))
	builder.WriteString(", ")
	builder.WriteString("suspended=")
	builder.WriteString(fmt.Sprintf("%v", gi.Suspended))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", gi.Active))
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(fmt.Sprintf("%v", gi.Permissions))
	builder.WriteString(", ")
	builder.WriteString("events=")
	builder.WriteString(fmt.Sprintf("%v", gi.Events))
	builder.WriteByte(')')
	return builder.String()
}

// GithubInstallations is a parsable slice of GithubInstallation.
type GithubInstallations []*GithubInstallation
