// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/s3"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
	"github.com/unbindapp/unbind-api/internal/sourceanalyzer/enum"
	v1 "github.com/unbindapp/unbind-operator/api/v1"
)

// ServiceConfig is the model entity for the ServiceConfig schema.
type ServiceConfig struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID uuid.UUID `json:"service_id,omitempty"`
	// Builder holds the value of the "builder" field.
	Builder schema.ServiceBuilder `json:"builder,omitempty"`
	// Icon metadata, unique of framework, provider, database
	Icon string `json:"icon,omitempty"`
	// Path to Dockerfile if using docker builder
	DockerfilePath *string `json:"dockerfile_path,omitempty"`
	// Path to Dockerfile context if using docker builder
	DockerfileContext *string `json:"dockerfile_context,omitempty"`
	// Provider (e.g. Go, Python, Node, Deno)
	RailpackProvider *enum.Provider `json:"railpack_provider,omitempty"`
	// Framework of service - corresponds mostly to railpack results - e.g. Django, Next, Express, Gin
	RailpackFramework *enum.Framework `json:"railpack_framework,omitempty"`
	// Branch to build from
	GitBranch *string `json:"git_branch,omitempty"`
	// Tag to build from, supports glob patterns
	GitTag *string `json:"git_tag,omitempty"`
	// External domains and paths for the service
	Hosts []v1.HostSpec `json:"hosts,omitempty"`
	// Container ports to expose
	Ports []schema.PortSpec `json:"ports,omitempty"`
	// Number of replicas for the service
	Replicas int32 `json:"replicas,omitempty"`
	// Whether to automatically deploy on git push
	AutoDeploy bool `json:"auto_deploy,omitempty"`
	// Custom install command (railpack only)
	InstallCommand *string `json:"install_command,omitempty"`
	// Custom build command (railpack only)
	BuildCommand *string `json:"build_command,omitempty"`
	// Custom run command
	RunCommand *string `json:"run_command,omitempty"`
	// Whether the service is publicly accessible, creates an ingress resource
	IsPublic bool `json:"is_public,omitempty"`
	// Custom Docker image if not building from git
	Image string `json:"image,omitempty"`
	// Version of the database custom resource definition
	DefinitionVersion *string `json:"definition_version,omitempty"`
	// Database configuration for the service
	DatabaseConfig *schema.DatabaseConfig `json:"database_config,omitempty"`
	// S3 endpoint backup to
	S3BackupEndpointID *uuid.UUID `json:"s3_backup_endpoint_id,omitempty"`
	// S3 bucket to backup to
	S3BackupBucket *string `json:"s3_backup_bucket,omitempty"`
	// Cron expression for the backup schedule
	BackupSchedule string `json:"backup_schedule,omitempty"`
	// Number of base backups to retain
	BackupRetentionCount int `json:"backup_retention_count,omitempty"`
	// Volume name to use for the service
	VolumeName *string `json:"volume_name,omitempty"`
	// Volume mount path for the service
	VolumeMountPath *string `json:"volume_mount_path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceConfigQuery when eager-loading is set.
	Edges        ServiceConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceConfigEdges holds the relations/edges for other nodes in the graph.
type ServiceConfigEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// S3BackupEndpoint holds the value of the s3_backup_endpoint edge.
	S3BackupEndpoint *S3 `json:"s3_backup_endpoint,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceConfigEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// S3BackupEndpointOrErr returns the S3BackupEndpoint value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceConfigEdges) S3BackupEndpointOrErr() (*S3, error) {
	if e.S3BackupEndpoint != nil {
		return e.S3BackupEndpoint, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: s3.Label}
	}
	return nil, &NotLoadedError{edge: "s3_backup_endpoint"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceconfig.FieldS3BackupEndpointID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case serviceconfig.FieldHosts, serviceconfig.FieldPorts, serviceconfig.FieldDatabaseConfig:
			values[i] = new([]byte)
		case serviceconfig.FieldAutoDeploy, serviceconfig.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case serviceconfig.FieldReplicas, serviceconfig.FieldBackupRetentionCount:
			values[i] = new(sql.NullInt64)
		case serviceconfig.FieldBuilder, serviceconfig.FieldIcon, serviceconfig.FieldDockerfilePath, serviceconfig.FieldDockerfileContext, serviceconfig.FieldRailpackProvider, serviceconfig.FieldRailpackFramework, serviceconfig.FieldGitBranch, serviceconfig.FieldGitTag, serviceconfig.FieldInstallCommand, serviceconfig.FieldBuildCommand, serviceconfig.FieldRunCommand, serviceconfig.FieldImage, serviceconfig.FieldDefinitionVersion, serviceconfig.FieldS3BackupBucket, serviceconfig.FieldBackupSchedule, serviceconfig.FieldVolumeName, serviceconfig.FieldVolumeMountPath:
			values[i] = new(sql.NullString)
		case serviceconfig.FieldCreatedAt, serviceconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case serviceconfig.FieldID, serviceconfig.FieldServiceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceConfig fields.
func (sc *ServiceConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case serviceconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case serviceconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case serviceconfig.FieldServiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field service_id", values[i])
			} else if value != nil {
				sc.ServiceID = *value
			}
		case serviceconfig.FieldBuilder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field builder", values[i])
			} else if value.Valid {
				sc.Builder = schema.ServiceBuilder(value.String)
			}
		case serviceconfig.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				sc.Icon = value.String
			}
		case serviceconfig.FieldDockerfilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dockerfile_path", values[i])
			} else if value.Valid {
				sc.DockerfilePath = new(string)
				*sc.DockerfilePath = value.String
			}
		case serviceconfig.FieldDockerfileContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dockerfile_context", values[i])
			} else if value.Valid {
				sc.DockerfileContext = new(string)
				*sc.DockerfileContext = value.String
			}
		case serviceconfig.FieldRailpackProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field railpack_provider", values[i])
			} else if value.Valid {
				sc.RailpackProvider = new(enum.Provider)
				*sc.RailpackProvider = enum.Provider(value.String)
			}
		case serviceconfig.FieldRailpackFramework:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field railpack_framework", values[i])
			} else if value.Valid {
				sc.RailpackFramework = new(enum.Framework)
				*sc.RailpackFramework = enum.Framework(value.String)
			}
		case serviceconfig.FieldGitBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_branch", values[i])
			} else if value.Valid {
				sc.GitBranch = new(string)
				*sc.GitBranch = value.String
			}
		case serviceconfig.FieldGitTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_tag", values[i])
			} else if value.Valid {
				sc.GitTag = new(string)
				*sc.GitTag = value.String
			}
		case serviceconfig.FieldHosts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hosts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.Hosts); err != nil {
					return fmt.Errorf("unmarshal field hosts: %w", err)
				}
			}
		case serviceconfig.FieldPorts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ports", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.Ports); err != nil {
					return fmt.Errorf("unmarshal field ports: %w", err)
				}
			}
		case serviceconfig.FieldReplicas:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field replicas", values[i])
			} else if value.Valid {
				sc.Replicas = int32(value.Int64)
			}
		case serviceconfig.FieldAutoDeploy:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_deploy", values[i])
			} else if value.Valid {
				sc.AutoDeploy = value.Bool
			}
		case serviceconfig.FieldInstallCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_command", values[i])
			} else if value.Valid {
				sc.InstallCommand = new(string)
				*sc.InstallCommand = value.String
			}
		case serviceconfig.FieldBuildCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field build_command", values[i])
			} else if value.Valid {
				sc.BuildCommand = new(string)
				*sc.BuildCommand = value.String
			}
		case serviceconfig.FieldRunCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_command", values[i])
			} else if value.Valid {
				sc.RunCommand = new(string)
				*sc.RunCommand = value.String
			}
		case serviceconfig.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				sc.IsPublic = value.Bool
			}
		case serviceconfig.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				sc.Image = value.String
			}
		case serviceconfig.FieldDefinitionVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field definition_version", values[i])
			} else if value.Valid {
				sc.DefinitionVersion = new(string)
				*sc.DefinitionVersion = value.String
			}
		case serviceconfig.FieldDatabaseConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field database_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.DatabaseConfig); err != nil {
					return fmt.Errorf("unmarshal field database_config: %w", err)
				}
			}
		case serviceconfig.FieldS3BackupEndpointID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field s3_backup_endpoint_id", values[i])
			} else if value.Valid {
				sc.S3BackupEndpointID = new(uuid.UUID)
				*sc.S3BackupEndpointID = *value.S.(*uuid.UUID)
			}
		case serviceconfig.FieldS3BackupBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field s3_backup_bucket", values[i])
			} else if value.Valid {
				sc.S3BackupBucket = new(string)
				*sc.S3BackupBucket = value.String
			}
		case serviceconfig.FieldBackupSchedule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field backup_schedule", values[i])
			} else if value.Valid {
				sc.BackupSchedule = value.String
			}
		case serviceconfig.FieldBackupRetentionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field backup_retention_count", values[i])
			} else if value.Valid {
				sc.BackupRetentionCount = int(value.Int64)
			}
		case serviceconfig.FieldVolumeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field volume_name", values[i])
			} else if value.Valid {
				sc.VolumeName = new(string)
				*sc.VolumeName = value.String
			}
		case serviceconfig.FieldVolumeMountPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field volume_mount_path", values[i])
			} else if value.Valid {
				sc.VolumeMountPath = new(string)
				*sc.VolumeMountPath = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceConfig.
// This includes values selected through modifiers, order, etc.
func (sc *ServiceConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceConfig entity.
func (sc *ServiceConfig) QueryService() *ServiceQuery {
	return NewServiceConfigClient(sc.config).QueryService(sc)
}

// QueryS3BackupEndpoint queries the "s3_backup_endpoint" edge of the ServiceConfig entity.
func (sc *ServiceConfig) QueryS3BackupEndpoint() *S3Query {
	return NewServiceConfigClient(sc.config).QueryS3BackupEndpoint(sc)
}

// Update returns a builder for updating this ServiceConfig.
// Note that you need to call ServiceConfig.Unwrap() before calling this method if this ServiceConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ServiceConfig) Update() *ServiceConfigUpdateOne {
	return NewServiceConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ServiceConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ServiceConfig) Unwrap() *ServiceConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ServiceConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ServiceID))
	builder.WriteString(", ")
	builder.WriteString("builder=")
	builder.WriteString(fmt.Sprintf("%v", sc.Builder))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(sc.Icon)
	builder.WriteString(", ")
	if v := sc.DockerfilePath; v != nil {
		builder.WriteString("dockerfile_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.DockerfileContext; v != nil {
		builder.WriteString("dockerfile_context=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.RailpackProvider; v != nil {
		builder.WriteString("railpack_provider=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sc.RailpackFramework; v != nil {
		builder.WriteString("railpack_framework=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sc.GitBranch; v != nil {
		builder.WriteString("git_branch=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.GitTag; v != nil {
		builder.WriteString("git_tag=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("hosts=")
	builder.WriteString(fmt.Sprintf("%v", sc.Hosts))
	builder.WriteString(", ")
	builder.WriteString("ports=")
	builder.WriteString(fmt.Sprintf("%v", sc.Ports))
	builder.WriteString(", ")
	builder.WriteString("replicas=")
	builder.WriteString(fmt.Sprintf("%v", sc.Replicas))
	builder.WriteString(", ")
	builder.WriteString("auto_deploy=")
	builder.WriteString(fmt.Sprintf("%v", sc.AutoDeploy))
	builder.WriteString(", ")
	if v := sc.InstallCommand; v != nil {
		builder.WriteString("install_command=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.BuildCommand; v != nil {
		builder.WriteString("build_command=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.RunCommand; v != nil {
		builder.WriteString("run_command=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", sc.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(sc.Image)
	builder.WriteString(", ")
	if v := sc.DefinitionVersion; v != nil {
		builder.WriteString("definition_version=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("database_config=")
	builder.WriteString(fmt.Sprintf("%v", sc.DatabaseConfig))
	builder.WriteString(", ")
	if v := sc.S3BackupEndpointID; v != nil {
		builder.WriteString("s3_backup_endpoint_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sc.S3BackupBucket; v != nil {
		builder.WriteString("s3_backup_bucket=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("backup_schedule=")
	builder.WriteString(sc.BackupSchedule)
	builder.WriteString(", ")
	builder.WriteString("backup_retention_count=")
	builder.WriteString(fmt.Sprintf("%v", sc.BackupRetentionCount))
	builder.WriteString(", ")
	if v := sc.VolumeName; v != nil {
		builder.WriteString("volume_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sc.VolumeMountPath; v != nil {
		builder.WriteString("volume_mount_path=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ServiceConfigs is a parsable slice of ServiceConfig.
type ServiceConfigs []*ServiceConfig
