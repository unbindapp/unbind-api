// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/environment"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type of service
	Type service.Type `json:"type,omitempty"`
	// Builder holds the value of the "builder" field.
	Builder service.Builder `json:"builder,omitempty"`
	// Runtime (e.g. Go, Python, Node, Deno)
	Runtime *string `json:"runtime,omitempty"`
	// Framework of service - corresponds mostly to railpack results - e.g. Django, Next, Express, Gin
	Framework *string `json:"framework,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID uuid.UUID `json:"environment_id,omitempty"`
	// Optional reference to GitHub installation
	GithubInstallationID *int64 `json:"github_installation_id,omitempty"`
	// GitHub repository name
	GitRepository *string `json:"git_repository,omitempty"`
	// Kubernetes secret for this service
	KubernetesSecret string `json:"kubernetes_secret,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges        ServiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// Environment holds the value of the environment edge.
	Environment *Environment `json:"environment,omitempty"`
	// GithubInstallation holds the value of the github_installation edge.
	GithubInstallation *GithubInstallation `json:"github_installation,omitempty"`
	// ServiceConfig holds the value of the service_config edge.
	ServiceConfig *ServiceConfig `json:"service_config,omitempty"`
	// BuildJobs holds the value of the build_jobs edge.
	BuildJobs []*BuildJob `json:"build_jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) EnvironmentOrErr() (*Environment, error) {
	if e.Environment != nil {
		return e.Environment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: environment.Label}
	}
	return nil, &NotLoadedError{edge: "environment"}
}

// GithubInstallationOrErr returns the GithubInstallation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) GithubInstallationOrErr() (*GithubInstallation, error) {
	if e.GithubInstallation != nil {
		return e.GithubInstallation, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: githubinstallation.Label}
	}
	return nil, &NotLoadedError{edge: "github_installation"}
}

// ServiceConfigOrErr returns the ServiceConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) ServiceConfigOrErr() (*ServiceConfig, error) {
	if e.ServiceConfig != nil {
		return e.ServiceConfig, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: serviceconfig.Label}
	}
	return nil, &NotLoadedError{edge: "service_config"}
}

// BuildJobsOrErr returns the BuildJobs value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceEdges) BuildJobsOrErr() ([]*BuildJob, error) {
	if e.loadedTypes[3] {
		return e.BuildJobs, nil
	}
	return nil, &NotLoadedError{edge: "build_jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldGithubInstallationID:
			values[i] = new(sql.NullInt64)
		case service.FieldName, service.FieldDisplayName, service.FieldDescription, service.FieldType, service.FieldBuilder, service.FieldRuntime, service.FieldFramework, service.FieldGitRepository, service.FieldKubernetesSecret:
			values[i] = new(sql.NullString)
		case service.FieldCreatedAt, service.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case service.FieldID, service.FieldEnvironmentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case service.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case service.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case service.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case service.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				s.DisplayName = value.String
			}
		case service.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case service.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = service.Type(value.String)
			}
		case service.FieldBuilder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field builder", values[i])
			} else if value.Valid {
				s.Builder = service.Builder(value.String)
			}
		case service.FieldRuntime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field runtime", values[i])
			} else if value.Valid {
				s.Runtime = new(string)
				*s.Runtime = value.String
			}
		case service.FieldFramework:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field framework", values[i])
			} else if value.Valid {
				s.Framework = new(string)
				*s.Framework = value.String
			}
		case service.FieldEnvironmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value != nil {
				s.EnvironmentID = *value
			}
		case service.FieldGithubInstallationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field github_installation_id", values[i])
			} else if value.Valid {
				s.GithubInstallationID = new(int64)
				*s.GithubInstallationID = value.Int64
			}
		case service.FieldGitRepository:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_repository", values[i])
			} else if value.Valid {
				s.GitRepository = new(string)
				*s.GitRepository = value.String
			}
		case service.FieldKubernetesSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubernetes_secret", values[i])
			} else if value.Valid {
				s.KubernetesSecret = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Service.
// This includes values selected through modifiers, order, etc.
func (s *Service) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryEnvironment queries the "environment" edge of the Service entity.
func (s *Service) QueryEnvironment() *EnvironmentQuery {
	return NewServiceClient(s.config).QueryEnvironment(s)
}

// QueryGithubInstallation queries the "github_installation" edge of the Service entity.
func (s *Service) QueryGithubInstallation() *GithubInstallationQuery {
	return NewServiceClient(s.config).QueryGithubInstallation(s)
}

// QueryServiceConfig queries the "service_config" edge of the Service entity.
func (s *Service) QueryServiceConfig() *ServiceConfigQuery {
	return NewServiceClient(s.config).QueryServiceConfig(s)
}

// QueryBuildJobs queries the "build_jobs" edge of the Service entity.
func (s *Service) QueryBuildJobs() *BuildJobQuery {
	return NewServiceClient(s.config).QueryBuildJobs(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return NewServiceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(s.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	builder.WriteString("builder=")
	builder.WriteString(fmt.Sprintf("%v", s.Builder))
	builder.WriteString(", ")
	if v := s.Runtime; v != nil {
		builder.WriteString("runtime=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.Framework; v != nil {
		builder.WriteString("framework=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EnvironmentID))
	builder.WriteString(", ")
	if v := s.GithubInstallationID; v != nil {
		builder.WriteString("github_installation_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.GitRepository; v != nil {
		builder.WriteString("git_repository=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("kubernetes_secret=")
	builder.WriteString(s.KubernetesSecret)
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service
