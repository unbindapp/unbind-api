// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/unbindapp/unbind-api/ent/githubapp"
)

// GithubApp is the model entity for the GithubApp schema.
type GithubApp struct {
	config `json:"-"`
	// ID of the ent.
	// The GitHub App ID
	ID int64 `json:"id,omitempty"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name of the GitHub App
	Name string `json:"name,omitempty"`
	// OAuth client ID of the GitHub App
	ClientID string `json:"client_id,omitempty"`
	// OAuth client secret of the GitHub App
	ClientSecret string `json:"-"`
	// Webhook secret for GitHub events
	WebhookSecret string `json:"-"`
	// Private key (PEM) for GitHub App authentication
	PrivateKey string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubAppQuery when eager-loading is set.
	Edges        GithubAppEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GithubAppEdges holds the relations/edges for other nodes in the graph.
type GithubAppEdges struct {
	// Installations holds the value of the installations edge.
	Installations []*GithubInstallation `json:"installations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstallationsOrErr returns the Installations value or an error if the edge
// was not loaded in eager-loading.
func (e GithubAppEdges) InstallationsOrErr() ([]*GithubInstallation, error) {
	if e.loadedTypes[0] {
		return e.Installations, nil
	}
	return nil, &NotLoadedError{edge: "installations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubapp.FieldID:
			values[i] = new(sql.NullInt64)
		case githubapp.FieldName, githubapp.FieldClientID, githubapp.FieldClientSecret, githubapp.FieldWebhookSecret, githubapp.FieldPrivateKey:
			values[i] = new(sql.NullString)
		case githubapp.FieldCreatedAt, githubapp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubApp fields.
func (ga *GithubApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int64(value.Int64)
		case githubapp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case githubapp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case githubapp.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case githubapp.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				ga.ClientID = value.String
			}
		case githubapp.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				ga.ClientSecret = value.String
			}
		case githubapp.FieldWebhookSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_secret", values[i])
			} else if value.Valid {
				ga.WebhookSecret = value.String
			}
		case githubapp.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				ga.PrivateKey = value.String
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GithubApp.
// This includes values selected through modifiers, order, etc.
func (ga *GithubApp) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryInstallations queries the "installations" edge of the GithubApp entity.
func (ga *GithubApp) QueryInstallations() *GithubInstallationQuery {
	return NewGithubAppClient(ga.config).QueryInstallations(ga)
}

// Update returns a builder for updating this GithubApp.
// Note that you need to call GithubApp.Unwrap() before calling this method if this GithubApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *GithubApp) Update() *GithubAppUpdateOne {
	return NewGithubAppClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the GithubApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *GithubApp) Unwrap() *GithubApp {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubApp is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *GithubApp) String() string {
	var builder strings.Builder
	builder.WriteString("GithubApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(ga.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("webhook_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("private_key=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// GithubApps is a parsable slice of GithubApp.
type GithubApps []*GithubApp
