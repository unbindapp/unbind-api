// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/oauth2token"
	"github.com/unbindapp/unbind-api/ent/user"
)

// Oauth2TokenCreate is the builder for creating a Oauth2Token entity.
type Oauth2TokenCreate struct {
	config
	mutation *Oauth2TokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *Oauth2TokenCreate) SetCreatedAt(t time.Time) *Oauth2TokenCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableCreatedAt(t *time.Time) *Oauth2TokenCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *Oauth2TokenCreate) SetUpdatedAt(t time.Time) *Oauth2TokenCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableUpdatedAt(t *time.Time) *Oauth2TokenCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetAccessToken sets the "access_token" field.
func (oc *Oauth2TokenCreate) SetAccessToken(s string) *Oauth2TokenCreate {
	oc.mutation.SetAccessToken(s)
	return oc
}

// SetRefreshToken sets the "refresh_token" field.
func (oc *Oauth2TokenCreate) SetRefreshToken(s string) *Oauth2TokenCreate {
	oc.mutation.SetRefreshToken(s)
	return oc
}

// SetClientID sets the "client_id" field.
func (oc *Oauth2TokenCreate) SetClientID(s string) *Oauth2TokenCreate {
	oc.mutation.SetClientID(s)
	return oc
}

// SetExpiresAt sets the "expires_at" field.
func (oc *Oauth2TokenCreate) SetExpiresAt(t time.Time) *Oauth2TokenCreate {
	oc.mutation.SetExpiresAt(t)
	return oc
}

// SetRevoked sets the "revoked" field.
func (oc *Oauth2TokenCreate) SetRevoked(b bool) *Oauth2TokenCreate {
	oc.mutation.SetRevoked(b)
	return oc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableRevoked(b *bool) *Oauth2TokenCreate {
	if b != nil {
		oc.SetRevoked(*b)
	}
	return oc
}

// SetScope sets the "scope" field.
func (oc *Oauth2TokenCreate) SetScope(s string) *Oauth2TokenCreate {
	oc.mutation.SetScope(s)
	return oc
}

// SetDeviceInfo sets the "device_info" field.
func (oc *Oauth2TokenCreate) SetDeviceInfo(s string) *Oauth2TokenCreate {
	oc.mutation.SetDeviceInfo(s)
	return oc
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableDeviceInfo(s *string) *Oauth2TokenCreate {
	if s != nil {
		oc.SetDeviceInfo(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *Oauth2TokenCreate) SetID(u uuid.UUID) *Oauth2TokenCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *Oauth2TokenCreate) SetNillableID(u *uuid.UUID) *Oauth2TokenCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oc *Oauth2TokenCreate) SetUserID(id uuid.UUID) *Oauth2TokenCreate {
	oc.mutation.SetUserID(id)
	return oc
}

// SetUser sets the "user" edge to the User entity.
func (oc *Oauth2TokenCreate) SetUser(u *User) *Oauth2TokenCreate {
	return oc.SetUserID(u.ID)
}

// Mutation returns the Oauth2TokenMutation object of the builder.
func (oc *Oauth2TokenCreate) Mutation() *Oauth2TokenMutation {
	return oc.mutation
}

// Save creates the Oauth2Token in the database.
func (oc *Oauth2TokenCreate) Save(ctx context.Context) (*Oauth2Token, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *Oauth2TokenCreate) SaveX(ctx context.Context) *Oauth2Token {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *Oauth2TokenCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *Oauth2TokenCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *Oauth2TokenCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oauth2token.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := oauth2token.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Revoked(); !ok {
		v := oauth2token.DefaultRevoked
		oc.mutation.SetRevoked(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := oauth2token.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *Oauth2TokenCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Oauth2Token.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Oauth2Token.updated_at"`)}
	}
	if _, ok := oc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "Oauth2Token.access_token"`)}
	}
	if _, ok := oc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "Oauth2Token.refresh_token"`)}
	}
	if _, ok := oc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Oauth2Token.client_id"`)}
	}
	if _, ok := oc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Oauth2Token.expires_at"`)}
	}
	if _, ok := oc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "Oauth2Token.revoked"`)}
	}
	if _, ok := oc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Oauth2Token.scope"`)}
	}
	if len(oc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Oauth2Token.user"`)}
	}
	return nil
}

func (oc *Oauth2TokenCreate) sqlSave(ctx context.Context) (*Oauth2Token, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *Oauth2TokenCreate) createSpec() (*Oauth2Token, *sqlgraph.CreateSpec) {
	var (
		_node = &Oauth2Token{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(oauth2token.Table, sqlgraph.NewFieldSpec(oauth2token.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(oauth2token.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauth2token.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.AccessToken(); ok {
		_spec.SetField(oauth2token.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := oc.mutation.RefreshToken(); ok {
		_spec.SetField(oauth2token.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := oc.mutation.ClientID(); ok {
		_spec.SetField(oauth2token.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := oc.mutation.ExpiresAt(); ok {
		_spec.SetField(oauth2token.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := oc.mutation.Revoked(); ok {
		_spec.SetField(oauth2token.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if value, ok := oc.mutation.Scope(); ok {
		_spec.SetField(oauth2token.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := oc.mutation.DeviceInfo(); ok {
		_spec.SetField(oauth2token.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauth2token.UserTable,
			Columns: []string{oauth2token.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_oauth2_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Oauth2Token.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Oauth2TokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *Oauth2TokenCreate) OnConflict(opts ...sql.ConflictOption) *Oauth2TokenUpsertOne {
	oc.conflict = opts
	return &Oauth2TokenUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *Oauth2TokenCreate) OnConflictColumns(columns ...string) *Oauth2TokenUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &Oauth2TokenUpsertOne{
		create: oc,
	}
}

type (
	// Oauth2TokenUpsertOne is the builder for "upsert"-ing
	//  one Oauth2Token node.
	Oauth2TokenUpsertOne struct {
		create *Oauth2TokenCreate
	}

	// Oauth2TokenUpsert is the "OnConflict" setter.
	Oauth2TokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2TokenUpsert) SetUpdatedAt(v time.Time) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateUpdatedAt() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldUpdatedAt)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *Oauth2TokenUpsert) SetAccessToken(v string) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateAccessToken() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *Oauth2TokenUpsert) SetRefreshToken(v string) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateRefreshToken() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldRefreshToken)
	return u
}

// SetClientID sets the "client_id" field.
func (u *Oauth2TokenUpsert) SetClientID(v string) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateClientID() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldClientID)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2TokenUpsert) SetExpiresAt(v time.Time) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateExpiresAt() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldExpiresAt)
	return u
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2TokenUpsert) SetRevoked(v bool) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldRevoked, v)
	return u
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateRevoked() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldRevoked)
	return u
}

// SetScope sets the "scope" field.
func (u *Oauth2TokenUpsert) SetScope(v string) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateScope() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldScope)
	return u
}

// SetDeviceInfo sets the "device_info" field.
func (u *Oauth2TokenUpsert) SetDeviceInfo(v string) *Oauth2TokenUpsert {
	u.Set(oauth2token.FieldDeviceInfo, v)
	return u
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *Oauth2TokenUpsert) UpdateDeviceInfo() *Oauth2TokenUpsert {
	u.SetExcluded(oauth2token.FieldDeviceInfo)
	return u
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (u *Oauth2TokenUpsert) ClearDeviceInfo() *Oauth2TokenUpsert {
	u.SetNull(oauth2token.FieldDeviceInfo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauth2token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Oauth2TokenUpsertOne) UpdateNewValues() *Oauth2TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauth2token.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauth2token.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Oauth2TokenUpsertOne) Ignore() *Oauth2TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Oauth2TokenUpsertOne) DoNothing() *Oauth2TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Oauth2TokenCreate.OnConflict
// documentation for more info.
func (u *Oauth2TokenUpsertOne) Update(set func(*Oauth2TokenUpsert)) *Oauth2TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Oauth2TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2TokenUpsertOne) SetUpdatedAt(v time.Time) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateUpdatedAt() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *Oauth2TokenUpsertOne) SetAccessToken(v string) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateAccessToken() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *Oauth2TokenUpsertOne) SetRefreshToken(v string) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateRefreshToken() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetClientID sets the "client_id" field.
func (u *Oauth2TokenUpsertOne) SetClientID(v string) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateClientID() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateClientID()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2TokenUpsertOne) SetExpiresAt(v time.Time) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateExpiresAt() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2TokenUpsertOne) SetRevoked(v bool) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateRevoked() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateRevoked()
	})
}

// SetScope sets the "scope" field.
func (u *Oauth2TokenUpsertOne) SetScope(v string) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateScope() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateScope()
	})
}

// SetDeviceInfo sets the "device_info" field.
func (u *Oauth2TokenUpsertOne) SetDeviceInfo(v string) *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetDeviceInfo(v)
	})
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *Oauth2TokenUpsertOne) UpdateDeviceInfo() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateDeviceInfo()
	})
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (u *Oauth2TokenUpsertOne) ClearDeviceInfo() *Oauth2TokenUpsertOne {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.ClearDeviceInfo()
	})
}

// Exec executes the query.
func (u *Oauth2TokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Oauth2TokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Oauth2TokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Oauth2TokenUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: Oauth2TokenUpsertOne.ID is not supported by MySQL driver. Use Oauth2TokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Oauth2TokenUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Oauth2TokenCreateBulk is the builder for creating many Oauth2Token entities in bulk.
type Oauth2TokenCreateBulk struct {
	config
	err      error
	builders []*Oauth2TokenCreate
	conflict []sql.ConflictOption
}

// Save creates the Oauth2Token entities in the database.
func (ocb *Oauth2TokenCreateBulk) Save(ctx context.Context) ([]*Oauth2Token, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Oauth2Token, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Oauth2TokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *Oauth2TokenCreateBulk) SaveX(ctx context.Context) []*Oauth2Token {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *Oauth2TokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *Oauth2TokenCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Oauth2Token.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Oauth2TokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *Oauth2TokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *Oauth2TokenUpsertBulk {
	ocb.conflict = opts
	return &Oauth2TokenUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *Oauth2TokenCreateBulk) OnConflictColumns(columns ...string) *Oauth2TokenUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &Oauth2TokenUpsertBulk{
		create: ocb,
	}
}

// Oauth2TokenUpsertBulk is the builder for "upsert"-ing
// a bulk of Oauth2Token nodes.
type Oauth2TokenUpsertBulk struct {
	create *Oauth2TokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauth2token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Oauth2TokenUpsertBulk) UpdateNewValues() *Oauth2TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauth2token.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauth2token.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Oauth2Token.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Oauth2TokenUpsertBulk) Ignore() *Oauth2TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Oauth2TokenUpsertBulk) DoNothing() *Oauth2TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Oauth2TokenCreateBulk.OnConflict
// documentation for more info.
func (u *Oauth2TokenUpsertBulk) Update(set func(*Oauth2TokenUpsert)) *Oauth2TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Oauth2TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2TokenUpsertBulk) SetUpdatedAt(v time.Time) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateUpdatedAt() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *Oauth2TokenUpsertBulk) SetAccessToken(v string) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateAccessToken() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *Oauth2TokenUpsertBulk) SetRefreshToken(v string) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateRefreshToken() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetClientID sets the "client_id" field.
func (u *Oauth2TokenUpsertBulk) SetClientID(v string) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateClientID() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateClientID()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2TokenUpsertBulk) SetExpiresAt(v time.Time) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateExpiresAt() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2TokenUpsertBulk) SetRevoked(v bool) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateRevoked() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateRevoked()
	})
}

// SetScope sets the "scope" field.
func (u *Oauth2TokenUpsertBulk) SetScope(v string) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateScope() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateScope()
	})
}

// SetDeviceInfo sets the "device_info" field.
func (u *Oauth2TokenUpsertBulk) SetDeviceInfo(v string) *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.SetDeviceInfo(v)
	})
}

// UpdateDeviceInfo sets the "device_info" field to the value that was provided on create.
func (u *Oauth2TokenUpsertBulk) UpdateDeviceInfo() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.UpdateDeviceInfo()
	})
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (u *Oauth2TokenUpsertBulk) ClearDeviceInfo() *Oauth2TokenUpsertBulk {
	return u.Update(func(s *Oauth2TokenUpsert) {
		s.ClearDeviceInfo()
	})
}

// Exec executes the query.
func (u *Oauth2TokenUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Oauth2TokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Oauth2TokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Oauth2TokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
