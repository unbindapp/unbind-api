// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/template"
)

// TemplateUpdate is the builder for updating Template entities.
type TemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *TemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tu *TemplateUpdate) Where(ps ...predicate.Template) *TemplateUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TemplateUpdate) SetUpdatedAt(t time.Time) *TemplateUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetName sets the "name" field.
func (tu *TemplateUpdate) SetName(s string) *TemplateUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableName(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetVersion sets the "version" field.
func (tu *TemplateUpdate) SetVersion(i int) *TemplateUpdate {
	tu.mutation.ResetVersion()
	tu.mutation.SetVersion(i)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableVersion(i *int) *TemplateUpdate {
	if i != nil {
		tu.SetVersion(*i)
	}
	return tu
}

// AddVersion adds i to the "version" field.
func (tu *TemplateUpdate) AddVersion(i int) *TemplateUpdate {
	tu.mutation.AddVersion(i)
	return tu
}

// SetImmutable sets the "immutable" field.
func (tu *TemplateUpdate) SetImmutable(b bool) *TemplateUpdate {
	tu.mutation.SetImmutable(b)
	return tu
}

// SetNillableImmutable sets the "immutable" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableImmutable(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetImmutable(*b)
	}
	return tu
}

// SetDefinition sets the "definition" field.
func (tu *TemplateUpdate) SetDefinition(sd schema.TemplateDefinition) *TemplateUpdate {
	tu.mutation.SetDefinition(sd)
	return tu
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableDefinition(sd *schema.TemplateDefinition) *TemplateUpdate {
	if sd != nil {
		tu.SetDefinition(*sd)
	}
	return tu
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (tu *TemplateUpdate) AddServiceIDs(ids ...uuid.UUID) *TemplateUpdate {
	tu.mutation.AddServiceIDs(ids...)
	return tu
}

// AddServices adds the "services" edges to the Service entity.
func (tu *TemplateUpdate) AddServices(s ...*Service) *TemplateUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddServiceIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tu *TemplateUpdate) Mutation() *TemplateMutation {
	return tu.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (tu *TemplateUpdate) ClearServices() *TemplateUpdate {
	tu.mutation.ClearServices()
	return tu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (tu *TemplateUpdate) RemoveServiceIDs(ids ...uuid.UUID) *TemplateUpdate {
	tu.mutation.RemoveServiceIDs(ids...)
	return tu
}

// RemoveServices removes "services" edges to Service entities.
func (tu *TemplateUpdate) RemoveServices(s ...*Service) *TemplateUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TemplateUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TemplateUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TemplateUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TemplateUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := template.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedVersion(); ok {
		_spec.AddField(template.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Immutable(); ok {
		_spec.SetField(template.FieldImmutable, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Definition(); ok {
		_spec.SetField(template.FieldDefinition, field.TypeJSON, value)
	}
	if tu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !tu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TemplateUpdateOne is the builder for updating a single Template entity.
type TemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TemplateUpdateOne) SetUpdatedAt(t time.Time) *TemplateUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TemplateUpdateOne) SetName(s string) *TemplateUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableName(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TemplateUpdateOne) SetVersion(i int) *TemplateUpdateOne {
	tuo.mutation.ResetVersion()
	tuo.mutation.SetVersion(i)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableVersion(i *int) *TemplateUpdateOne {
	if i != nil {
		tuo.SetVersion(*i)
	}
	return tuo
}

// AddVersion adds i to the "version" field.
func (tuo *TemplateUpdateOne) AddVersion(i int) *TemplateUpdateOne {
	tuo.mutation.AddVersion(i)
	return tuo
}

// SetImmutable sets the "immutable" field.
func (tuo *TemplateUpdateOne) SetImmutable(b bool) *TemplateUpdateOne {
	tuo.mutation.SetImmutable(b)
	return tuo
}

// SetNillableImmutable sets the "immutable" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableImmutable(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetImmutable(*b)
	}
	return tuo
}

// SetDefinition sets the "definition" field.
func (tuo *TemplateUpdateOne) SetDefinition(sd schema.TemplateDefinition) *TemplateUpdateOne {
	tuo.mutation.SetDefinition(sd)
	return tuo
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableDefinition(sd *schema.TemplateDefinition) *TemplateUpdateOne {
	if sd != nil {
		tuo.SetDefinition(*sd)
	}
	return tuo
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (tuo *TemplateUpdateOne) AddServiceIDs(ids ...uuid.UUID) *TemplateUpdateOne {
	tuo.mutation.AddServiceIDs(ids...)
	return tuo
}

// AddServices adds the "services" edges to the Service entity.
func (tuo *TemplateUpdateOne) AddServices(s ...*Service) *TemplateUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddServiceIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tuo *TemplateUpdateOne) Mutation() *TemplateMutation {
	return tuo.mutation
}

// ClearServices clears all "services" edges to the Service entity.
func (tuo *TemplateUpdateOne) ClearServices() *TemplateUpdateOne {
	tuo.mutation.ClearServices()
	return tuo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (tuo *TemplateUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *TemplateUpdateOne {
	tuo.mutation.RemoveServiceIDs(ids...)
	return tuo
}

// RemoveServices removes "services" edges to Service entities.
func (tuo *TemplateUpdateOne) RemoveServices(s ...*Service) *TemplateUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tuo *TemplateUpdateOne) Where(ps ...predicate.Template) *TemplateUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TemplateUpdateOne) Select(field string, fields ...string) *TemplateUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Template entity.
func (tuo *TemplateUpdateOne) Save(ctx context.Context) (*Template, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TemplateUpdateOne) SaveX(ctx context.Context) *Template {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TemplateUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TemplateUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := template.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TemplateUpdateOne) sqlSave(ctx context.Context) (_node *Template, err error) {
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Template.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, template.FieldID)
		for _, f := range fields {
			if !template.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != template.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(template.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(template.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedVersion(); ok {
		_spec.AddField(template.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Immutable(); ok {
		_spec.SetField(template.FieldImmutable, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Definition(); ok {
		_spec.SetField(template.FieldDefinition, field.TypeJSON, value)
	}
	if tuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !tuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ServicesTable,
			Columns: []string{template.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Template{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
