// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/systemsetting"
)

// SystemSettingUpdate is the builder for updating SystemSetting entities.
type SystemSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemSettingUpdate builder.
func (ssu *SystemSettingUpdate) Where(ps ...predicate.SystemSetting) *SystemSettingUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SystemSettingUpdate) SetUpdatedAt(t time.Time) *SystemSettingUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetWildcardBaseURL sets the "wildcard_base_url" field.
func (ssu *SystemSettingUpdate) SetWildcardBaseURL(s string) *SystemSettingUpdate {
	ssu.mutation.SetWildcardBaseURL(s)
	return ssu
}

// SetNillableWildcardBaseURL sets the "wildcard_base_url" field if the given value is not nil.
func (ssu *SystemSettingUpdate) SetNillableWildcardBaseURL(s *string) *SystemSettingUpdate {
	if s != nil {
		ssu.SetWildcardBaseURL(*s)
	}
	return ssu
}

// ClearWildcardBaseURL clears the value of the "wildcard_base_url" field.
func (ssu *SystemSettingUpdate) ClearWildcardBaseURL() *SystemSettingUpdate {
	ssu.mutation.ClearWildcardBaseURL()
	return ssu
}

// Mutation returns the SystemSettingMutation object of the builder.
func (ssu *SystemSettingUpdate) Mutation() *SystemSettingMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SystemSettingUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SystemSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SystemSettingUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SystemSettingUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SystemSettingUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := systemsetting.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssu *SystemSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemSettingUpdate {
	ssu.modifiers = append(ssu.modifiers, modifiers...)
	return ssu
}

func (ssu *SystemSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemsetting.Table, systemsetting.Columns, sqlgraph.NewFieldSpec(systemsetting.FieldID, field.TypeUUID))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.WildcardBaseURL(); ok {
		_spec.SetField(systemsetting.FieldWildcardBaseURL, field.TypeString, value)
	}
	if ssu.mutation.WildcardBaseURLCleared() {
		_spec.ClearField(systemsetting.FieldWildcardBaseURL, field.TypeString)
	}
	_spec.AddModifiers(ssu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SystemSettingUpdateOne is the builder for updating a single SystemSetting entity.
type SystemSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SystemSettingUpdateOne) SetUpdatedAt(t time.Time) *SystemSettingUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetWildcardBaseURL sets the "wildcard_base_url" field.
func (ssuo *SystemSettingUpdateOne) SetWildcardBaseURL(s string) *SystemSettingUpdateOne {
	ssuo.mutation.SetWildcardBaseURL(s)
	return ssuo
}

// SetNillableWildcardBaseURL sets the "wildcard_base_url" field if the given value is not nil.
func (ssuo *SystemSettingUpdateOne) SetNillableWildcardBaseURL(s *string) *SystemSettingUpdateOne {
	if s != nil {
		ssuo.SetWildcardBaseURL(*s)
	}
	return ssuo
}

// ClearWildcardBaseURL clears the value of the "wildcard_base_url" field.
func (ssuo *SystemSettingUpdateOne) ClearWildcardBaseURL() *SystemSettingUpdateOne {
	ssuo.mutation.ClearWildcardBaseURL()
	return ssuo
}

// Mutation returns the SystemSettingMutation object of the builder.
func (ssuo *SystemSettingUpdateOne) Mutation() *SystemSettingMutation {
	return ssuo.mutation
}

// Where appends a list predicates to the SystemSettingUpdate builder.
func (ssuo *SystemSettingUpdateOne) Where(ps ...predicate.SystemSetting) *SystemSettingUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SystemSettingUpdateOne) Select(field string, fields ...string) *SystemSettingUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SystemSetting entity.
func (ssuo *SystemSettingUpdateOne) Save(ctx context.Context) (*SystemSetting, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SystemSettingUpdateOne) SaveX(ctx context.Context) *SystemSetting {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SystemSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SystemSettingUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SystemSettingUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := systemsetting.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssuo *SystemSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemSettingUpdateOne {
	ssuo.modifiers = append(ssuo.modifiers, modifiers...)
	return ssuo
}

func (ssuo *SystemSettingUpdateOne) sqlSave(ctx context.Context) (_node *SystemSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemsetting.Table, systemsetting.Columns, sqlgraph.NewFieldSpec(systemsetting.FieldID, field.TypeUUID))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemsetting.FieldID)
		for _, f := range fields {
			if !systemsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.WildcardBaseURL(); ok {
		_spec.SetField(systemsetting.FieldWildcardBaseURL, field.TypeString, value)
	}
	if ssuo.mutation.WildcardBaseURLCleared() {
		_spec.ClearField(systemsetting.FieldWildcardBaseURL, field.TypeString)
	}
	_spec.AddModifiers(ssuo.modifiers...)
	_node = &SystemSetting{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
