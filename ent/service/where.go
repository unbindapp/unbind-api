// Code generated by ent, DO NOT EDIT.

package service

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// KubernetesName applies equality check predicate on the "kubernetes_name" field. It's identical to KubernetesNameEQ.
func KubernetesName(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldKubernetesName, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldEnvironmentID, v))
}

// Database applies equality check predicate on the "database" field. It's identical to DatabaseEQ.
func Database(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDatabase, v))
}

// DatabaseVersion applies equality check predicate on the "database_version" field. It's identical to DatabaseVersionEQ.
func DatabaseVersion(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDatabaseVersion, v))
}

// GithubInstallationID applies equality check predicate on the "github_installation_id" field. It's identical to GithubInstallationIDEQ.
func GithubInstallationID(v int64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGithubInstallationID, v))
}

// GitRepositoryOwner applies equality check predicate on the "git_repository_owner" field. It's identical to GitRepositoryOwnerEQ.
func GitRepositoryOwner(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepositoryOwner, v))
}

// GitRepository applies equality check predicate on the "git_repository" field. It's identical to GitRepositoryEQ.
func GitRepository(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepository, v))
}

// KubernetesSecret applies equality check predicate on the "kubernetes_secret" field. It's identical to KubernetesSecretEQ.
func KubernetesSecret(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldKubernetesSecret, v))
}

// CurrentDeploymentID applies equality check predicate on the "current_deployment_id" field. It's identical to CurrentDeploymentIDEQ.
func CurrentDeploymentID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCurrentDeploymentID, v))
}

// TemplateID applies equality check predicate on the "template_id" field. It's identical to TemplateIDEQ.
func TemplateID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateInstanceID applies equality check predicate on the "template_instance_id" field. It's identical to TemplateInstanceIDEQ.
func TemplateInstanceID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTemplateInstanceID, v))
}

// ServiceGroupID applies equality check predicate on the "service_group_id" field. It's identical to ServiceGroupIDEQ.
func ServiceGroupID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldServiceGroupID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v schema.ServiceType) predicate.Service {
	vc := v
	return predicate.Service(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v schema.ServiceType) predicate.Service {
	vc := v
	return predicate.Service(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...schema.ServiceType) predicate.Service {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Service(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...schema.ServiceType) predicate.Service {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Service(sql.FieldNotIn(FieldType, v...))
}

// KubernetesNameEQ applies the EQ predicate on the "kubernetes_name" field.
func KubernetesNameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldKubernetesName, v))
}

// KubernetesNameNEQ applies the NEQ predicate on the "kubernetes_name" field.
func KubernetesNameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldKubernetesName, v))
}

// KubernetesNameIn applies the In predicate on the "kubernetes_name" field.
func KubernetesNameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldKubernetesName, vs...))
}

// KubernetesNameNotIn applies the NotIn predicate on the "kubernetes_name" field.
func KubernetesNameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldKubernetesName, vs...))
}

// KubernetesNameGT applies the GT predicate on the "kubernetes_name" field.
func KubernetesNameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldKubernetesName, v))
}

// KubernetesNameGTE applies the GTE predicate on the "kubernetes_name" field.
func KubernetesNameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldKubernetesName, v))
}

// KubernetesNameLT applies the LT predicate on the "kubernetes_name" field.
func KubernetesNameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldKubernetesName, v))
}

// KubernetesNameLTE applies the LTE predicate on the "kubernetes_name" field.
func KubernetesNameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldKubernetesName, v))
}

// KubernetesNameContains applies the Contains predicate on the "kubernetes_name" field.
func KubernetesNameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldKubernetesName, v))
}

// KubernetesNameHasPrefix applies the HasPrefix predicate on the "kubernetes_name" field.
func KubernetesNameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldKubernetesName, v))
}

// KubernetesNameHasSuffix applies the HasSuffix predicate on the "kubernetes_name" field.
func KubernetesNameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldKubernetesName, v))
}

// KubernetesNameEqualFold applies the EqualFold predicate on the "kubernetes_name" field.
func KubernetesNameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldKubernetesName, v))
}

// KubernetesNameContainsFold applies the ContainsFold predicate on the "kubernetes_name" field.
func KubernetesNameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldKubernetesName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescription, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// DatabaseEQ applies the EQ predicate on the "database" field.
func DatabaseEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDatabase, v))
}

// DatabaseNEQ applies the NEQ predicate on the "database" field.
func DatabaseNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDatabase, v))
}

// DatabaseIn applies the In predicate on the "database" field.
func DatabaseIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDatabase, vs...))
}

// DatabaseNotIn applies the NotIn predicate on the "database" field.
func DatabaseNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDatabase, vs...))
}

// DatabaseGT applies the GT predicate on the "database" field.
func DatabaseGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDatabase, v))
}

// DatabaseGTE applies the GTE predicate on the "database" field.
func DatabaseGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDatabase, v))
}

// DatabaseLT applies the LT predicate on the "database" field.
func DatabaseLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDatabase, v))
}

// DatabaseLTE applies the LTE predicate on the "database" field.
func DatabaseLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDatabase, v))
}

// DatabaseContains applies the Contains predicate on the "database" field.
func DatabaseContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDatabase, v))
}

// DatabaseHasPrefix applies the HasPrefix predicate on the "database" field.
func DatabaseHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDatabase, v))
}

// DatabaseHasSuffix applies the HasSuffix predicate on the "database" field.
func DatabaseHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDatabase, v))
}

// DatabaseIsNil applies the IsNil predicate on the "database" field.
func DatabaseIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDatabase))
}

// DatabaseNotNil applies the NotNil predicate on the "database" field.
func DatabaseNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDatabase))
}

// DatabaseEqualFold applies the EqualFold predicate on the "database" field.
func DatabaseEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDatabase, v))
}

// DatabaseContainsFold applies the ContainsFold predicate on the "database" field.
func DatabaseContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDatabase, v))
}

// DatabaseVersionEQ applies the EQ predicate on the "database_version" field.
func DatabaseVersionEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDatabaseVersion, v))
}

// DatabaseVersionNEQ applies the NEQ predicate on the "database_version" field.
func DatabaseVersionNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDatabaseVersion, v))
}

// DatabaseVersionIn applies the In predicate on the "database_version" field.
func DatabaseVersionIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDatabaseVersion, vs...))
}

// DatabaseVersionNotIn applies the NotIn predicate on the "database_version" field.
func DatabaseVersionNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDatabaseVersion, vs...))
}

// DatabaseVersionGT applies the GT predicate on the "database_version" field.
func DatabaseVersionGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDatabaseVersion, v))
}

// DatabaseVersionGTE applies the GTE predicate on the "database_version" field.
func DatabaseVersionGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDatabaseVersion, v))
}

// DatabaseVersionLT applies the LT predicate on the "database_version" field.
func DatabaseVersionLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDatabaseVersion, v))
}

// DatabaseVersionLTE applies the LTE predicate on the "database_version" field.
func DatabaseVersionLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDatabaseVersion, v))
}

// DatabaseVersionContains applies the Contains predicate on the "database_version" field.
func DatabaseVersionContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDatabaseVersion, v))
}

// DatabaseVersionHasPrefix applies the HasPrefix predicate on the "database_version" field.
func DatabaseVersionHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDatabaseVersion, v))
}

// DatabaseVersionHasSuffix applies the HasSuffix predicate on the "database_version" field.
func DatabaseVersionHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDatabaseVersion, v))
}

// DatabaseVersionIsNil applies the IsNil predicate on the "database_version" field.
func DatabaseVersionIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDatabaseVersion))
}

// DatabaseVersionNotNil applies the NotNil predicate on the "database_version" field.
func DatabaseVersionNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDatabaseVersion))
}

// DatabaseVersionEqualFold applies the EqualFold predicate on the "database_version" field.
func DatabaseVersionEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDatabaseVersion, v))
}

// DatabaseVersionContainsFold applies the ContainsFold predicate on the "database_version" field.
func DatabaseVersionContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDatabaseVersion, v))
}

// GithubInstallationIDEQ applies the EQ predicate on the "github_installation_id" field.
func GithubInstallationIDEQ(v int64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGithubInstallationID, v))
}

// GithubInstallationIDNEQ applies the NEQ predicate on the "github_installation_id" field.
func GithubInstallationIDNEQ(v int64) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGithubInstallationID, v))
}

// GithubInstallationIDIn applies the In predicate on the "github_installation_id" field.
func GithubInstallationIDIn(vs ...int64) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGithubInstallationID, vs...))
}

// GithubInstallationIDNotIn applies the NotIn predicate on the "github_installation_id" field.
func GithubInstallationIDNotIn(vs ...int64) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGithubInstallationID, vs...))
}

// GithubInstallationIDIsNil applies the IsNil predicate on the "github_installation_id" field.
func GithubInstallationIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGithubInstallationID))
}

// GithubInstallationIDNotNil applies the NotNil predicate on the "github_installation_id" field.
func GithubInstallationIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGithubInstallationID))
}

// GitRepositoryOwnerEQ applies the EQ predicate on the "git_repository_owner" field.
func GitRepositoryOwnerEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerNEQ applies the NEQ predicate on the "git_repository_owner" field.
func GitRepositoryOwnerNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerIn applies the In predicate on the "git_repository_owner" field.
func GitRepositoryOwnerIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGitRepositoryOwner, vs...))
}

// GitRepositoryOwnerNotIn applies the NotIn predicate on the "git_repository_owner" field.
func GitRepositoryOwnerNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGitRepositoryOwner, vs...))
}

// GitRepositoryOwnerGT applies the GT predicate on the "git_repository_owner" field.
func GitRepositoryOwnerGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerGTE applies the GTE predicate on the "git_repository_owner" field.
func GitRepositoryOwnerGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerLT applies the LT predicate on the "git_repository_owner" field.
func GitRepositoryOwnerLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerLTE applies the LTE predicate on the "git_repository_owner" field.
func GitRepositoryOwnerLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerContains applies the Contains predicate on the "git_repository_owner" field.
func GitRepositoryOwnerContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerHasPrefix applies the HasPrefix predicate on the "git_repository_owner" field.
func GitRepositoryOwnerHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerHasSuffix applies the HasSuffix predicate on the "git_repository_owner" field.
func GitRepositoryOwnerHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerIsNil applies the IsNil predicate on the "git_repository_owner" field.
func GitRepositoryOwnerIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGitRepositoryOwner))
}

// GitRepositoryOwnerNotNil applies the NotNil predicate on the "git_repository_owner" field.
func GitRepositoryOwnerNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGitRepositoryOwner))
}

// GitRepositoryOwnerEqualFold applies the EqualFold predicate on the "git_repository_owner" field.
func GitRepositoryOwnerEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldGitRepositoryOwner, v))
}

// GitRepositoryOwnerContainsFold applies the ContainsFold predicate on the "git_repository_owner" field.
func GitRepositoryOwnerContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldGitRepositoryOwner, v))
}

// GitRepositoryEQ applies the EQ predicate on the "git_repository" field.
func GitRepositoryEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepository, v))
}

// GitRepositoryNEQ applies the NEQ predicate on the "git_repository" field.
func GitRepositoryNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGitRepository, v))
}

// GitRepositoryIn applies the In predicate on the "git_repository" field.
func GitRepositoryIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGitRepository, vs...))
}

// GitRepositoryNotIn applies the NotIn predicate on the "git_repository" field.
func GitRepositoryNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGitRepository, vs...))
}

// GitRepositoryGT applies the GT predicate on the "git_repository" field.
func GitRepositoryGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldGitRepository, v))
}

// GitRepositoryGTE applies the GTE predicate on the "git_repository" field.
func GitRepositoryGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldGitRepository, v))
}

// GitRepositoryLT applies the LT predicate on the "git_repository" field.
func GitRepositoryLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldGitRepository, v))
}

// GitRepositoryLTE applies the LTE predicate on the "git_repository" field.
func GitRepositoryLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldGitRepository, v))
}

// GitRepositoryContains applies the Contains predicate on the "git_repository" field.
func GitRepositoryContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldGitRepository, v))
}

// GitRepositoryHasPrefix applies the HasPrefix predicate on the "git_repository" field.
func GitRepositoryHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldGitRepository, v))
}

// GitRepositoryHasSuffix applies the HasSuffix predicate on the "git_repository" field.
func GitRepositoryHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldGitRepository, v))
}

// GitRepositoryIsNil applies the IsNil predicate on the "git_repository" field.
func GitRepositoryIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGitRepository))
}

// GitRepositoryNotNil applies the NotNil predicate on the "git_repository" field.
func GitRepositoryNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGitRepository))
}

// GitRepositoryEqualFold applies the EqualFold predicate on the "git_repository" field.
func GitRepositoryEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldGitRepository, v))
}

// GitRepositoryContainsFold applies the ContainsFold predicate on the "git_repository" field.
func GitRepositoryContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldGitRepository, v))
}

// KubernetesSecretEQ applies the EQ predicate on the "kubernetes_secret" field.
func KubernetesSecretEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretNEQ applies the NEQ predicate on the "kubernetes_secret" field.
func KubernetesSecretNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretIn applies the In predicate on the "kubernetes_secret" field.
func KubernetesSecretIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretNotIn applies the NotIn predicate on the "kubernetes_secret" field.
func KubernetesSecretNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretGT applies the GT predicate on the "kubernetes_secret" field.
func KubernetesSecretGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldKubernetesSecret, v))
}

// KubernetesSecretGTE applies the GTE predicate on the "kubernetes_secret" field.
func KubernetesSecretGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldKubernetesSecret, v))
}

// KubernetesSecretLT applies the LT predicate on the "kubernetes_secret" field.
func KubernetesSecretLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldKubernetesSecret, v))
}

// KubernetesSecretLTE applies the LTE predicate on the "kubernetes_secret" field.
func KubernetesSecretLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldKubernetesSecret, v))
}

// KubernetesSecretContains applies the Contains predicate on the "kubernetes_secret" field.
func KubernetesSecretContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldKubernetesSecret, v))
}

// KubernetesSecretHasPrefix applies the HasPrefix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldKubernetesSecret, v))
}

// KubernetesSecretHasSuffix applies the HasSuffix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldKubernetesSecret, v))
}

// KubernetesSecretEqualFold applies the EqualFold predicate on the "kubernetes_secret" field.
func KubernetesSecretEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldKubernetesSecret, v))
}

// KubernetesSecretContainsFold applies the ContainsFold predicate on the "kubernetes_secret" field.
func KubernetesSecretContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldKubernetesSecret, v))
}

// CurrentDeploymentIDEQ applies the EQ predicate on the "current_deployment_id" field.
func CurrentDeploymentIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCurrentDeploymentID, v))
}

// CurrentDeploymentIDNEQ applies the NEQ predicate on the "current_deployment_id" field.
func CurrentDeploymentIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCurrentDeploymentID, v))
}

// CurrentDeploymentIDIn applies the In predicate on the "current_deployment_id" field.
func CurrentDeploymentIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCurrentDeploymentID, vs...))
}

// CurrentDeploymentIDNotIn applies the NotIn predicate on the "current_deployment_id" field.
func CurrentDeploymentIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCurrentDeploymentID, vs...))
}

// CurrentDeploymentIDIsNil applies the IsNil predicate on the "current_deployment_id" field.
func CurrentDeploymentIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldCurrentDeploymentID))
}

// CurrentDeploymentIDNotNil applies the NotNil predicate on the "current_deployment_id" field.
func CurrentDeploymentIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldCurrentDeploymentID))
}

// TemplateIDEQ applies the EQ predicate on the "template_id" field.
func TemplateIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTemplateID, v))
}

// TemplateIDNEQ applies the NEQ predicate on the "template_id" field.
func TemplateIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldTemplateID, v))
}

// TemplateIDIn applies the In predicate on the "template_id" field.
func TemplateIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldTemplateID, vs...))
}

// TemplateIDNotIn applies the NotIn predicate on the "template_id" field.
func TemplateIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldTemplateID, vs...))
}

// TemplateIDIsNil applies the IsNil predicate on the "template_id" field.
func TemplateIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldTemplateID))
}

// TemplateIDNotNil applies the NotNil predicate on the "template_id" field.
func TemplateIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldTemplateID))
}

// TemplateInstanceIDEQ applies the EQ predicate on the "template_instance_id" field.
func TemplateInstanceIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDNEQ applies the NEQ predicate on the "template_instance_id" field.
func TemplateInstanceIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDIn applies the In predicate on the "template_instance_id" field.
func TemplateInstanceIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldTemplateInstanceID, vs...))
}

// TemplateInstanceIDNotIn applies the NotIn predicate on the "template_instance_id" field.
func TemplateInstanceIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldTemplateInstanceID, vs...))
}

// TemplateInstanceIDGT applies the GT predicate on the "template_instance_id" field.
func TemplateInstanceIDGT(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDGTE applies the GTE predicate on the "template_instance_id" field.
func TemplateInstanceIDGTE(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDLT applies the LT predicate on the "template_instance_id" field.
func TemplateInstanceIDLT(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDLTE applies the LTE predicate on the "template_instance_id" field.
func TemplateInstanceIDLTE(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldTemplateInstanceID, v))
}

// TemplateInstanceIDIsNil applies the IsNil predicate on the "template_instance_id" field.
func TemplateInstanceIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldTemplateInstanceID))
}

// TemplateInstanceIDNotNil applies the NotNil predicate on the "template_instance_id" field.
func TemplateInstanceIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldTemplateInstanceID))
}

// ServiceGroupIDEQ applies the EQ predicate on the "service_group_id" field.
func ServiceGroupIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldServiceGroupID, v))
}

// ServiceGroupIDNEQ applies the NEQ predicate on the "service_group_id" field.
func ServiceGroupIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldServiceGroupID, v))
}

// ServiceGroupIDIn applies the In predicate on the "service_group_id" field.
func ServiceGroupIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldServiceGroupID, vs...))
}

// ServiceGroupIDNotIn applies the NotIn predicate on the "service_group_id" field.
func ServiceGroupIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldServiceGroupID, vs...))
}

// ServiceGroupIDIsNil applies the IsNil predicate on the "service_group_id" field.
func ServiceGroupIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldServiceGroupID))
}

// ServiceGroupIDNotNil applies the NotNil predicate on the "service_group_id" field.
func ServiceGroupIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldServiceGroupID))
}

// HasEnvironment applies the HasEdge predicate on the "environment" edge.
func HasEnvironment() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGithubInstallation applies the HasEdge predicate on the "github_installation" edge.
func HasGithubInstallation() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GithubInstallationTable, GithubInstallationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGithubInstallationWith applies the HasEdge predicate on the "github_installation" edge with a given conditions (other predicates).
func HasGithubInstallationWith(preds ...predicate.GithubInstallation) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newGithubInstallationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceConfig applies the HasEdge predicate on the "service_config" edge.
func HasServiceConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceConfigTable, ServiceConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceConfigWith applies the HasEdge predicate on the "service_config" edge with a given conditions (other predicates).
func HasServiceConfigWith(preds ...predicate.ServiceConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeployments applies the HasEdge predicate on the "deployments" edge.
func HasDeployments() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeploymentsTable, DeploymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentsWith applies the HasEdge predicate on the "deployments" edge with a given conditions (other predicates).
func HasDeploymentsWith(preds ...predicate.Deployment) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newDeploymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrentDeployment applies the HasEdge predicate on the "current_deployment" edge.
func HasCurrentDeployment() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CurrentDeploymentTable, CurrentDeploymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentDeploymentWith applies the HasEdge predicate on the "current_deployment" edge with a given conditions (other predicates).
func HasCurrentDeploymentWith(preds ...predicate.Deployment) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newCurrentDeploymentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.Template) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceGroup applies the HasEdge predicate on the "service_group" edge.
func HasServiceGroup() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceGroupTable, ServiceGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceGroupWith applies the HasEdge predicate on the "service_group" edge with a given conditions (other predicates).
func HasServiceGroupWith(preds ...predicate.ServiceGroup) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVariableReferences applies the HasEdge predicate on the "variable_references" edge.
func HasVariableReferences() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VariableReferencesTable, VariableReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVariableReferencesWith applies the HasEdge predicate on the "variable_references" edge with a given conditions (other predicates).
func HasVariableReferencesWith(preds ...predicate.VariableReference) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newVariableReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(sql.NotPredicates(p))
}
