// Code generated by ent, DO NOT EDIT.

package service

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldProjectID, v))
}

// GithubInstallationID applies equality check predicate on the "github_installation_id" field. It's identical to GithubInstallationIDEQ.
func GithubInstallationID(v int64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGithubInstallationID, v))
}

// GitRepository applies equality check predicate on the "git_repository" field. It's identical to GitRepositoryEQ.
func GitRepository(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepository, v))
}

// GitBranch applies equality check predicate on the "git_branch" field. It's identical to GitBranchEQ.
func GitBranch(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitBranch, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldType, vs...))
}

// SubtypeEQ applies the EQ predicate on the "subtype" field.
func SubtypeEQ(v Subtype) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldSubtype, v))
}

// SubtypeNEQ applies the NEQ predicate on the "subtype" field.
func SubtypeNEQ(v Subtype) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldSubtype, v))
}

// SubtypeIn applies the In predicate on the "subtype" field.
func SubtypeIn(vs ...Subtype) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldSubtype, vs...))
}

// SubtypeNotIn applies the NotIn predicate on the "subtype" field.
func SubtypeNotIn(vs ...Subtype) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldSubtype, vs...))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldProjectID, vs...))
}

// GithubInstallationIDEQ applies the EQ predicate on the "github_installation_id" field.
func GithubInstallationIDEQ(v int64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGithubInstallationID, v))
}

// GithubInstallationIDNEQ applies the NEQ predicate on the "github_installation_id" field.
func GithubInstallationIDNEQ(v int64) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGithubInstallationID, v))
}

// GithubInstallationIDIn applies the In predicate on the "github_installation_id" field.
func GithubInstallationIDIn(vs ...int64) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGithubInstallationID, vs...))
}

// GithubInstallationIDNotIn applies the NotIn predicate on the "github_installation_id" field.
func GithubInstallationIDNotIn(vs ...int64) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGithubInstallationID, vs...))
}

// GithubInstallationIDIsNil applies the IsNil predicate on the "github_installation_id" field.
func GithubInstallationIDIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGithubInstallationID))
}

// GithubInstallationIDNotNil applies the NotNil predicate on the "github_installation_id" field.
func GithubInstallationIDNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGithubInstallationID))
}

// GitRepositoryEQ applies the EQ predicate on the "git_repository" field.
func GitRepositoryEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitRepository, v))
}

// GitRepositoryNEQ applies the NEQ predicate on the "git_repository" field.
func GitRepositoryNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGitRepository, v))
}

// GitRepositoryIn applies the In predicate on the "git_repository" field.
func GitRepositoryIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGitRepository, vs...))
}

// GitRepositoryNotIn applies the NotIn predicate on the "git_repository" field.
func GitRepositoryNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGitRepository, vs...))
}

// GitRepositoryGT applies the GT predicate on the "git_repository" field.
func GitRepositoryGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldGitRepository, v))
}

// GitRepositoryGTE applies the GTE predicate on the "git_repository" field.
func GitRepositoryGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldGitRepository, v))
}

// GitRepositoryLT applies the LT predicate on the "git_repository" field.
func GitRepositoryLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldGitRepository, v))
}

// GitRepositoryLTE applies the LTE predicate on the "git_repository" field.
func GitRepositoryLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldGitRepository, v))
}

// GitRepositoryContains applies the Contains predicate on the "git_repository" field.
func GitRepositoryContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldGitRepository, v))
}

// GitRepositoryHasPrefix applies the HasPrefix predicate on the "git_repository" field.
func GitRepositoryHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldGitRepository, v))
}

// GitRepositoryHasSuffix applies the HasSuffix predicate on the "git_repository" field.
func GitRepositoryHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldGitRepository, v))
}

// GitRepositoryIsNil applies the IsNil predicate on the "git_repository" field.
func GitRepositoryIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGitRepository))
}

// GitRepositoryNotNil applies the NotNil predicate on the "git_repository" field.
func GitRepositoryNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGitRepository))
}

// GitRepositoryEqualFold applies the EqualFold predicate on the "git_repository" field.
func GitRepositoryEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldGitRepository, v))
}

// GitRepositoryContainsFold applies the ContainsFold predicate on the "git_repository" field.
func GitRepositoryContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldGitRepository, v))
}

// GitBranchEQ applies the EQ predicate on the "git_branch" field.
func GitBranchEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldGitBranch, v))
}

// GitBranchNEQ applies the NEQ predicate on the "git_branch" field.
func GitBranchNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldGitBranch, v))
}

// GitBranchIn applies the In predicate on the "git_branch" field.
func GitBranchIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldGitBranch, vs...))
}

// GitBranchNotIn applies the NotIn predicate on the "git_branch" field.
func GitBranchNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldGitBranch, vs...))
}

// GitBranchGT applies the GT predicate on the "git_branch" field.
func GitBranchGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldGitBranch, v))
}

// GitBranchGTE applies the GTE predicate on the "git_branch" field.
func GitBranchGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldGitBranch, v))
}

// GitBranchLT applies the LT predicate on the "git_branch" field.
func GitBranchLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldGitBranch, v))
}

// GitBranchLTE applies the LTE predicate on the "git_branch" field.
func GitBranchLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldGitBranch, v))
}

// GitBranchContains applies the Contains predicate on the "git_branch" field.
func GitBranchContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldGitBranch, v))
}

// GitBranchHasPrefix applies the HasPrefix predicate on the "git_branch" field.
func GitBranchHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldGitBranch, v))
}

// GitBranchHasSuffix applies the HasSuffix predicate on the "git_branch" field.
func GitBranchHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldGitBranch, v))
}

// GitBranchIsNil applies the IsNil predicate on the "git_branch" field.
func GitBranchIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldGitBranch))
}

// GitBranchNotNil applies the NotNil predicate on the "git_branch" field.
func GitBranchNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldGitBranch))
}

// GitBranchEqualFold applies the EqualFold predicate on the "git_branch" field.
func GitBranchEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldGitBranch, v))
}

// GitBranchContainsFold applies the ContainsFold predicate on the "git_branch" field.
func GitBranchContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldGitBranch, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGithubInstallation applies the HasEdge predicate on the "github_installation" edge.
func HasGithubInstallation() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GithubInstallationTable, GithubInstallationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGithubInstallationWith applies the HasEdge predicate on the "github_installation" edge with a given conditions (other predicates).
func HasGithubInstallationWith(preds ...predicate.GithubInstallation) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newGithubInstallationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceConfigs applies the HasEdge predicate on the "service_configs" edge.
func HasServiceConfigs() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceConfigsTable, ServiceConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceConfigsWith applies the HasEdge predicate on the "service_configs" edge with a given conditions (other predicates).
func HasServiceConfigsWith(preds ...predicate.ServiceConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(sql.NotPredicates(p))
}
