// Code generated by ent, DO NOT EDIT.

package service

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSubtype holds the string denoting the subtype field in the database.
	FieldSubtype = "subtype"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldGithubInstallationID holds the string denoting the github_installation_id field in the database.
	FieldGithubInstallationID = "github_installation_id"
	// FieldGitRepository holds the string denoting the git_repository field in the database.
	FieldGitRepository = "git_repository"
	// FieldGitBranch holds the string denoting the git_branch field in the database.
	FieldGitBranch = "git_branch"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeGithubInstallation holds the string denoting the github_installation edge name in mutations.
	EdgeGithubInstallation = "github_installation"
	// EdgeServiceConfigs holds the string denoting the service_configs edge name in mutations.
	EdgeServiceConfigs = "service_configs"
	// Table holds the table name of the service in the database.
	Table = "services"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "services"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// GithubInstallationTable is the table that holds the github_installation relation/edge.
	GithubInstallationTable = "services"
	// GithubInstallationInverseTable is the table name for the GithubInstallation entity.
	// It exists in this package in order to avoid circular dependency with the "githubinstallation" package.
	GithubInstallationInverseTable = "github_installations"
	// GithubInstallationColumn is the table column denoting the github_installation relation/edge.
	GithubInstallationColumn = "github_installation_id"
	// ServiceConfigsTable is the table that holds the service_configs relation/edge.
	ServiceConfigsTable = "service_configs"
	// ServiceConfigsInverseTable is the table name for the ServiceConfig entity.
	// It exists in this package in order to avoid circular dependency with the "serviceconfig" package.
	ServiceConfigsInverseTable = "service_configs"
	// ServiceConfigsColumn is the table column denoting the service_configs relation/edge.
	ServiceConfigsColumn = "service_id"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldType,
	FieldSubtype,
	FieldProjectID,
	FieldGithubInstallationID,
	FieldGitRepository,
	FieldGitBranch,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultGitBranch holds the default value on creation for the "git_branch" field.
	DefaultGitBranch string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDatabase Type = "database"
	TypeAPI      Type = "api"
	TypeWeb      Type = "web"
	TypeCustom   Type = "custom"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDatabase, TypeAPI, TypeWeb, TypeCustom:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for type field: %q", _type)
	}
}

// Subtype defines the type for the "subtype" enum field.
type Subtype string

// Subtype values.
const (
	SubtypeReact Subtype = "react"
	SubtypeGo    Subtype = "go"
	SubtypeNode  Subtype = "node"
	SubtypeNext  Subtype = "next"
	SubtypeOther Subtype = "other"
)

func (s Subtype) String() string {
	return string(s)
}

// SubtypeValidator is a validator for the "subtype" field enum values. It is called by the builders before save.
func SubtypeValidator(s Subtype) error {
	switch s {
	case SubtypeReact, SubtypeGo, SubtypeNode, SubtypeNext, SubtypeOther:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for subtype field: %q", s)
	}
}

// OrderOption defines the ordering options for the Service queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySubtype orders the results by the subtype field.
func BySubtype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtype, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByGithubInstallationID orders the results by the github_installation_id field.
func ByGithubInstallationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubInstallationID, opts...).ToFunc()
}

// ByGitRepository orders the results by the git_repository field.
func ByGitRepository(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitRepository, opts...).ToFunc()
}

// ByGitBranch orders the results by the git_branch field.
func ByGitBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitBranch, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByGithubInstallationField orders the results by github_installation field.
func ByGithubInstallationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGithubInstallationStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceConfigsField orders the results by service_configs field.
func ByServiceConfigsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceConfigsStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newGithubInstallationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GithubInstallationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GithubInstallationTable, GithubInstallationColumn),
	)
}
func newServiceConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ServiceConfigsTable, ServiceConfigsColumn),
	)
}
