// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/registry"
)

// RegistryUpdate is the builder for updating Registry entities.
type RegistryUpdate struct {
	config
	hooks     []Hook
	mutation  *RegistryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RegistryUpdate builder.
func (ru *RegistryUpdate) Where(ps ...predicate.Registry) *RegistryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegistryUpdate) SetUpdatedAt(t time.Time) *RegistryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetHost sets the "host" field.
func (ru *RegistryUpdate) SetHost(s string) *RegistryUpdate {
	ru.mutation.SetHost(s)
	return ru
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableHost(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetHost(*s)
	}
	return ru
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (ru *RegistryUpdate) SetKubernetesSecret(s string) *RegistryUpdate {
	ru.mutation.SetKubernetesSecret(s)
	return ru
}

// SetNillableKubernetesSecret sets the "kubernetes_secret" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableKubernetesSecret(s *string) *RegistryUpdate {
	if s != nil {
		ru.SetKubernetesSecret(*s)
	}
	return ru
}

// ClearKubernetesSecret clears the value of the "kubernetes_secret" field.
func (ru *RegistryUpdate) ClearKubernetesSecret() *RegistryUpdate {
	ru.mutation.ClearKubernetesSecret()
	return ru
}

// SetIsDefault sets the "is_default" field.
func (ru *RegistryUpdate) SetIsDefault(b bool) *RegistryUpdate {
	ru.mutation.SetIsDefault(b)
	return ru
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ru *RegistryUpdate) SetNillableIsDefault(b *bool) *RegistryUpdate {
	if b != nil {
		ru.SetIsDefault(*b)
	}
	return ru
}

// Mutation returns the RegistryMutation object of the builder.
func (ru *RegistryUpdate) Mutation() *RegistryMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegistryUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegistryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegistryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegistryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegistryUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := registry.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RegistryUpdate) check() error {
	if v, ok := ru.mutation.Host(); ok {
		if err := registry.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Registry.host": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RegistryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegistryUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RegistryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(registry.Table, registry.Columns, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(registry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Host(); ok {
		_spec.SetField(registry.FieldHost, field.TypeString, value)
	}
	if value, ok := ru.mutation.KubernetesSecret(); ok {
		_spec.SetField(registry.FieldKubernetesSecret, field.TypeString, value)
	}
	if ru.mutation.KubernetesSecretCleared() {
		_spec.ClearField(registry.FieldKubernetesSecret, field.TypeString)
	}
	if value, ok := ru.mutation.IsDefault(); ok {
		_spec.SetField(registry.FieldIsDefault, field.TypeBool, value)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegistryUpdateOne is the builder for updating a single Registry entity.
type RegistryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RegistryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegistryUpdateOne) SetUpdatedAt(t time.Time) *RegistryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetHost sets the "host" field.
func (ruo *RegistryUpdateOne) SetHost(s string) *RegistryUpdateOne {
	ruo.mutation.SetHost(s)
	return ruo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableHost(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetHost(*s)
	}
	return ruo
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (ruo *RegistryUpdateOne) SetKubernetesSecret(s string) *RegistryUpdateOne {
	ruo.mutation.SetKubernetesSecret(s)
	return ruo
}

// SetNillableKubernetesSecret sets the "kubernetes_secret" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableKubernetesSecret(s *string) *RegistryUpdateOne {
	if s != nil {
		ruo.SetKubernetesSecret(*s)
	}
	return ruo
}

// ClearKubernetesSecret clears the value of the "kubernetes_secret" field.
func (ruo *RegistryUpdateOne) ClearKubernetesSecret() *RegistryUpdateOne {
	ruo.mutation.ClearKubernetesSecret()
	return ruo
}

// SetIsDefault sets the "is_default" field.
func (ruo *RegistryUpdateOne) SetIsDefault(b bool) *RegistryUpdateOne {
	ruo.mutation.SetIsDefault(b)
	return ruo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ruo *RegistryUpdateOne) SetNillableIsDefault(b *bool) *RegistryUpdateOne {
	if b != nil {
		ruo.SetIsDefault(*b)
	}
	return ruo
}

// Mutation returns the RegistryMutation object of the builder.
func (ruo *RegistryUpdateOne) Mutation() *RegistryMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RegistryUpdate builder.
func (ruo *RegistryUpdateOne) Where(ps ...predicate.Registry) *RegistryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegistryUpdateOne) Select(field string, fields ...string) *RegistryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Registry entity.
func (ruo *RegistryUpdateOne) Save(ctx context.Context) (*Registry, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegistryUpdateOne) SaveX(ctx context.Context) *Registry {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegistryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegistryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegistryUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := registry.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RegistryUpdateOne) check() error {
	if v, ok := ruo.mutation.Host(); ok {
		if err := registry.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Registry.host": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RegistryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegistryUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RegistryUpdateOne) sqlSave(ctx context.Context) (_node *Registry, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(registry.Table, registry.Columns, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Registry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, registry.FieldID)
		for _, f := range fields {
			if !registry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != registry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(registry.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Host(); ok {
		_spec.SetField(registry.FieldHost, field.TypeString, value)
	}
	if value, ok := ruo.mutation.KubernetesSecret(); ok {
		_spec.SetField(registry.FieldKubernetesSecret, field.TypeString, value)
	}
	if ruo.mutation.KubernetesSecretCleared() {
		_spec.ClearField(registry.FieldKubernetesSecret, field.TypeString)
	}
	if value, ok := ruo.mutation.IsDefault(); ok {
		_spec.SetField(registry.FieldIsDefault, field.TypeBool, value)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Registry{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
