// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/buildjob"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// BuildJobDelete is the builder for deleting a BuildJob entity.
type BuildJobDelete struct {
	config
	hooks    []Hook
	mutation *BuildJobMutation
}

// Where appends a list predicates to the BuildJobDelete builder.
func (bjd *BuildJobDelete) Where(ps ...predicate.BuildJob) *BuildJobDelete {
	bjd.mutation.Where(ps...)
	return bjd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bjd *BuildJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bjd.sqlExec, bjd.mutation, bjd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bjd *BuildJobDelete) ExecX(ctx context.Context) int {
	n, err := bjd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bjd *BuildJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(buildjob.Table, sqlgraph.NewFieldSpec(buildjob.FieldID, field.TypeUUID))
	if ps := bjd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bjd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bjd.mutation.done = true
	return affected, err
}

// BuildJobDeleteOne is the builder for deleting a single BuildJob entity.
type BuildJobDeleteOne struct {
	bjd *BuildJobDelete
}

// Where appends a list predicates to the BuildJobDelete builder.
func (bjdo *BuildJobDeleteOne) Where(ps ...predicate.BuildJob) *BuildJobDeleteOne {
	bjdo.bjd.mutation.Where(ps...)
	return bjdo
}

// Exec executes the deletion query.
func (bjdo *BuildJobDeleteOne) Exec(ctx context.Context) error {
	n, err := bjdo.bjd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{buildjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bjdo *BuildJobDeleteOne) ExecX(ctx context.Context) {
	if err := bjdo.Exec(ctx); err != nil {
		panic(err)
	}
}
