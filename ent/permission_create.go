// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/group"
	"github.com/unbindapp/unbind-api/ent/permission"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PermissionCreate) SetCreatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PermissionCreate) SetUpdatedAt(t time.Time) *PermissionCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableUpdatedAt(t *time.Time) *PermissionCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAction sets the "action" field.
func (pc *PermissionCreate) SetAction(pe permission.Action) *PermissionCreate {
	pc.mutation.SetAction(pe)
	return pc
}

// SetResourceType sets the "resource_type" field.
func (pc *PermissionCreate) SetResourceType(pt permission.ResourceType) *PermissionCreate {
	pc.mutation.SetResourceType(pt)
	return pc
}

// SetResourceID sets the "resource_id" field.
func (pc *PermissionCreate) SetResourceID(s string) *PermissionCreate {
	pc.mutation.SetResourceID(s)
	return pc
}

// SetScope sets the "scope" field.
func (pc *PermissionCreate) SetScope(s string) *PermissionCreate {
	pc.mutation.SetScope(s)
	return pc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableScope(s *string) *PermissionCreate {
	if s != nil {
		pc.SetScope(*s)
	}
	return pc
}

// SetLabels sets the "labels" field.
func (pc *PermissionCreate) SetLabels(m map[string]string) *PermissionCreate {
	pc.mutation.SetLabels(m)
	return pc
}

// SetID sets the "id" field.
func (pc *PermissionCreate) SetID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableID(u *uuid.UUID) *PermissionCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (pc *PermissionCreate) AddGroupIDs(ids ...uuid.UUID) *PermissionCreate {
	pc.mutation.AddGroupIDs(ids...)
	return pc
}

// AddGroups adds the "groups" edges to the Group entity.
func (pc *PermissionCreate) AddGroups(g ...*Group) *PermissionCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddGroupIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermissionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermissionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermissionCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := permission.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := permission.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := permission.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermissionCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Permission.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Permission.updated_at"`)}
	}
	if _, ok := pc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Permission.action"`)}
	}
	if v, ok := pc.mutation.Action(); ok {
		if err := permission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Permission.action": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "Permission.resource_type"`)}
	}
	if v, ok := pc.mutation.ResourceType(); ok {
		if err := permission.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Permission.resource_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "Permission.resource_id"`)}
	}
	if v, ok := pc.mutation.ResourceID(); ok {
		if err := permission.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "Permission.resource_id": %w`, err)}
		}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(permission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if value, ok := pc.mutation.ResourceType(); ok {
		_spec.SetField(permission.FieldResourceType, field.TypeEnum, value)
		_node.ResourceType = value
	}
	if value, ok := pc.mutation.ResourceID(); ok {
		_spec.SetField(permission.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := pc.mutation.Scope(); ok {
		_spec.SetField(permission.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := pc.mutation.Labels(); ok {
		_spec.SetField(permission.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if nodes := pc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.GroupsTable,
			Columns: permission.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertOne {
	pc.conflict = opts
	return &PermissionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflictColumns(columns ...string) *PermissionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertOne{
		create: pc,
	}
}

type (
	// PermissionUpsertOne is the builder for "upsert"-ing
	//  one Permission node.
	PermissionUpsertOne struct {
		create *PermissionCreate
	}

	// PermissionUpsert is the "OnConflict" setter.
	PermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsert) SetUpdatedAt(v time.Time) *PermissionUpsert {
	u.Set(permission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateUpdatedAt() *PermissionUpsert {
	u.SetExcluded(permission.FieldUpdatedAt)
	return u
}

// SetAction sets the "action" field.
func (u *PermissionUpsert) SetAction(v permission.Action) *PermissionUpsert {
	u.Set(permission.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateAction() *PermissionUpsert {
	u.SetExcluded(permission.FieldAction)
	return u
}

// SetResourceType sets the "resource_type" field.
func (u *PermissionUpsert) SetResourceType(v permission.ResourceType) *PermissionUpsert {
	u.Set(permission.FieldResourceType, v)
	return u
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateResourceType() *PermissionUpsert {
	u.SetExcluded(permission.FieldResourceType)
	return u
}

// SetResourceID sets the "resource_id" field.
func (u *PermissionUpsert) SetResourceID(v string) *PermissionUpsert {
	u.Set(permission.FieldResourceID, v)
	return u
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateResourceID() *PermissionUpsert {
	u.SetExcluded(permission.FieldResourceID)
	return u
}

// SetScope sets the "scope" field.
func (u *PermissionUpsert) SetScope(v string) *PermissionUpsert {
	u.Set(permission.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateScope() *PermissionUpsert {
	u.SetExcluded(permission.FieldScope)
	return u
}

// ClearScope clears the value of the "scope" field.
func (u *PermissionUpsert) ClearScope() *PermissionUpsert {
	u.SetNull(permission.FieldScope)
	return u
}

// SetLabels sets the "labels" field.
func (u *PermissionUpsert) SetLabels(v map[string]string) *PermissionUpsert {
	u.Set(permission.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateLabels() *PermissionUpsert {
	u.SetExcluded(permission.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *PermissionUpsert) ClearLabels() *PermissionUpsert {
	u.SetNull(permission.FieldLabels)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertOne) UpdateNewValues() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(permission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(permission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermissionUpsertOne) Ignore() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertOne) DoNothing() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreate.OnConflict
// documentation for more info.
func (u *PermissionUpsertOne) Update(set func(*PermissionUpsert)) *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertOne) SetUpdatedAt(v time.Time) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateUpdatedAt() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAction sets the "action" field.
func (u *PermissionUpsertOne) SetAction(v permission.Action) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateAction() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *PermissionUpsertOne) SetResourceType(v permission.ResourceType) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateResourceType() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *PermissionUpsertOne) SetResourceID(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateResourceID() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResourceID()
	})
}

// SetScope sets the "scope" field.
func (u *PermissionUpsertOne) SetScope(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateScope() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *PermissionUpsertOne) ClearScope() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearScope()
	})
}

// SetLabels sets the "labels" field.
func (u *PermissionUpsertOne) SetLabels(v map[string]string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateLabels() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *PermissionUpsertOne) ClearLabels() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearLabels()
	})
}

// Exec executes the query.
func (u *PermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermissionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PermissionUpsertOne.ID is not supported by MySQL driver. Use PermissionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermissionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertBulk {
	pcb.conflict = opts
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflictColumns(columns ...string) *PermissionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// PermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Permission nodes.
type PermissionUpsertBulk struct {
	create *PermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertBulk) UpdateNewValues() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(permission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(permission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermissionUpsertBulk) Ignore() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertBulk) DoNothing() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreateBulk.OnConflict
// documentation for more info.
func (u *PermissionUpsertBulk) Update(set func(*PermissionUpsert)) *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PermissionUpsertBulk) SetUpdatedAt(v time.Time) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateUpdatedAt() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAction sets the "action" field.
func (u *PermissionUpsertBulk) SetAction(v permission.Action) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateAction() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateAction()
	})
}

// SetResourceType sets the "resource_type" field.
func (u *PermissionUpsertBulk) SetResourceType(v permission.ResourceType) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResourceType(v)
	})
}

// UpdateResourceType sets the "resource_type" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateResourceType() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResourceType()
	})
}

// SetResourceID sets the "resource_id" field.
func (u *PermissionUpsertBulk) SetResourceID(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetResourceID(v)
	})
}

// UpdateResourceID sets the "resource_id" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateResourceID() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateResourceID()
	})
}

// SetScope sets the "scope" field.
func (u *PermissionUpsertBulk) SetScope(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateScope() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateScope()
	})
}

// ClearScope clears the value of the "scope" field.
func (u *PermissionUpsertBulk) ClearScope() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearScope()
	})
}

// SetLabels sets the "labels" field.
func (u *PermissionUpsertBulk) SetLabels(v map[string]string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateLabels() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *PermissionUpsertBulk) ClearLabels() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearLabels()
	})
}

// Exec executes the query.
func (u *PermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
