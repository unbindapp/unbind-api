// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// KubernetesName applies equality check predicate on the "kubernetes_name" field. It's identical to KubernetesNameEQ.
func KubernetesName(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldKubernetesName, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStatus, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTeamID, v))
}

// DefaultEnvironmentID applies equality check predicate on the "default_environment_id" field. It's identical to DefaultEnvironmentIDEQ.
func DefaultEnvironmentID(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDefaultEnvironmentID, v))
}

// KubernetesSecret applies equality check predicate on the "kubernetes_secret" field. It's identical to KubernetesSecretEQ.
func KubernetesSecret(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldKubernetesSecret, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// KubernetesNameEQ applies the EQ predicate on the "kubernetes_name" field.
func KubernetesNameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldKubernetesName, v))
}

// KubernetesNameNEQ applies the NEQ predicate on the "kubernetes_name" field.
func KubernetesNameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldKubernetesName, v))
}

// KubernetesNameIn applies the In predicate on the "kubernetes_name" field.
func KubernetesNameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldKubernetesName, vs...))
}

// KubernetesNameNotIn applies the NotIn predicate on the "kubernetes_name" field.
func KubernetesNameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldKubernetesName, vs...))
}

// KubernetesNameGT applies the GT predicate on the "kubernetes_name" field.
func KubernetesNameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldKubernetesName, v))
}

// KubernetesNameGTE applies the GTE predicate on the "kubernetes_name" field.
func KubernetesNameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldKubernetesName, v))
}

// KubernetesNameLT applies the LT predicate on the "kubernetes_name" field.
func KubernetesNameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldKubernetesName, v))
}

// KubernetesNameLTE applies the LTE predicate on the "kubernetes_name" field.
func KubernetesNameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldKubernetesName, v))
}

// KubernetesNameContains applies the Contains predicate on the "kubernetes_name" field.
func KubernetesNameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldKubernetesName, v))
}

// KubernetesNameHasPrefix applies the HasPrefix predicate on the "kubernetes_name" field.
func KubernetesNameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldKubernetesName, v))
}

// KubernetesNameHasSuffix applies the HasSuffix predicate on the "kubernetes_name" field.
func KubernetesNameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldKubernetesName, v))
}

// KubernetesNameEqualFold applies the EqualFold predicate on the "kubernetes_name" field.
func KubernetesNameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldKubernetesName, v))
}

// KubernetesNameContainsFold applies the ContainsFold predicate on the "kubernetes_name" field.
func KubernetesNameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldKubernetesName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldStatus, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldTeamID, vs...))
}

// DefaultEnvironmentIDEQ applies the EQ predicate on the "default_environment_id" field.
func DefaultEnvironmentIDEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDefaultEnvironmentID, v))
}

// DefaultEnvironmentIDNEQ applies the NEQ predicate on the "default_environment_id" field.
func DefaultEnvironmentIDNEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDefaultEnvironmentID, v))
}

// DefaultEnvironmentIDIn applies the In predicate on the "default_environment_id" field.
func DefaultEnvironmentIDIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDefaultEnvironmentID, vs...))
}

// DefaultEnvironmentIDNotIn applies the NotIn predicate on the "default_environment_id" field.
func DefaultEnvironmentIDNotIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDefaultEnvironmentID, vs...))
}

// DefaultEnvironmentIDIsNil applies the IsNil predicate on the "default_environment_id" field.
func DefaultEnvironmentIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDefaultEnvironmentID))
}

// DefaultEnvironmentIDNotNil applies the NotNil predicate on the "default_environment_id" field.
func DefaultEnvironmentIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDefaultEnvironmentID))
}

// KubernetesSecretEQ applies the EQ predicate on the "kubernetes_secret" field.
func KubernetesSecretEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretNEQ applies the NEQ predicate on the "kubernetes_secret" field.
func KubernetesSecretNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretIn applies the In predicate on the "kubernetes_secret" field.
func KubernetesSecretIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretNotIn applies the NotIn predicate on the "kubernetes_secret" field.
func KubernetesSecretNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretGT applies the GT predicate on the "kubernetes_secret" field.
func KubernetesSecretGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldKubernetesSecret, v))
}

// KubernetesSecretGTE applies the GTE predicate on the "kubernetes_secret" field.
func KubernetesSecretGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldKubernetesSecret, v))
}

// KubernetesSecretLT applies the LT predicate on the "kubernetes_secret" field.
func KubernetesSecretLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldKubernetesSecret, v))
}

// KubernetesSecretLTE applies the LTE predicate on the "kubernetes_secret" field.
func KubernetesSecretLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldKubernetesSecret, v))
}

// KubernetesSecretContains applies the Contains predicate on the "kubernetes_secret" field.
func KubernetesSecretContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldKubernetesSecret, v))
}

// KubernetesSecretHasPrefix applies the HasPrefix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldKubernetesSecret, v))
}

// KubernetesSecretHasSuffix applies the HasSuffix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldKubernetesSecret, v))
}

// KubernetesSecretEqualFold applies the EqualFold predicate on the "kubernetes_secret" field.
func KubernetesSecretEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldKubernetesSecret, v))
}

// KubernetesSecretContainsFold applies the ContainsFold predicate on the "kubernetes_secret" field.
func KubernetesSecretContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldKubernetesSecret, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironments applies the HasEdge predicate on the "environments" edge.
func HasEnvironments() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnvironmentsTable, EnvironmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentsWith applies the HasEdge predicate on the "environments" edge with a given conditions (other predicates).
func HasEnvironmentsWith(preds ...predicate.Environment) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newEnvironmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultEnvironment applies the HasEdge predicate on the "default_environment" edge.
func HasDefaultEnvironment() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DefaultEnvironmentTable, DefaultEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultEnvironmentWith applies the HasEdge predicate on the "default_environment" edge with a given conditions (other predicates).
func HasDefaultEnvironmentWith(preds ...predicate.Environment) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newDefaultEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectWebhooks applies the HasEdge predicate on the "project_webhooks" edge.
func HasProjectWebhooks() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectWebhooksTable, ProjectWebhooksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWebhooksWith applies the HasEdge predicate on the "project_webhooks" edge with a given conditions (other predicates).
func HasProjectWebhooksWith(preds ...predicate.Webhook) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newProjectWebhooksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
