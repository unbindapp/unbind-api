// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/oauth2code"
	"github.com/unbindapp/unbind-api/ent/user"
)

// Oauth2CodeCreate is the builder for creating a Oauth2Code entity.
type Oauth2CodeCreate struct {
	config
	mutation *Oauth2CodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *Oauth2CodeCreate) SetCreatedAt(t time.Time) *Oauth2CodeCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *Oauth2CodeCreate) SetNillableCreatedAt(t *time.Time) *Oauth2CodeCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *Oauth2CodeCreate) SetUpdatedAt(t time.Time) *Oauth2CodeCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *Oauth2CodeCreate) SetNillableUpdatedAt(t *time.Time) *Oauth2CodeCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetAuthCode sets the "auth_code" field.
func (oc *Oauth2CodeCreate) SetAuthCode(s string) *Oauth2CodeCreate {
	oc.mutation.SetAuthCode(s)
	return oc
}

// SetClientID sets the "client_id" field.
func (oc *Oauth2CodeCreate) SetClientID(s string) *Oauth2CodeCreate {
	oc.mutation.SetClientID(s)
	return oc
}

// SetScope sets the "scope" field.
func (oc *Oauth2CodeCreate) SetScope(s string) *Oauth2CodeCreate {
	oc.mutation.SetScope(s)
	return oc
}

// SetExpiresAt sets the "expires_at" field.
func (oc *Oauth2CodeCreate) SetExpiresAt(t time.Time) *Oauth2CodeCreate {
	oc.mutation.SetExpiresAt(t)
	return oc
}

// SetRevoked sets the "revoked" field.
func (oc *Oauth2CodeCreate) SetRevoked(b bool) *Oauth2CodeCreate {
	oc.mutation.SetRevoked(b)
	return oc
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (oc *Oauth2CodeCreate) SetNillableRevoked(b *bool) *Oauth2CodeCreate {
	if b != nil {
		oc.SetRevoked(*b)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *Oauth2CodeCreate) SetID(u uuid.UUID) *Oauth2CodeCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *Oauth2CodeCreate) SetNillableID(u *uuid.UUID) *Oauth2CodeCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oc *Oauth2CodeCreate) SetUserID(id uuid.UUID) *Oauth2CodeCreate {
	oc.mutation.SetUserID(id)
	return oc
}

// SetUser sets the "user" edge to the User entity.
func (oc *Oauth2CodeCreate) SetUser(u *User) *Oauth2CodeCreate {
	return oc.SetUserID(u.ID)
}

// Mutation returns the Oauth2CodeMutation object of the builder.
func (oc *Oauth2CodeCreate) Mutation() *Oauth2CodeMutation {
	return oc.mutation
}

// Save creates the Oauth2Code in the database.
func (oc *Oauth2CodeCreate) Save(ctx context.Context) (*Oauth2Code, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *Oauth2CodeCreate) SaveX(ctx context.Context) *Oauth2Code {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *Oauth2CodeCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *Oauth2CodeCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *Oauth2CodeCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oauth2code.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := oauth2code.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Revoked(); !ok {
		v := oauth2code.DefaultRevoked
		oc.mutation.SetRevoked(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := oauth2code.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *Oauth2CodeCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Oauth2Code.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Oauth2Code.updated_at"`)}
	}
	if _, ok := oc.mutation.AuthCode(); !ok {
		return &ValidationError{Name: "auth_code", err: errors.New(`ent: missing required field "Oauth2Code.auth_code"`)}
	}
	if _, ok := oc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Oauth2Code.client_id"`)}
	}
	if _, ok := oc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Oauth2Code.scope"`)}
	}
	if _, ok := oc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Oauth2Code.expires_at"`)}
	}
	if _, ok := oc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New(`ent: missing required field "Oauth2Code.revoked"`)}
	}
	if len(oc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Oauth2Code.user"`)}
	}
	return nil
}

func (oc *Oauth2CodeCreate) sqlSave(ctx context.Context) (*Oauth2Code, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *Oauth2CodeCreate) createSpec() (*Oauth2Code, *sqlgraph.CreateSpec) {
	var (
		_node = &Oauth2Code{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(oauth2code.Table, sqlgraph.NewFieldSpec(oauth2code.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(oauth2code.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(oauth2code.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.AuthCode(); ok {
		_spec.SetField(oauth2code.FieldAuthCode, field.TypeString, value)
		_node.AuthCode = value
	}
	if value, ok := oc.mutation.ClientID(); ok {
		_spec.SetField(oauth2code.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := oc.mutation.Scope(); ok {
		_spec.SetField(oauth2code.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := oc.mutation.ExpiresAt(); ok {
		_spec.SetField(oauth2code.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := oc.mutation.Revoked(); ok {
		_spec.SetField(oauth2code.FieldRevoked, field.TypeBool, value)
		_node.Revoked = value
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauth2code.UserTable,
			Columns: []string{oauth2code.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_oauth2_codes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Oauth2Code.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Oauth2CodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *Oauth2CodeCreate) OnConflict(opts ...sql.ConflictOption) *Oauth2CodeUpsertOne {
	oc.conflict = opts
	return &Oauth2CodeUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *Oauth2CodeCreate) OnConflictColumns(columns ...string) *Oauth2CodeUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &Oauth2CodeUpsertOne{
		create: oc,
	}
}

type (
	// Oauth2CodeUpsertOne is the builder for "upsert"-ing
	//  one Oauth2Code node.
	Oauth2CodeUpsertOne struct {
		create *Oauth2CodeCreate
	}

	// Oauth2CodeUpsert is the "OnConflict" setter.
	Oauth2CodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2CodeUpsert) SetUpdatedAt(v time.Time) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateUpdatedAt() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldUpdatedAt)
	return u
}

// SetAuthCode sets the "auth_code" field.
func (u *Oauth2CodeUpsert) SetAuthCode(v string) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldAuthCode, v)
	return u
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateAuthCode() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldAuthCode)
	return u
}

// SetClientID sets the "client_id" field.
func (u *Oauth2CodeUpsert) SetClientID(v string) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateClientID() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldClientID)
	return u
}

// SetScope sets the "scope" field.
func (u *Oauth2CodeUpsert) SetScope(v string) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateScope() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldScope)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2CodeUpsert) SetExpiresAt(v time.Time) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateExpiresAt() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldExpiresAt)
	return u
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2CodeUpsert) SetRevoked(v bool) *Oauth2CodeUpsert {
	u.Set(oauth2code.FieldRevoked, v)
	return u
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2CodeUpsert) UpdateRevoked() *Oauth2CodeUpsert {
	u.SetExcluded(oauth2code.FieldRevoked)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauth2code.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Oauth2CodeUpsertOne) UpdateNewValues() *Oauth2CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauth2code.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauth2code.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Oauth2CodeUpsertOne) Ignore() *Oauth2CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Oauth2CodeUpsertOne) DoNothing() *Oauth2CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Oauth2CodeCreate.OnConflict
// documentation for more info.
func (u *Oauth2CodeUpsertOne) Update(set func(*Oauth2CodeUpsert)) *Oauth2CodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Oauth2CodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2CodeUpsertOne) SetUpdatedAt(v time.Time) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateUpdatedAt() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *Oauth2CodeUpsertOne) SetAuthCode(v string) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateAuthCode() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateAuthCode()
	})
}

// SetClientID sets the "client_id" field.
func (u *Oauth2CodeUpsertOne) SetClientID(v string) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateClientID() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateClientID()
	})
}

// SetScope sets the "scope" field.
func (u *Oauth2CodeUpsertOne) SetScope(v string) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateScope() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateScope()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2CodeUpsertOne) SetExpiresAt(v time.Time) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateExpiresAt() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2CodeUpsertOne) SetRevoked(v bool) *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2CodeUpsertOne) UpdateRevoked() *Oauth2CodeUpsertOne {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateRevoked()
	})
}

// Exec executes the query.
func (u *Oauth2CodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Oauth2CodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Oauth2CodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Oauth2CodeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: Oauth2CodeUpsertOne.ID is not supported by MySQL driver. Use Oauth2CodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Oauth2CodeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Oauth2CodeCreateBulk is the builder for creating many Oauth2Code entities in bulk.
type Oauth2CodeCreateBulk struct {
	config
	err      error
	builders []*Oauth2CodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Oauth2Code entities in the database.
func (ocb *Oauth2CodeCreateBulk) Save(ctx context.Context) ([]*Oauth2Code, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Oauth2Code, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Oauth2CodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *Oauth2CodeCreateBulk) SaveX(ctx context.Context) []*Oauth2Code {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *Oauth2CodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *Oauth2CodeCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Oauth2Code.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Oauth2CodeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *Oauth2CodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *Oauth2CodeUpsertBulk {
	ocb.conflict = opts
	return &Oauth2CodeUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *Oauth2CodeCreateBulk) OnConflictColumns(columns ...string) *Oauth2CodeUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &Oauth2CodeUpsertBulk{
		create: ocb,
	}
}

// Oauth2CodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Oauth2Code nodes.
type Oauth2CodeUpsertBulk struct {
	create *Oauth2CodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauth2code.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Oauth2CodeUpsertBulk) UpdateNewValues() *Oauth2CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauth2code.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauth2code.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Oauth2Code.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Oauth2CodeUpsertBulk) Ignore() *Oauth2CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Oauth2CodeUpsertBulk) DoNothing() *Oauth2CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Oauth2CodeCreateBulk.OnConflict
// documentation for more info.
func (u *Oauth2CodeUpsertBulk) Update(set func(*Oauth2CodeUpsert)) *Oauth2CodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Oauth2CodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Oauth2CodeUpsertBulk) SetUpdatedAt(v time.Time) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateUpdatedAt() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *Oauth2CodeUpsertBulk) SetAuthCode(v string) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateAuthCode() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateAuthCode()
	})
}

// SetClientID sets the "client_id" field.
func (u *Oauth2CodeUpsertBulk) SetClientID(v string) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateClientID() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateClientID()
	})
}

// SetScope sets the "scope" field.
func (u *Oauth2CodeUpsertBulk) SetScope(v string) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateScope() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateScope()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *Oauth2CodeUpsertBulk) SetExpiresAt(v time.Time) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateExpiresAt() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetRevoked sets the "revoked" field.
func (u *Oauth2CodeUpsertBulk) SetRevoked(v bool) *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.SetRevoked(v)
	})
}

// UpdateRevoked sets the "revoked" field to the value that was provided on create.
func (u *Oauth2CodeUpsertBulk) UpdateRevoked() *Oauth2CodeUpsertBulk {
	return u.Update(func(s *Oauth2CodeUpsert) {
		s.UpdateRevoked()
	})
}

// Exec executes the query.
func (u *Oauth2CodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Oauth2CodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Oauth2CodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Oauth2CodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
