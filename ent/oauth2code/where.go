// Code generated by ent, DO NOT EDIT.

package oauth2code

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldUpdatedAt, v))
}

// AuthCode applies equality check predicate on the "auth_code" field. It's identical to AuthCodeEQ.
func AuthCode(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldAuthCode, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldClientID, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldScope, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldExpiresAt, v))
}

// Revoked applies equality check predicate on the "revoked" field. It's identical to RevokedEQ.
func Revoked(v bool) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldRevoked, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldUpdatedAt, v))
}

// AuthCodeEQ applies the EQ predicate on the "auth_code" field.
func AuthCodeEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldAuthCode, v))
}

// AuthCodeNEQ applies the NEQ predicate on the "auth_code" field.
func AuthCodeNEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldAuthCode, v))
}

// AuthCodeIn applies the In predicate on the "auth_code" field.
func AuthCodeIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldAuthCode, vs...))
}

// AuthCodeNotIn applies the NotIn predicate on the "auth_code" field.
func AuthCodeNotIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldAuthCode, vs...))
}

// AuthCodeGT applies the GT predicate on the "auth_code" field.
func AuthCodeGT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldAuthCode, v))
}

// AuthCodeGTE applies the GTE predicate on the "auth_code" field.
func AuthCodeGTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldAuthCode, v))
}

// AuthCodeLT applies the LT predicate on the "auth_code" field.
func AuthCodeLT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldAuthCode, v))
}

// AuthCodeLTE applies the LTE predicate on the "auth_code" field.
func AuthCodeLTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldAuthCode, v))
}

// AuthCodeContains applies the Contains predicate on the "auth_code" field.
func AuthCodeContains(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContains(FieldAuthCode, v))
}

// AuthCodeHasPrefix applies the HasPrefix predicate on the "auth_code" field.
func AuthCodeHasPrefix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasPrefix(FieldAuthCode, v))
}

// AuthCodeHasSuffix applies the HasSuffix predicate on the "auth_code" field.
func AuthCodeHasSuffix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasSuffix(FieldAuthCode, v))
}

// AuthCodeEqualFold applies the EqualFold predicate on the "auth_code" field.
func AuthCodeEqualFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEqualFold(FieldAuthCode, v))
}

// AuthCodeContainsFold applies the ContainsFold predicate on the "auth_code" field.
func AuthCodeContainsFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContainsFold(FieldAuthCode, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContainsFold(FieldClientID, v))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldContainsFold(FieldScope, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldLTE(FieldExpiresAt, v))
}

// RevokedEQ applies the EQ predicate on the "revoked" field.
func RevokedEQ(v bool) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldEQ(FieldRevoked, v))
}

// RevokedNEQ applies the NEQ predicate on the "revoked" field.
func RevokedNEQ(v bool) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.FieldNEQ(FieldRevoked, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Oauth2Code {
	return predicate.Oauth2Code(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Oauth2Code {
	return predicate.Oauth2Code(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Oauth2Code) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth2Code) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth2Code) predicate.Oauth2Code {
	return predicate.Oauth2Code(sql.NotPredicates(p))
}
