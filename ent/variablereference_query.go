// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/variablereference"
)

// VariableReferenceQuery is the builder for querying VariableReference entities.
type VariableReferenceQuery struct {
	config
	ctx         *QueryContext
	order       []variablereference.OrderOption
	inters      []Interceptor
	predicates  []predicate.VariableReference
	withService *ServiceQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VariableReferenceQuery builder.
func (vrq *VariableReferenceQuery) Where(ps ...predicate.VariableReference) *VariableReferenceQuery {
	vrq.predicates = append(vrq.predicates, ps...)
	return vrq
}

// Limit the number of records to be returned by this query.
func (vrq *VariableReferenceQuery) Limit(limit int) *VariableReferenceQuery {
	vrq.ctx.Limit = &limit
	return vrq
}

// Offset to start from.
func (vrq *VariableReferenceQuery) Offset(offset int) *VariableReferenceQuery {
	vrq.ctx.Offset = &offset
	return vrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vrq *VariableReferenceQuery) Unique(unique bool) *VariableReferenceQuery {
	vrq.ctx.Unique = &unique
	return vrq
}

// Order specifies how the records should be ordered.
func (vrq *VariableReferenceQuery) Order(o ...variablereference.OrderOption) *VariableReferenceQuery {
	vrq.order = append(vrq.order, o...)
	return vrq
}

// QueryService chains the current query on the "service" edge.
func (vrq *VariableReferenceQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: vrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(variablereference.Table, variablereference.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, variablereference.ServiceTable, variablereference.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VariableReference entity from the query.
// Returns a *NotFoundError when no VariableReference was found.
func (vrq *VariableReferenceQuery) First(ctx context.Context) (*VariableReference, error) {
	nodes, err := vrq.Limit(1).All(setContextOp(ctx, vrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{variablereference.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vrq *VariableReferenceQuery) FirstX(ctx context.Context) *VariableReference {
	node, err := vrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VariableReference ID from the query.
// Returns a *NotFoundError when no VariableReference ID was found.
func (vrq *VariableReferenceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vrq.Limit(1).IDs(setContextOp(ctx, vrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{variablereference.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vrq *VariableReferenceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := vrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VariableReference entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VariableReference entity is found.
// Returns a *NotFoundError when no VariableReference entities are found.
func (vrq *VariableReferenceQuery) Only(ctx context.Context) (*VariableReference, error) {
	nodes, err := vrq.Limit(2).All(setContextOp(ctx, vrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{variablereference.Label}
	default:
		return nil, &NotSingularError{variablereference.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vrq *VariableReferenceQuery) OnlyX(ctx context.Context) *VariableReference {
	node, err := vrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VariableReference ID in the query.
// Returns a *NotSingularError when more than one VariableReference ID is found.
// Returns a *NotFoundError when no entities are found.
func (vrq *VariableReferenceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = vrq.Limit(2).IDs(setContextOp(ctx, vrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{variablereference.Label}
	default:
		err = &NotSingularError{variablereference.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vrq *VariableReferenceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := vrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VariableReferences.
func (vrq *VariableReferenceQuery) All(ctx context.Context) ([]*VariableReference, error) {
	ctx = setContextOp(ctx, vrq.ctx, ent.OpQueryAll)
	if err := vrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VariableReference, *VariableReferenceQuery]()
	return withInterceptors[[]*VariableReference](ctx, vrq, qr, vrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vrq *VariableReferenceQuery) AllX(ctx context.Context) []*VariableReference {
	nodes, err := vrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VariableReference IDs.
func (vrq *VariableReferenceQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if vrq.ctx.Unique == nil && vrq.path != nil {
		vrq.Unique(true)
	}
	ctx = setContextOp(ctx, vrq.ctx, ent.OpQueryIDs)
	if err = vrq.Select(variablereference.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vrq *VariableReferenceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := vrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vrq *VariableReferenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vrq.ctx, ent.OpQueryCount)
	if err := vrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vrq, querierCount[*VariableReferenceQuery](), vrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vrq *VariableReferenceQuery) CountX(ctx context.Context) int {
	count, err := vrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vrq *VariableReferenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vrq.ctx, ent.OpQueryExist)
	switch _, err := vrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vrq *VariableReferenceQuery) ExistX(ctx context.Context) bool {
	exist, err := vrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VariableReferenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vrq *VariableReferenceQuery) Clone() *VariableReferenceQuery {
	if vrq == nil {
		return nil
	}
	return &VariableReferenceQuery{
		config:      vrq.config,
		ctx:         vrq.ctx.Clone(),
		order:       append([]variablereference.OrderOption{}, vrq.order...),
		inters:      append([]Interceptor{}, vrq.inters...),
		predicates:  append([]predicate.VariableReference{}, vrq.predicates...),
		withService: vrq.withService.Clone(),
		// clone intermediate query.
		sql:       vrq.sql.Clone(),
		path:      vrq.path,
		modifiers: append([]func(*sql.Selector){}, vrq.modifiers...),
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VariableReferenceQuery) WithService(opts ...func(*ServiceQuery)) *VariableReferenceQuery {
	query := (&ServiceClient{config: vrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vrq.withService = query
	return vrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VariableReference.Query().
//		GroupBy(variablereference.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vrq *VariableReferenceQuery) GroupBy(field string, fields ...string) *VariableReferenceGroupBy {
	vrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VariableReferenceGroupBy{build: vrq}
	grbuild.flds = &vrq.ctx.Fields
	grbuild.label = variablereference.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VariableReference.Query().
//		Select(variablereference.FieldCreatedAt).
//		Scan(ctx, &v)
func (vrq *VariableReferenceQuery) Select(fields ...string) *VariableReferenceSelect {
	vrq.ctx.Fields = append(vrq.ctx.Fields, fields...)
	sbuild := &VariableReferenceSelect{VariableReferenceQuery: vrq}
	sbuild.label = variablereference.Label
	sbuild.flds, sbuild.scan = &vrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VariableReferenceSelect configured with the given aggregations.
func (vrq *VariableReferenceQuery) Aggregate(fns ...AggregateFunc) *VariableReferenceSelect {
	return vrq.Select().Aggregate(fns...)
}

func (vrq *VariableReferenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vrq); err != nil {
				return err
			}
		}
	}
	for _, f := range vrq.ctx.Fields {
		if !variablereference.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vrq.path != nil {
		prev, err := vrq.path(ctx)
		if err != nil {
			return err
		}
		vrq.sql = prev
	}
	return nil
}

func (vrq *VariableReferenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VariableReference, error) {
	var (
		nodes       = []*VariableReference{}
		_spec       = vrq.querySpec()
		loadedTypes = [1]bool{
			vrq.withService != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VariableReference).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VariableReference{config: vrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(vrq.modifiers) > 0 {
		_spec.Modifiers = vrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vrq.withService; query != nil {
		if err := vrq.loadService(ctx, query, nodes, nil,
			func(n *VariableReference, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vrq *VariableReferenceQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*VariableReference, init func(*VariableReference), assign func(*VariableReference, *Service)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*VariableReference)
	for i := range nodes {
		fk := nodes[i].TargetServiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "target_service_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (vrq *VariableReferenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vrq.querySpec()
	if len(vrq.modifiers) > 0 {
		_spec.Modifiers = vrq.modifiers
	}
	_spec.Node.Columns = vrq.ctx.Fields
	if len(vrq.ctx.Fields) > 0 {
		_spec.Unique = vrq.ctx.Unique != nil && *vrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vrq.driver, _spec)
}

func (vrq *VariableReferenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(variablereference.Table, variablereference.Columns, sqlgraph.NewFieldSpec(variablereference.FieldID, field.TypeUUID))
	_spec.From = vrq.sql
	if unique := vrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vrq.path != nil {
		_spec.Unique = true
	}
	if fields := vrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, variablereference.FieldID)
		for i := range fields {
			if fields[i] != variablereference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vrq.withService != nil {
			_spec.Node.AddColumnOnce(variablereference.FieldTargetServiceID)
		}
	}
	if ps := vrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vrq *VariableReferenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vrq.driver.Dialect())
	t1 := builder.Table(variablereference.Table)
	columns := vrq.ctx.Fields
	if len(columns) == 0 {
		columns = variablereference.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vrq.sql != nil {
		selector = vrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vrq.ctx.Unique != nil && *vrq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range vrq.modifiers {
		m(selector)
	}
	for _, p := range vrq.predicates {
		p(selector)
	}
	for _, p := range vrq.order {
		p(selector)
	}
	if offset := vrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vrq *VariableReferenceQuery) Modify(modifiers ...func(s *sql.Selector)) *VariableReferenceSelect {
	vrq.modifiers = append(vrq.modifiers, modifiers...)
	return vrq.Select()
}

// VariableReferenceGroupBy is the group-by builder for VariableReference entities.
type VariableReferenceGroupBy struct {
	selector
	build *VariableReferenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vrgb *VariableReferenceGroupBy) Aggregate(fns ...AggregateFunc) *VariableReferenceGroupBy {
	vrgb.fns = append(vrgb.fns, fns...)
	return vrgb
}

// Scan applies the selector query and scans the result into the given value.
func (vrgb *VariableReferenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vrgb.build.ctx, ent.OpQueryGroupBy)
	if err := vrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VariableReferenceQuery, *VariableReferenceGroupBy](ctx, vrgb.build, vrgb, vrgb.build.inters, v)
}

func (vrgb *VariableReferenceGroupBy) sqlScan(ctx context.Context, root *VariableReferenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vrgb.fns))
	for _, fn := range vrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vrgb.flds)+len(vrgb.fns))
		for _, f := range *vrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VariableReferenceSelect is the builder for selecting fields of VariableReference entities.
type VariableReferenceSelect struct {
	*VariableReferenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vrs *VariableReferenceSelect) Aggregate(fns ...AggregateFunc) *VariableReferenceSelect {
	vrs.fns = append(vrs.fns, fns...)
	return vrs
}

// Scan applies the selector query and scans the result into the given value.
func (vrs *VariableReferenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vrs.ctx, ent.OpQuerySelect)
	if err := vrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VariableReferenceQuery, *VariableReferenceSelect](ctx, vrs.VariableReferenceQuery, vrs, vrs.inters, v)
}

func (vrs *VariableReferenceSelect) sqlScan(ctx context.Context, root *VariableReferenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vrs.fns))
	for _, fn := range vrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vrs *VariableReferenceSelect) Modify(modifiers ...func(s *sql.Selector)) *VariableReferenceSelect {
	vrs.modifiers = append(vrs.modifiers, modifiers...)
	return vrs
}
