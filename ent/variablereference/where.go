// Code generated by ent, DO NOT EDIT.

package variablereference

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldUpdatedAt, v))
}

// TargetServiceID applies equality check predicate on the "target_service_id" field. It's identical to TargetServiceIDEQ.
func TargetServiceID(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetServiceID, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceID, v))
}

// SourceName applies equality check predicate on the "source_name" field. It's identical to SourceNameEQ.
func SourceName(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceName, v))
}

// SourceKey applies equality check predicate on the "source_key" field. It's identical to SourceKeyEQ.
func SourceKey(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceKey, v))
}

// ValueTemplate applies equality check predicate on the "value_template" field. It's identical to ValueTemplateEQ.
func ValueTemplate(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldValueTemplate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldUpdatedAt, v))
}

// TargetServiceIDEQ applies the EQ predicate on the "target_service_id" field.
func TargetServiceIDEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetServiceID, v))
}

// TargetServiceIDNEQ applies the NEQ predicate on the "target_service_id" field.
func TargetServiceIDNEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldTargetServiceID, v))
}

// TargetServiceIDIn applies the In predicate on the "target_service_id" field.
func TargetServiceIDIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldTargetServiceID, vs...))
}

// TargetServiceIDNotIn applies the NotIn predicate on the "target_service_id" field.
func TargetServiceIDNotIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldTargetServiceID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v schema.VariableReferenceType) predicate.VariableReference {
	vc := v
	return predicate.VariableReference(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v schema.VariableReferenceType) predicate.VariableReference {
	vc := v
	return predicate.VariableReference(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...schema.VariableReferenceType) predicate.VariableReference {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VariableReference(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...schema.VariableReferenceType) predicate.VariableReference {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VariableReference(sql.FieldNotIn(FieldType, v...))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v schema.VariableReferenceSourceType) predicate.VariableReference {
	vc := v
	return predicate.VariableReference(sql.FieldEQ(FieldSourceType, vc))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v schema.VariableReferenceSourceType) predicate.VariableReference {
	vc := v
	return predicate.VariableReference(sql.FieldNEQ(FieldSourceType, vc))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...schema.VariableReferenceSourceType) predicate.VariableReference {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VariableReference(sql.FieldIn(FieldSourceType, v...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...schema.VariableReferenceSourceType) predicate.VariableReference {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VariableReference(sql.FieldNotIn(FieldSourceType, v...))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldSourceID, v))
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldSourceID, v))
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldSourceID, v))
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldSourceID, v))
}

// SourceNameEQ applies the EQ predicate on the "source_name" field.
func SourceNameEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceName, v))
}

// SourceNameNEQ applies the NEQ predicate on the "source_name" field.
func SourceNameNEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldSourceName, v))
}

// SourceNameIn applies the In predicate on the "source_name" field.
func SourceNameIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldSourceName, vs...))
}

// SourceNameNotIn applies the NotIn predicate on the "source_name" field.
func SourceNameNotIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldSourceName, vs...))
}

// SourceNameGT applies the GT predicate on the "source_name" field.
func SourceNameGT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldSourceName, v))
}

// SourceNameGTE applies the GTE predicate on the "source_name" field.
func SourceNameGTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldSourceName, v))
}

// SourceNameLT applies the LT predicate on the "source_name" field.
func SourceNameLT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldSourceName, v))
}

// SourceNameLTE applies the LTE predicate on the "source_name" field.
func SourceNameLTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldSourceName, v))
}

// SourceNameContains applies the Contains predicate on the "source_name" field.
func SourceNameContains(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContains(FieldSourceName, v))
}

// SourceNameHasPrefix applies the HasPrefix predicate on the "source_name" field.
func SourceNameHasPrefix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasPrefix(FieldSourceName, v))
}

// SourceNameHasSuffix applies the HasSuffix predicate on the "source_name" field.
func SourceNameHasSuffix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasSuffix(FieldSourceName, v))
}

// SourceNameEqualFold applies the EqualFold predicate on the "source_name" field.
func SourceNameEqualFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEqualFold(FieldSourceName, v))
}

// SourceNameContainsFold applies the ContainsFold predicate on the "source_name" field.
func SourceNameContainsFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContainsFold(FieldSourceName, v))
}

// SourceKeyEQ applies the EQ predicate on the "source_key" field.
func SourceKeyEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldSourceKey, v))
}

// SourceKeyNEQ applies the NEQ predicate on the "source_key" field.
func SourceKeyNEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldSourceKey, v))
}

// SourceKeyIn applies the In predicate on the "source_key" field.
func SourceKeyIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldSourceKey, vs...))
}

// SourceKeyNotIn applies the NotIn predicate on the "source_key" field.
func SourceKeyNotIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldSourceKey, vs...))
}

// SourceKeyGT applies the GT predicate on the "source_key" field.
func SourceKeyGT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldSourceKey, v))
}

// SourceKeyGTE applies the GTE predicate on the "source_key" field.
func SourceKeyGTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldSourceKey, v))
}

// SourceKeyLT applies the LT predicate on the "source_key" field.
func SourceKeyLT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldSourceKey, v))
}

// SourceKeyLTE applies the LTE predicate on the "source_key" field.
func SourceKeyLTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldSourceKey, v))
}

// SourceKeyContains applies the Contains predicate on the "source_key" field.
func SourceKeyContains(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContains(FieldSourceKey, v))
}

// SourceKeyHasPrefix applies the HasPrefix predicate on the "source_key" field.
func SourceKeyHasPrefix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasPrefix(FieldSourceKey, v))
}

// SourceKeyHasSuffix applies the HasSuffix predicate on the "source_key" field.
func SourceKeyHasSuffix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasSuffix(FieldSourceKey, v))
}

// SourceKeyIsNil applies the IsNil predicate on the "source_key" field.
func SourceKeyIsNil() predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIsNull(FieldSourceKey))
}

// SourceKeyNotNil applies the NotNil predicate on the "source_key" field.
func SourceKeyNotNil() predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotNull(FieldSourceKey))
}

// SourceKeyEqualFold applies the EqualFold predicate on the "source_key" field.
func SourceKeyEqualFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEqualFold(FieldSourceKey, v))
}

// SourceKeyContainsFold applies the ContainsFold predicate on the "source_key" field.
func SourceKeyContainsFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContainsFold(FieldSourceKey, v))
}

// ValueTemplateEQ applies the EQ predicate on the "value_template" field.
func ValueTemplateEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldValueTemplate, v))
}

// ValueTemplateNEQ applies the NEQ predicate on the "value_template" field.
func ValueTemplateNEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldValueTemplate, v))
}

// ValueTemplateIn applies the In predicate on the "value_template" field.
func ValueTemplateIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldValueTemplate, vs...))
}

// ValueTemplateNotIn applies the NotIn predicate on the "value_template" field.
func ValueTemplateNotIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldValueTemplate, vs...))
}

// ValueTemplateGT applies the GT predicate on the "value_template" field.
func ValueTemplateGT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldValueTemplate, v))
}

// ValueTemplateGTE applies the GTE predicate on the "value_template" field.
func ValueTemplateGTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldValueTemplate, v))
}

// ValueTemplateLT applies the LT predicate on the "value_template" field.
func ValueTemplateLT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldValueTemplate, v))
}

// ValueTemplateLTE applies the LTE predicate on the "value_template" field.
func ValueTemplateLTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldValueTemplate, v))
}

// ValueTemplateContains applies the Contains predicate on the "value_template" field.
func ValueTemplateContains(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContains(FieldValueTemplate, v))
}

// ValueTemplateHasPrefix applies the HasPrefix predicate on the "value_template" field.
func ValueTemplateHasPrefix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasPrefix(FieldValueTemplate, v))
}

// ValueTemplateHasSuffix applies the HasSuffix predicate on the "value_template" field.
func ValueTemplateHasSuffix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasSuffix(FieldValueTemplate, v))
}

// ValueTemplateIsNil applies the IsNil predicate on the "value_template" field.
func ValueTemplateIsNil() predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIsNull(FieldValueTemplate))
}

// ValueTemplateNotNil applies the NotNil predicate on the "value_template" field.
func ValueTemplateNotNil() predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotNull(FieldValueTemplate))
}

// ValueTemplateEqualFold applies the EqualFold predicate on the "value_template" field.
func ValueTemplateEqualFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEqualFold(FieldValueTemplate, v))
}

// ValueTemplateContainsFold applies the ContainsFold predicate on the "value_template" field.
func ValueTemplateContainsFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContainsFold(FieldValueTemplate, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.VariableReference {
	return predicate.VariableReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.VariableReference {
	return predicate.VariableReference(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.NotPredicates(p))
}
