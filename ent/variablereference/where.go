// Code generated by ent, DO NOT EDIT.

package variablereference

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldUpdatedAt, v))
}

// TargetServiceID applies equality check predicate on the "target_service_id" field. It's identical to TargetServiceIDEQ.
func TargetServiceID(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetServiceID, v))
}

// TargetName applies equality check predicate on the "target_name" field. It's identical to TargetNameEQ.
func TargetName(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetName, v))
}

// ValueTemplate applies equality check predicate on the "value_template" field. It's identical to ValueTemplateEQ.
func ValueTemplate(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldValueTemplate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldUpdatedAt, v))
}

// TargetServiceIDEQ applies the EQ predicate on the "target_service_id" field.
func TargetServiceIDEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetServiceID, v))
}

// TargetServiceIDNEQ applies the NEQ predicate on the "target_service_id" field.
func TargetServiceIDNEQ(v uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldTargetServiceID, v))
}

// TargetServiceIDIn applies the In predicate on the "target_service_id" field.
func TargetServiceIDIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldTargetServiceID, vs...))
}

// TargetServiceIDNotIn applies the NotIn predicate on the "target_service_id" field.
func TargetServiceIDNotIn(vs ...uuid.UUID) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldTargetServiceID, vs...))
}

// TargetNameEQ applies the EQ predicate on the "target_name" field.
func TargetNameEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldTargetName, v))
}

// TargetNameNEQ applies the NEQ predicate on the "target_name" field.
func TargetNameNEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldTargetName, v))
}

// TargetNameIn applies the In predicate on the "target_name" field.
func TargetNameIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldTargetName, vs...))
}

// TargetNameNotIn applies the NotIn predicate on the "target_name" field.
func TargetNameNotIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldTargetName, vs...))
}

// TargetNameGT applies the GT predicate on the "target_name" field.
func TargetNameGT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldTargetName, v))
}

// TargetNameGTE applies the GTE predicate on the "target_name" field.
func TargetNameGTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldTargetName, v))
}

// TargetNameLT applies the LT predicate on the "target_name" field.
func TargetNameLT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldTargetName, v))
}

// TargetNameLTE applies the LTE predicate on the "target_name" field.
func TargetNameLTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldTargetName, v))
}

// TargetNameContains applies the Contains predicate on the "target_name" field.
func TargetNameContains(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContains(FieldTargetName, v))
}

// TargetNameHasPrefix applies the HasPrefix predicate on the "target_name" field.
func TargetNameHasPrefix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasPrefix(FieldTargetName, v))
}

// TargetNameHasSuffix applies the HasSuffix predicate on the "target_name" field.
func TargetNameHasSuffix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasSuffix(FieldTargetName, v))
}

// TargetNameEqualFold applies the EqualFold predicate on the "target_name" field.
func TargetNameEqualFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEqualFold(FieldTargetName, v))
}

// TargetNameContainsFold applies the ContainsFold predicate on the "target_name" field.
func TargetNameContainsFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContainsFold(FieldTargetName, v))
}

// ValueTemplateEQ applies the EQ predicate on the "value_template" field.
func ValueTemplateEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEQ(FieldValueTemplate, v))
}

// ValueTemplateNEQ applies the NEQ predicate on the "value_template" field.
func ValueTemplateNEQ(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNEQ(FieldValueTemplate, v))
}

// ValueTemplateIn applies the In predicate on the "value_template" field.
func ValueTemplateIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldIn(FieldValueTemplate, vs...))
}

// ValueTemplateNotIn applies the NotIn predicate on the "value_template" field.
func ValueTemplateNotIn(vs ...string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldNotIn(FieldValueTemplate, vs...))
}

// ValueTemplateGT applies the GT predicate on the "value_template" field.
func ValueTemplateGT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGT(FieldValueTemplate, v))
}

// ValueTemplateGTE applies the GTE predicate on the "value_template" field.
func ValueTemplateGTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldGTE(FieldValueTemplate, v))
}

// ValueTemplateLT applies the LT predicate on the "value_template" field.
func ValueTemplateLT(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLT(FieldValueTemplate, v))
}

// ValueTemplateLTE applies the LTE predicate on the "value_template" field.
func ValueTemplateLTE(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldLTE(FieldValueTemplate, v))
}

// ValueTemplateContains applies the Contains predicate on the "value_template" field.
func ValueTemplateContains(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContains(FieldValueTemplate, v))
}

// ValueTemplateHasPrefix applies the HasPrefix predicate on the "value_template" field.
func ValueTemplateHasPrefix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasPrefix(FieldValueTemplate, v))
}

// ValueTemplateHasSuffix applies the HasSuffix predicate on the "value_template" field.
func ValueTemplateHasSuffix(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldHasSuffix(FieldValueTemplate, v))
}

// ValueTemplateEqualFold applies the EqualFold predicate on the "value_template" field.
func ValueTemplateEqualFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldEqualFold(FieldValueTemplate, v))
}

// ValueTemplateContainsFold applies the ContainsFold predicate on the "value_template" field.
func ValueTemplateContainsFold(v string) predicate.VariableReference {
	return predicate.VariableReference(sql.FieldContainsFold(FieldValueTemplate, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.VariableReference {
	return predicate.VariableReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.VariableReference {
	return predicate.VariableReference(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VariableReference) predicate.VariableReference {
	return predicate.VariableReference(sql.NotPredicates(p))
}
