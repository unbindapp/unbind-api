// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildkitsettings"
)

// BuildkitSettings is the model entity for the BuildkitSettings schema.
type BuildkitSettings struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Maximum number of parallel build steps
	MaxParallelism int `json:"max_parallelism,omitempty"`
	// Number of replicas for the buildkitd deployment
	Replicas     int `json:"replicas,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildkitSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case buildkitsettings.FieldMaxParallelism, buildkitsettings.FieldReplicas:
			values[i] = new(sql.NullInt64)
		case buildkitsettings.FieldCreatedAt, buildkitsettings.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case buildkitsettings.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildkitSettings fields.
func (bs *BuildkitSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case buildkitsettings.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bs.ID = *value
			}
		case buildkitsettings.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bs.CreatedAt = value.Time
			}
		case buildkitsettings.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bs.UpdatedAt = value.Time
			}
		case buildkitsettings.FieldMaxParallelism:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_parallelism", values[i])
			} else if value.Valid {
				bs.MaxParallelism = int(value.Int64)
			}
		case buildkitsettings.FieldReplicas:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field replicas", values[i])
			} else if value.Valid {
				bs.Replicas = int(value.Int64)
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BuildkitSettings.
// This includes values selected through modifiers, order, etc.
func (bs *BuildkitSettings) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// Update returns a builder for updating this BuildkitSettings.
// Note that you need to call BuildkitSettings.Unwrap() before calling this method if this BuildkitSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BuildkitSettings) Update() *BuildkitSettingsUpdateOne {
	return NewBuildkitSettingsClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BuildkitSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BuildkitSettings) Unwrap() *BuildkitSettings {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuildkitSettings is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BuildkitSettings) String() string {
	var builder strings.Builder
	builder.WriteString("BuildkitSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("max_parallelism=")
	builder.WriteString(fmt.Sprintf("%v", bs.MaxParallelism))
	builder.WriteString(", ")
	builder.WriteString("replicas=")
	builder.WriteString(fmt.Sprintf("%v", bs.Replicas))
	builder.WriteByte(')')
	return builder.String()
}

// BuildkitSettingsSlice is a parsable slice of BuildkitSettings.
type BuildkitSettingsSlice []*BuildkitSettings
