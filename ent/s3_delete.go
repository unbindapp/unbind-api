// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/s3"
)

// S3Delete is the builder for deleting a S3 entity.
type S3Delete struct {
	config
	hooks    []Hook
	mutation *S3Mutation
}

// Where appends a list predicates to the S3Delete builder.
func (s *S3Delete) Where(ps ...predicate.S3) *S3Delete {
	s.mutation.Where(ps...)
	return s
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (s *S3Delete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, s.sqlExec, s.mutation, s.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (s *S3Delete) ExecX(ctx context.Context) int {
	n, err := s.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (s *S3Delete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(s3.Table, sqlgraph.NewFieldSpec(s3.FieldID, field.TypeUUID))
	if ps := s.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, s.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	s.mutation.done = true
	return affected, err
}

// S3DeleteOne is the builder for deleting a single S3 entity.
type S3DeleteOne struct {
	s *S3Delete
}

// Where appends a list predicates to the S3Delete builder.
func (so *S3DeleteOne) Where(ps ...predicate.S3) *S3DeleteOne {
	so.s.mutation.Where(ps...)
	return so
}

// Exec executes the deletion query.
func (so *S3DeleteOne) Exec(ctx context.Context) error {
	n, err := so.s.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{s3.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (so *S3DeleteOne) ExecX(ctx context.Context) {
	if err := so.Exec(ctx); err != nil {
		panic(err)
	}
}
