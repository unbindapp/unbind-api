// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/jwtkey"
	"github.com/unbindapp/unbind-api/ent/oauth2code"
	"github.com/unbindapp/unbind-api/ent/oauth2token"
	"github.com/unbindapp/unbind-api/ent/user"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GithubApp is the client for interacting with the GithubApp builders.
	GithubApp *GithubAppClient
	// GithubInstallation is the client for interacting with the GithubInstallation builders.
	GithubInstallation *GithubInstallationClient
	// JWTKey is the client for interacting with the JWTKey builders.
	JWTKey *JWTKeyClient
	// Oauth2Code is the client for interacting with the Oauth2Code builders.
	Oauth2Code *Oauth2CodeClient
	// Oauth2Token is the client for interacting with the Oauth2Token builders.
	Oauth2Token *Oauth2TokenClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GithubApp = NewGithubAppClient(c.config)
	c.GithubInstallation = NewGithubInstallationClient(c.config)
	c.JWTKey = NewJWTKeyClient(c.config)
	c.Oauth2Code = NewOauth2CodeClient(c.config)
	c.Oauth2Token = NewOauth2TokenClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		GithubApp:          NewGithubAppClient(cfg),
		GithubInstallation: NewGithubInstallationClient(cfg),
		JWTKey:             NewJWTKeyClient(cfg),
		Oauth2Code:         NewOauth2CodeClient(cfg),
		Oauth2Token:        NewOauth2TokenClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		GithubApp:          NewGithubAppClient(cfg),
		GithubInstallation: NewGithubInstallationClient(cfg),
		JWTKey:             NewJWTKeyClient(cfg),
		Oauth2Code:         NewOauth2CodeClient(cfg),
		Oauth2Token:        NewOauth2TokenClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GithubApp.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.GithubApp, c.GithubInstallation, c.JWTKey, c.Oauth2Code, c.Oauth2Token,
		c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.GithubApp, c.GithubInstallation, c.JWTKey, c.Oauth2Code, c.Oauth2Token,
		c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GithubAppMutation:
		return c.GithubApp.mutate(ctx, m)
	case *GithubInstallationMutation:
		return c.GithubInstallation.mutate(ctx, m)
	case *JWTKeyMutation:
		return c.JWTKey.mutate(ctx, m)
	case *Oauth2CodeMutation:
		return c.Oauth2Code.mutate(ctx, m)
	case *Oauth2TokenMutation:
		return c.Oauth2Token.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GithubAppClient is a client for the GithubApp schema.
type GithubAppClient struct {
	config
}

// NewGithubAppClient returns a client for the GithubApp from the given config.
func NewGithubAppClient(c config) *GithubAppClient {
	return &GithubAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubapp.Hooks(f(g(h())))`.
func (c *GithubAppClient) Use(hooks ...Hook) {
	c.hooks.GithubApp = append(c.hooks.GithubApp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `githubapp.Intercept(f(g(h())))`.
func (c *GithubAppClient) Intercept(interceptors ...Interceptor) {
	c.inters.GithubApp = append(c.inters.GithubApp, interceptors...)
}

// Create returns a builder for creating a GithubApp entity.
func (c *GithubAppClient) Create() *GithubAppCreate {
	mutation := newGithubAppMutation(c.config, OpCreate)
	return &GithubAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GithubApp entities.
func (c *GithubAppClient) CreateBulk(builders ...*GithubAppCreate) *GithubAppCreateBulk {
	return &GithubAppCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GithubAppClient) MapCreateBulk(slice any, setFunc func(*GithubAppCreate, int)) *GithubAppCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GithubAppCreateBulk{err: fmt.Errorf("calling to GithubAppClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GithubAppCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GithubAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GithubApp.
func (c *GithubAppClient) Update() *GithubAppUpdate {
	mutation := newGithubAppMutation(c.config, OpUpdate)
	return &GithubAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GithubAppClient) UpdateOne(ga *GithubApp) *GithubAppUpdateOne {
	mutation := newGithubAppMutation(c.config, OpUpdateOne, withGithubApp(ga))
	return &GithubAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GithubAppClient) UpdateOneID(id int64) *GithubAppUpdateOne {
	mutation := newGithubAppMutation(c.config, OpUpdateOne, withGithubAppID(id))
	return &GithubAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GithubApp.
func (c *GithubAppClient) Delete() *GithubAppDelete {
	mutation := newGithubAppMutation(c.config, OpDelete)
	return &GithubAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GithubAppClient) DeleteOne(ga *GithubApp) *GithubAppDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GithubAppClient) DeleteOneID(id int64) *GithubAppDeleteOne {
	builder := c.Delete().Where(githubapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GithubAppDeleteOne{builder}
}

// Query returns a query builder for GithubApp.
func (c *GithubAppClient) Query() *GithubAppQuery {
	return &GithubAppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGithubApp},
		inters: c.Interceptors(),
	}
}

// Get returns a GithubApp entity by its id.
func (c *GithubAppClient) Get(ctx context.Context, id int64) (*GithubApp, error) {
	return c.Query().Where(githubapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GithubAppClient) GetX(ctx context.Context, id int64) *GithubApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstallations queries the installations edge of a GithubApp.
func (c *GithubAppClient) QueryInstallations(ga *GithubApp) *GithubInstallationQuery {
	query := (&GithubInstallationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(githubapp.Table, githubapp.FieldID, id),
			sqlgraph.To(githubinstallation.Table, githubinstallation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, githubapp.InstallationsTable, githubapp.InstallationsColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a GithubApp.
func (c *GithubAppClient) QueryUsers(ga *GithubApp) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(githubapp.Table, githubapp.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, githubapp.UsersTable, githubapp.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GithubAppClient) Hooks() []Hook {
	return c.hooks.GithubApp
}

// Interceptors returns the client interceptors.
func (c *GithubAppClient) Interceptors() []Interceptor {
	return c.inters.GithubApp
}

func (c *GithubAppClient) mutate(ctx context.Context, m *GithubAppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GithubAppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GithubAppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GithubAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GithubAppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GithubApp mutation op: %q", m.Op())
	}
}

// GithubInstallationClient is a client for the GithubInstallation schema.
type GithubInstallationClient struct {
	config
}

// NewGithubInstallationClient returns a client for the GithubInstallation from the given config.
func NewGithubInstallationClient(c config) *GithubInstallationClient {
	return &GithubInstallationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubinstallation.Hooks(f(g(h())))`.
func (c *GithubInstallationClient) Use(hooks ...Hook) {
	c.hooks.GithubInstallation = append(c.hooks.GithubInstallation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `githubinstallation.Intercept(f(g(h())))`.
func (c *GithubInstallationClient) Intercept(interceptors ...Interceptor) {
	c.inters.GithubInstallation = append(c.inters.GithubInstallation, interceptors...)
}

// Create returns a builder for creating a GithubInstallation entity.
func (c *GithubInstallationClient) Create() *GithubInstallationCreate {
	mutation := newGithubInstallationMutation(c.config, OpCreate)
	return &GithubInstallationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GithubInstallation entities.
func (c *GithubInstallationClient) CreateBulk(builders ...*GithubInstallationCreate) *GithubInstallationCreateBulk {
	return &GithubInstallationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GithubInstallationClient) MapCreateBulk(slice any, setFunc func(*GithubInstallationCreate, int)) *GithubInstallationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GithubInstallationCreateBulk{err: fmt.Errorf("calling to GithubInstallationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GithubInstallationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GithubInstallationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GithubInstallation.
func (c *GithubInstallationClient) Update() *GithubInstallationUpdate {
	mutation := newGithubInstallationMutation(c.config, OpUpdate)
	return &GithubInstallationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GithubInstallationClient) UpdateOne(gi *GithubInstallation) *GithubInstallationUpdateOne {
	mutation := newGithubInstallationMutation(c.config, OpUpdateOne, withGithubInstallation(gi))
	return &GithubInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GithubInstallationClient) UpdateOneID(id int64) *GithubInstallationUpdateOne {
	mutation := newGithubInstallationMutation(c.config, OpUpdateOne, withGithubInstallationID(id))
	return &GithubInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GithubInstallation.
func (c *GithubInstallationClient) Delete() *GithubInstallationDelete {
	mutation := newGithubInstallationMutation(c.config, OpDelete)
	return &GithubInstallationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GithubInstallationClient) DeleteOne(gi *GithubInstallation) *GithubInstallationDeleteOne {
	return c.DeleteOneID(gi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GithubInstallationClient) DeleteOneID(id int64) *GithubInstallationDeleteOne {
	builder := c.Delete().Where(githubinstallation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GithubInstallationDeleteOne{builder}
}

// Query returns a query builder for GithubInstallation.
func (c *GithubInstallationClient) Query() *GithubInstallationQuery {
	return &GithubInstallationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGithubInstallation},
		inters: c.Interceptors(),
	}
}

// Get returns a GithubInstallation entity by its id.
func (c *GithubInstallationClient) Get(ctx context.Context, id int64) (*GithubInstallation, error) {
	return c.Query().Where(githubinstallation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GithubInstallationClient) GetX(ctx context.Context, id int64) *GithubInstallation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGithubApps queries the github_apps edge of a GithubInstallation.
func (c *GithubInstallationClient) QueryGithubApps(gi *GithubInstallation) *GithubAppQuery {
	query := (&GithubAppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(githubinstallation.Table, githubinstallation.FieldID, id),
			sqlgraph.To(githubapp.Table, githubapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, githubinstallation.GithubAppsTable, githubinstallation.GithubAppsColumn),
		)
		fromV = sqlgraph.Neighbors(gi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GithubInstallationClient) Hooks() []Hook {
	return c.hooks.GithubInstallation
}

// Interceptors returns the client interceptors.
func (c *GithubInstallationClient) Interceptors() []Interceptor {
	return c.inters.GithubInstallation
}

func (c *GithubInstallationClient) mutate(ctx context.Context, m *GithubInstallationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GithubInstallationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GithubInstallationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GithubInstallationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GithubInstallationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GithubInstallation mutation op: %q", m.Op())
	}
}

// JWTKeyClient is a client for the JWTKey schema.
type JWTKeyClient struct {
	config
}

// NewJWTKeyClient returns a client for the JWTKey from the given config.
func NewJWTKeyClient(c config) *JWTKeyClient {
	return &JWTKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jwtkey.Hooks(f(g(h())))`.
func (c *JWTKeyClient) Use(hooks ...Hook) {
	c.hooks.JWTKey = append(c.hooks.JWTKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jwtkey.Intercept(f(g(h())))`.
func (c *JWTKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.JWTKey = append(c.inters.JWTKey, interceptors...)
}

// Create returns a builder for creating a JWTKey entity.
func (c *JWTKeyClient) Create() *JWTKeyCreate {
	mutation := newJWTKeyMutation(c.config, OpCreate)
	return &JWTKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JWTKey entities.
func (c *JWTKeyClient) CreateBulk(builders ...*JWTKeyCreate) *JWTKeyCreateBulk {
	return &JWTKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JWTKeyClient) MapCreateBulk(slice any, setFunc func(*JWTKeyCreate, int)) *JWTKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JWTKeyCreateBulk{err: fmt.Errorf("calling to JWTKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JWTKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JWTKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JWTKey.
func (c *JWTKeyClient) Update() *JWTKeyUpdate {
	mutation := newJWTKeyMutation(c.config, OpUpdate)
	return &JWTKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JWTKeyClient) UpdateOne(jk *JWTKey) *JWTKeyUpdateOne {
	mutation := newJWTKeyMutation(c.config, OpUpdateOne, withJWTKey(jk))
	return &JWTKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JWTKeyClient) UpdateOneID(id int) *JWTKeyUpdateOne {
	mutation := newJWTKeyMutation(c.config, OpUpdateOne, withJWTKeyID(id))
	return &JWTKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JWTKey.
func (c *JWTKeyClient) Delete() *JWTKeyDelete {
	mutation := newJWTKeyMutation(c.config, OpDelete)
	return &JWTKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JWTKeyClient) DeleteOne(jk *JWTKey) *JWTKeyDeleteOne {
	return c.DeleteOneID(jk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JWTKeyClient) DeleteOneID(id int) *JWTKeyDeleteOne {
	builder := c.Delete().Where(jwtkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JWTKeyDeleteOne{builder}
}

// Query returns a query builder for JWTKey.
func (c *JWTKeyClient) Query() *JWTKeyQuery {
	return &JWTKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJWTKey},
		inters: c.Interceptors(),
	}
}

// Get returns a JWTKey entity by its id.
func (c *JWTKeyClient) Get(ctx context.Context, id int) (*JWTKey, error) {
	return c.Query().Where(jwtkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JWTKeyClient) GetX(ctx context.Context, id int) *JWTKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JWTKeyClient) Hooks() []Hook {
	return c.hooks.JWTKey
}

// Interceptors returns the client interceptors.
func (c *JWTKeyClient) Interceptors() []Interceptor {
	return c.inters.JWTKey
}

func (c *JWTKeyClient) mutate(ctx context.Context, m *JWTKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JWTKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JWTKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JWTKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JWTKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JWTKey mutation op: %q", m.Op())
	}
}

// Oauth2CodeClient is a client for the Oauth2Code schema.
type Oauth2CodeClient struct {
	config
}

// NewOauth2CodeClient returns a client for the Oauth2Code from the given config.
func NewOauth2CodeClient(c config) *Oauth2CodeClient {
	return &Oauth2CodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauth2code.Hooks(f(g(h())))`.
func (c *Oauth2CodeClient) Use(hooks ...Hook) {
	c.hooks.Oauth2Code = append(c.hooks.Oauth2Code, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauth2code.Intercept(f(g(h())))`.
func (c *Oauth2CodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Oauth2Code = append(c.inters.Oauth2Code, interceptors...)
}

// Create returns a builder for creating a Oauth2Code entity.
func (c *Oauth2CodeClient) Create() *Oauth2CodeCreate {
	mutation := newOauth2CodeMutation(c.config, OpCreate)
	return &Oauth2CodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Oauth2Code entities.
func (c *Oauth2CodeClient) CreateBulk(builders ...*Oauth2CodeCreate) *Oauth2CodeCreateBulk {
	return &Oauth2CodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *Oauth2CodeClient) MapCreateBulk(slice any, setFunc func(*Oauth2CodeCreate, int)) *Oauth2CodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &Oauth2CodeCreateBulk{err: fmt.Errorf("calling to Oauth2CodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*Oauth2CodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &Oauth2CodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Oauth2Code.
func (c *Oauth2CodeClient) Update() *Oauth2CodeUpdate {
	mutation := newOauth2CodeMutation(c.config, OpUpdate)
	return &Oauth2CodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Oauth2CodeClient) UpdateOne(o *Oauth2Code) *Oauth2CodeUpdateOne {
	mutation := newOauth2CodeMutation(c.config, OpUpdateOne, withOauth2Code(o))
	return &Oauth2CodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Oauth2CodeClient) UpdateOneID(id uuid.UUID) *Oauth2CodeUpdateOne {
	mutation := newOauth2CodeMutation(c.config, OpUpdateOne, withOauth2CodeID(id))
	return &Oauth2CodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Oauth2Code.
func (c *Oauth2CodeClient) Delete() *Oauth2CodeDelete {
	mutation := newOauth2CodeMutation(c.config, OpDelete)
	return &Oauth2CodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Oauth2CodeClient) DeleteOne(o *Oauth2Code) *Oauth2CodeDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Oauth2CodeClient) DeleteOneID(id uuid.UUID) *Oauth2CodeDeleteOne {
	builder := c.Delete().Where(oauth2code.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Oauth2CodeDeleteOne{builder}
}

// Query returns a query builder for Oauth2Code.
func (c *Oauth2CodeClient) Query() *Oauth2CodeQuery {
	return &Oauth2CodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOauth2Code},
		inters: c.Interceptors(),
	}
}

// Get returns a Oauth2Code entity by its id.
func (c *Oauth2CodeClient) Get(ctx context.Context, id uuid.UUID) (*Oauth2Code, error) {
	return c.Query().Where(oauth2code.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Oauth2CodeClient) GetX(ctx context.Context, id uuid.UUID) *Oauth2Code {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Oauth2Code.
func (c *Oauth2CodeClient) QueryUser(o *Oauth2Code) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauth2code.Table, oauth2code.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauth2code.UserTable, oauth2code.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Oauth2CodeClient) Hooks() []Hook {
	return c.hooks.Oauth2Code
}

// Interceptors returns the client interceptors.
func (c *Oauth2CodeClient) Interceptors() []Interceptor {
	return c.inters.Oauth2Code
}

func (c *Oauth2CodeClient) mutate(ctx context.Context, m *Oauth2CodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Oauth2CodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Oauth2CodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Oauth2CodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Oauth2CodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Oauth2Code mutation op: %q", m.Op())
	}
}

// Oauth2TokenClient is a client for the Oauth2Token schema.
type Oauth2TokenClient struct {
	config
}

// NewOauth2TokenClient returns a client for the Oauth2Token from the given config.
func NewOauth2TokenClient(c config) *Oauth2TokenClient {
	return &Oauth2TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauth2token.Hooks(f(g(h())))`.
func (c *Oauth2TokenClient) Use(hooks ...Hook) {
	c.hooks.Oauth2Token = append(c.hooks.Oauth2Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauth2token.Intercept(f(g(h())))`.
func (c *Oauth2TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Oauth2Token = append(c.inters.Oauth2Token, interceptors...)
}

// Create returns a builder for creating a Oauth2Token entity.
func (c *Oauth2TokenClient) Create() *Oauth2TokenCreate {
	mutation := newOauth2TokenMutation(c.config, OpCreate)
	return &Oauth2TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Oauth2Token entities.
func (c *Oauth2TokenClient) CreateBulk(builders ...*Oauth2TokenCreate) *Oauth2TokenCreateBulk {
	return &Oauth2TokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *Oauth2TokenClient) MapCreateBulk(slice any, setFunc func(*Oauth2TokenCreate, int)) *Oauth2TokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &Oauth2TokenCreateBulk{err: fmt.Errorf("calling to Oauth2TokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*Oauth2TokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &Oauth2TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Oauth2Token.
func (c *Oauth2TokenClient) Update() *Oauth2TokenUpdate {
	mutation := newOauth2TokenMutation(c.config, OpUpdate)
	return &Oauth2TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Oauth2TokenClient) UpdateOne(o *Oauth2Token) *Oauth2TokenUpdateOne {
	mutation := newOauth2TokenMutation(c.config, OpUpdateOne, withOauth2Token(o))
	return &Oauth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Oauth2TokenClient) UpdateOneID(id uuid.UUID) *Oauth2TokenUpdateOne {
	mutation := newOauth2TokenMutation(c.config, OpUpdateOne, withOauth2TokenID(id))
	return &Oauth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Oauth2Token.
func (c *Oauth2TokenClient) Delete() *Oauth2TokenDelete {
	mutation := newOauth2TokenMutation(c.config, OpDelete)
	return &Oauth2TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Oauth2TokenClient) DeleteOne(o *Oauth2Token) *Oauth2TokenDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Oauth2TokenClient) DeleteOneID(id uuid.UUID) *Oauth2TokenDeleteOne {
	builder := c.Delete().Where(oauth2token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Oauth2TokenDeleteOne{builder}
}

// Query returns a query builder for Oauth2Token.
func (c *Oauth2TokenClient) Query() *Oauth2TokenQuery {
	return &Oauth2TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOauth2Token},
		inters: c.Interceptors(),
	}
}

// Get returns a Oauth2Token entity by its id.
func (c *Oauth2TokenClient) Get(ctx context.Context, id uuid.UUID) (*Oauth2Token, error) {
	return c.Query().Where(oauth2token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Oauth2TokenClient) GetX(ctx context.Context, id uuid.UUID) *Oauth2Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Oauth2Token.
func (c *Oauth2TokenClient) QueryUser(o *Oauth2Token) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauth2token.Table, oauth2token.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauth2token.UserTable, oauth2token.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Oauth2TokenClient) Hooks() []Hook {
	return c.hooks.Oauth2Token
}

// Interceptors returns the client interceptors.
func (c *Oauth2TokenClient) Interceptors() []Interceptor {
	return c.inters.Oauth2Token
}

func (c *Oauth2TokenClient) mutate(ctx context.Context, m *Oauth2TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Oauth2TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Oauth2TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Oauth2TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Oauth2TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Oauth2Token mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOauth2Tokens queries the oauth2_tokens edge of a User.
func (c *UserClient) QueryOauth2Tokens(u *User) *Oauth2TokenQuery {
	query := (&Oauth2TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(oauth2token.Table, oauth2token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.Oauth2TokensTable, user.Oauth2TokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauth2Codes queries the oauth2_codes edge of a User.
func (c *UserClient) QueryOauth2Codes(u *User) *Oauth2CodeQuery {
	query := (&Oauth2CodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(oauth2code.Table, oauth2code.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.Oauth2CodesTable, user.Oauth2CodesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedBy queries the created_by edge of a User.
func (c *UserClient) QueryCreatedBy(u *User) *GithubAppQuery {
	query := (&GithubAppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(githubapp.Table, githubapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedByTable, user.CreatedByColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		GithubApp, GithubInstallation, JWTKey, Oauth2Code, Oauth2Token, User []ent.Hook
	}
	inters struct {
		GithubApp, GithubInstallation, JWTKey, Oauth2Code, Oauth2Token,
		User []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
