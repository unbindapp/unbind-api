// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/pvcmetadata"
)

// PVCMetadata is the model entity for the PVCMetadata schema.
type PVCMetadata struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ID of the PVC
	PvcID string `json:"pvc_id,omitempty"`
	// Display name of the PVC
	Name *string `json:"name,omitempty"`
	// Description of the PVC
	Description  *string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PVCMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pvcmetadata.FieldPvcID, pvcmetadata.FieldName, pvcmetadata.FieldDescription:
			values[i] = new(sql.NullString)
		case pvcmetadata.FieldCreatedAt, pvcmetadata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pvcmetadata.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PVCMetadata fields.
func (pm *PVCMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pvcmetadata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pm.ID = *value
			}
		case pvcmetadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case pvcmetadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case pvcmetadata.FieldPvcID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pvc_id", values[i])
			} else if value.Valid {
				pm.PvcID = value.String
			}
		case pvcmetadata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pm.Name = new(string)
				*pm.Name = value.String
			}
		case pvcmetadata.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pm.Description = new(string)
				*pm.Description = value.String
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PVCMetadata.
// This includes values selected through modifiers, order, etc.
func (pm *PVCMetadata) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// Update returns a builder for updating this PVCMetadata.
// Note that you need to call PVCMetadata.Unwrap() before calling this method if this PVCMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PVCMetadata) Update() *PVCMetadataUpdateOne {
	return NewPVCMetadataClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PVCMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PVCMetadata) Unwrap() *PVCMetadata {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PVCMetadata is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PVCMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("PVCMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pvc_id=")
	builder.WriteString(pm.PvcID)
	builder.WriteString(", ")
	if v := pm.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pm.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// PVCMetadataSlice is a parsable slice of PVCMetadata.
type PVCMetadataSlice []*PVCMetadata
