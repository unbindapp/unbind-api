// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/bootstrap"
)

// BootstrapCreate is the builder for creating a Bootstrap entity.
type BootstrapCreate struct {
	config
	mutation *BootstrapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsBootstrapped sets the "is_bootstrapped" field.
func (bc *BootstrapCreate) SetIsBootstrapped(b bool) *BootstrapCreate {
	bc.mutation.SetIsBootstrapped(b)
	return bc
}

// Mutation returns the BootstrapMutation object of the builder.
func (bc *BootstrapCreate) Mutation() *BootstrapMutation {
	return bc.mutation
}

// Save creates the Bootstrap in the database.
func (bc *BootstrapCreate) Save(ctx context.Context) (*Bootstrap, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BootstrapCreate) SaveX(ctx context.Context) *Bootstrap {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BootstrapCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BootstrapCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BootstrapCreate) check() error {
	if _, ok := bc.mutation.IsBootstrapped(); !ok {
		return &ValidationError{Name: "is_bootstrapped", err: errors.New(`ent: missing required field "Bootstrap.is_bootstrapped"`)}
	}
	return nil
}

func (bc *BootstrapCreate) sqlSave(ctx context.Context) (*Bootstrap, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BootstrapCreate) createSpec() (*Bootstrap, *sqlgraph.CreateSpec) {
	var (
		_node = &Bootstrap{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bootstrap.Table, sqlgraph.NewFieldSpec(bootstrap.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.IsBootstrapped(); ok {
		_spec.SetField(bootstrap.FieldIsBootstrapped, field.TypeBool, value)
		_node.IsBootstrapped = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bootstrap.Create().
//		SetIsBootstrapped(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BootstrapUpsert) {
//			SetIsBootstrapped(v+v).
//		}).
//		Exec(ctx)
func (bc *BootstrapCreate) OnConflict(opts ...sql.ConflictOption) *BootstrapUpsertOne {
	bc.conflict = opts
	return &BootstrapUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BootstrapCreate) OnConflictColumns(columns ...string) *BootstrapUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BootstrapUpsertOne{
		create: bc,
	}
}

type (
	// BootstrapUpsertOne is the builder for "upsert"-ing
	//  one Bootstrap node.
	BootstrapUpsertOne struct {
		create *BootstrapCreate
	}

	// BootstrapUpsert is the "OnConflict" setter.
	BootstrapUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsBootstrapped sets the "is_bootstrapped" field.
func (u *BootstrapUpsert) SetIsBootstrapped(v bool) *BootstrapUpsert {
	u.Set(bootstrap.FieldIsBootstrapped, v)
	return u
}

// UpdateIsBootstrapped sets the "is_bootstrapped" field to the value that was provided on create.
func (u *BootstrapUpsert) UpdateIsBootstrapped() *BootstrapUpsert {
	u.SetExcluded(bootstrap.FieldIsBootstrapped)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BootstrapUpsertOne) UpdateNewValues() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BootstrapUpsertOne) Ignore() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BootstrapUpsertOne) DoNothing() *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BootstrapCreate.OnConflict
// documentation for more info.
func (u *BootstrapUpsertOne) Update(set func(*BootstrapUpsert)) *BootstrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BootstrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsBootstrapped sets the "is_bootstrapped" field.
func (u *BootstrapUpsertOne) SetIsBootstrapped(v bool) *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetIsBootstrapped(v)
	})
}

// UpdateIsBootstrapped sets the "is_bootstrapped" field to the value that was provided on create.
func (u *BootstrapUpsertOne) UpdateIsBootstrapped() *BootstrapUpsertOne {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateIsBootstrapped()
	})
}

// Exec executes the query.
func (u *BootstrapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BootstrapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BootstrapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BootstrapUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BootstrapUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BootstrapCreateBulk is the builder for creating many Bootstrap entities in bulk.
type BootstrapCreateBulk struct {
	config
	err      error
	builders []*BootstrapCreate
	conflict []sql.ConflictOption
}

// Save creates the Bootstrap entities in the database.
func (bcb *BootstrapCreateBulk) Save(ctx context.Context) ([]*Bootstrap, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bootstrap, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BootstrapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BootstrapCreateBulk) SaveX(ctx context.Context) []*Bootstrap {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BootstrapCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BootstrapCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bootstrap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BootstrapUpsert) {
//			SetIsBootstrapped(v+v).
//		}).
//		Exec(ctx)
func (bcb *BootstrapCreateBulk) OnConflict(opts ...sql.ConflictOption) *BootstrapUpsertBulk {
	bcb.conflict = opts
	return &BootstrapUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BootstrapCreateBulk) OnConflictColumns(columns ...string) *BootstrapUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BootstrapUpsertBulk{
		create: bcb,
	}
}

// BootstrapUpsertBulk is the builder for "upsert"-ing
// a bulk of Bootstrap nodes.
type BootstrapUpsertBulk struct {
	create *BootstrapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BootstrapUpsertBulk) UpdateNewValues() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bootstrap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BootstrapUpsertBulk) Ignore() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BootstrapUpsertBulk) DoNothing() *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BootstrapCreateBulk.OnConflict
// documentation for more info.
func (u *BootstrapUpsertBulk) Update(set func(*BootstrapUpsert)) *BootstrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BootstrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsBootstrapped sets the "is_bootstrapped" field.
func (u *BootstrapUpsertBulk) SetIsBootstrapped(v bool) *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.SetIsBootstrapped(v)
	})
}

// UpdateIsBootstrapped sets the "is_bootstrapped" field to the value that was provided on create.
func (u *BootstrapUpsertBulk) UpdateIsBootstrapped() *BootstrapUpsertBulk {
	return u.Update(func(s *BootstrapUpsert) {
		s.UpdateIsBootstrapped()
	})
}

// Exec executes the query.
func (u *BootstrapUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BootstrapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BootstrapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BootstrapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
