// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/template"
)

// Template is the model entity for the Template schema.
type Template struct {
	config `json:"-"`
	// ID of the ent.
	// The primary key of the entity.
	ID uuid.UUID `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords []string `json:"keywords,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// If true, the template cannot be modified or deleted (system bundle)
	Immutable bool `json:"immutable,omitempty"`
	// Definition holds the value of the "definition" field.
	Definition schema.TemplateDefinition `json:"definition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateQuery when eager-loading is set.
	Edges        TemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TemplateEdges holds the relations/edges for other nodes in the graph.
type TemplateEdges struct {
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[0] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Template) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case template.FieldKeywords, template.FieldDefinition:
			values[i] = new([]byte)
		case template.FieldImmutable:
			values[i] = new(sql.NullBool)
		case template.FieldVersion:
			values[i] = new(sql.NullInt64)
		case template.FieldName, template.FieldDescription, template.FieldIcon:
			values[i] = new(sql.NullString)
		case template.FieldCreatedAt, template.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case template.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Template fields.
func (t *Template) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case template.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case template.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case template.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case template.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case template.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case template.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				t.Icon = value.String
			}
		case template.FieldKeywords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Keywords); err != nil {
					return fmt.Errorf("unmarshal field keywords: %w", err)
				}
			}
		case template.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = int(value.Int64)
			}
		case template.FieldImmutable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field immutable", values[i])
			} else if value.Valid {
				t.Immutable = value.Bool
			}
		case template.FieldDefinition:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field definition", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Definition); err != nil {
					return fmt.Errorf("unmarshal field definition: %w", err)
				}
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Template.
// This includes values selected through modifiers, order, etc.
func (t *Template) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryServices queries the "services" edge of the Template entity.
func (t *Template) QueryServices() *ServiceQuery {
	return NewTemplateClient(t.config).QueryServices(t)
}

// Update returns a builder for updating this Template.
// Note that you need to call Template.Unwrap() before calling this method if this Template
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Template) Update() *TemplateUpdateOne {
	return NewTemplateClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Template entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Template) Unwrap() *Template {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Template is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Template) String() string {
	var builder strings.Builder
	builder.WriteString("Template(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(t.Icon)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(fmt.Sprintf("%v", t.Keywords))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", t.Version))
	builder.WriteString(", ")
	builder.WriteString("immutable=")
	builder.WriteString(fmt.Sprintf("%v", t.Immutable))
	builder.WriteString(", ")
	builder.WriteString("definition=")
	builder.WriteString(fmt.Sprintf("%v", t.Definition))
	builder.WriteByte(')')
	return builder.String()
}

// Templates is a parsable slice of Template.
type Templates []*Template
