// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/buildjob"
	"github.com/unbindapp/unbind-api/ent/deployment"
	"github.com/unbindapp/unbind-api/ent/environment"
	"github.com/unbindapp/unbind-api/ent/githubapp"
	"github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/group"
	"github.com/unbindapp/unbind-api/ent/jwtkey"
	"github.com/unbindapp/unbind-api/ent/oauth2code"
	"github.com/unbindapp/unbind-api/ent/oauth2token"
	"github.com/unbindapp/unbind-api/ent/permission"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/project"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
	"github.com/unbindapp/unbind-api/ent/team"
	"github.com/unbindapp/unbind-api/ent/user"
	"github.com/unbindapp/unbind-api/internal/sourceanalyzer/enum"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBuildJob           = "BuildJob"
	TypeDeployment         = "Deployment"
	TypeEnvironment        = "Environment"
	TypeGithubApp          = "GithubApp"
	TypeGithubInstallation = "GithubInstallation"
	TypeGroup              = "Group"
	TypeJWTKey             = "JWTKey"
	TypeOauth2Code         = "Oauth2Code"
	TypeOauth2Token        = "Oauth2Token"
	TypePermission         = "Permission"
	TypeProject            = "Project"
	TypeService            = "Service"
	TypeServiceConfig      = "ServiceConfig"
	TypeTeam               = "Team"
	TypeUser               = "User"
)

// BuildJobMutation represents an operation that mutates the BuildJob nodes in the graph.
type BuildJobMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	created_at            *time.Time
	updated_at            *time.Time
	status                *buildjob.Status
	error                 *string
	started_at            *time.Time
	completed_at          *time.Time
	kubernetes_job_name   *string
	kubernetes_job_status *string
	attempts              *int
	addattempts           *int
	clearedFields         map[string]struct{}
	service               *uuid.UUID
	clearedservice        bool
	done                  bool
	oldValue              func(context.Context) (*BuildJob, error)
	predicates            []predicate.BuildJob
}

var _ ent.Mutation = (*BuildJobMutation)(nil)

// buildjobOption allows management of the mutation configuration using functional options.
type buildjobOption func(*BuildJobMutation)

// newBuildJobMutation creates new mutation for the BuildJob entity.
func newBuildJobMutation(c config, op Op, opts ...buildjobOption) *BuildJobMutation {
	m := &BuildJobMutation{
		config:        c,
		op:            op,
		typ:           TypeBuildJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBuildJobID sets the ID field of the mutation.
func withBuildJobID(id uuid.UUID) buildjobOption {
	return func(m *BuildJobMutation) {
		var (
			err   error
			once  sync.Once
			value *BuildJob
		)
		m.oldValue = func(ctx context.Context) (*BuildJob, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BuildJob.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBuildJob sets the old BuildJob of the mutation.
func withBuildJob(node *BuildJob) buildjobOption {
	return func(m *BuildJobMutation) {
		m.oldValue = func(context.Context) (*BuildJob, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BuildJobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BuildJobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BuildJob entities.
func (m *BuildJobMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BuildJobMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BuildJobMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BuildJob.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BuildJobMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BuildJobMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BuildJobMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BuildJobMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BuildJobMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BuildJobMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetServiceID sets the "service_id" field.
func (m *BuildJobMutation) SetServiceID(u uuid.UUID) {
	m.service = &u
}

// ServiceID returns the value of the "service_id" field in the mutation.
func (m *BuildJobMutation) ServiceID() (r uuid.UUID, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceID returns the old "service_id" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldServiceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceID: %w", err)
	}
	return oldValue.ServiceID, nil
}

// ResetServiceID resets all changes to the "service_id" field.
func (m *BuildJobMutation) ResetServiceID() {
	m.service = nil
}

// SetStatus sets the "status" field.
func (m *BuildJobMutation) SetStatus(b buildjob.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BuildJobMutation) Status() (r buildjob.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldStatus(ctx context.Context) (v buildjob.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BuildJobMutation) ResetStatus() {
	m.status = nil
}

// SetError sets the "error" field.
func (m *BuildJobMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *BuildJobMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *BuildJobMutation) ClearError() {
	m.error = nil
	m.clearedFields[buildjob.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *BuildJobMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[buildjob.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *BuildJobMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, buildjob.FieldError)
}

// SetStartedAt sets the "started_at" field.
func (m *BuildJobMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *BuildJobMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldStartedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *BuildJobMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[buildjob.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *BuildJobMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[buildjob.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *BuildJobMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, buildjob.FieldStartedAt)
}

// SetCompletedAt sets the "completed_at" field.
func (m *BuildJobMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *BuildJobMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldCompletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *BuildJobMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[buildjob.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *BuildJobMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[buildjob.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *BuildJobMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, buildjob.FieldCompletedAt)
}

// SetKubernetesJobName sets the "kubernetes_job_name" field.
func (m *BuildJobMutation) SetKubernetesJobName(s string) {
	m.kubernetes_job_name = &s
}

// KubernetesJobName returns the value of the "kubernetes_job_name" field in the mutation.
func (m *BuildJobMutation) KubernetesJobName() (r string, exists bool) {
	v := m.kubernetes_job_name
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesJobName returns the old "kubernetes_job_name" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldKubernetesJobName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesJobName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesJobName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesJobName: %w", err)
	}
	return oldValue.KubernetesJobName, nil
}

// ClearKubernetesJobName clears the value of the "kubernetes_job_name" field.
func (m *BuildJobMutation) ClearKubernetesJobName() {
	m.kubernetes_job_name = nil
	m.clearedFields[buildjob.FieldKubernetesJobName] = struct{}{}
}

// KubernetesJobNameCleared returns if the "kubernetes_job_name" field was cleared in this mutation.
func (m *BuildJobMutation) KubernetesJobNameCleared() bool {
	_, ok := m.clearedFields[buildjob.FieldKubernetesJobName]
	return ok
}

// ResetKubernetesJobName resets all changes to the "kubernetes_job_name" field.
func (m *BuildJobMutation) ResetKubernetesJobName() {
	m.kubernetes_job_name = nil
	delete(m.clearedFields, buildjob.FieldKubernetesJobName)
}

// SetKubernetesJobStatus sets the "kubernetes_job_status" field.
func (m *BuildJobMutation) SetKubernetesJobStatus(s string) {
	m.kubernetes_job_status = &s
}

// KubernetesJobStatus returns the value of the "kubernetes_job_status" field in the mutation.
func (m *BuildJobMutation) KubernetesJobStatus() (r string, exists bool) {
	v := m.kubernetes_job_status
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesJobStatus returns the old "kubernetes_job_status" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldKubernetesJobStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesJobStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesJobStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesJobStatus: %w", err)
	}
	return oldValue.KubernetesJobStatus, nil
}

// ClearKubernetesJobStatus clears the value of the "kubernetes_job_status" field.
func (m *BuildJobMutation) ClearKubernetesJobStatus() {
	m.kubernetes_job_status = nil
	m.clearedFields[buildjob.FieldKubernetesJobStatus] = struct{}{}
}

// KubernetesJobStatusCleared returns if the "kubernetes_job_status" field was cleared in this mutation.
func (m *BuildJobMutation) KubernetesJobStatusCleared() bool {
	_, ok := m.clearedFields[buildjob.FieldKubernetesJobStatus]
	return ok
}

// ResetKubernetesJobStatus resets all changes to the "kubernetes_job_status" field.
func (m *BuildJobMutation) ResetKubernetesJobStatus() {
	m.kubernetes_job_status = nil
	delete(m.clearedFields, buildjob.FieldKubernetesJobStatus)
}

// SetAttempts sets the "attempts" field.
func (m *BuildJobMutation) SetAttempts(i int) {
	m.attempts = &i
	m.addattempts = nil
}

// Attempts returns the value of the "attempts" field in the mutation.
func (m *BuildJobMutation) Attempts() (r int, exists bool) {
	v := m.attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldAttempts returns the old "attempts" field's value of the BuildJob entity.
// If the BuildJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BuildJobMutation) OldAttempts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttempts: %w", err)
	}
	return oldValue.Attempts, nil
}

// AddAttempts adds i to the "attempts" field.
func (m *BuildJobMutation) AddAttempts(i int) {
	if m.addattempts != nil {
		*m.addattempts += i
	} else {
		m.addattempts = &i
	}
}

// AddedAttempts returns the value that was added to the "attempts" field in this mutation.
func (m *BuildJobMutation) AddedAttempts() (r int, exists bool) {
	v := m.addattempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttempts resets all changes to the "attempts" field.
func (m *BuildJobMutation) ResetAttempts() {
	m.attempts = nil
	m.addattempts = nil
}

// ClearService clears the "service" edge to the Service entity.
func (m *BuildJobMutation) ClearService() {
	m.clearedservice = true
	m.clearedFields[buildjob.FieldServiceID] = struct{}{}
}

// ServiceCleared reports if the "service" edge to the Service entity was cleared.
func (m *BuildJobMutation) ServiceCleared() bool {
	return m.clearedservice
}

// ServiceIDs returns the "service" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ServiceID instead. It exists only for internal usage by the builders.
func (m *BuildJobMutation) ServiceIDs() (ids []uuid.UUID) {
	if id := m.service; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetService resets all changes to the "service" edge.
func (m *BuildJobMutation) ResetService() {
	m.service = nil
	m.clearedservice = false
}

// Where appends a list predicates to the BuildJobMutation builder.
func (m *BuildJobMutation) Where(ps ...predicate.BuildJob) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BuildJobMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BuildJobMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BuildJob, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BuildJobMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BuildJobMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BuildJob).
func (m *BuildJobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BuildJobMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, buildjob.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, buildjob.FieldUpdatedAt)
	}
	if m.service != nil {
		fields = append(fields, buildjob.FieldServiceID)
	}
	if m.status != nil {
		fields = append(fields, buildjob.FieldStatus)
	}
	if m.error != nil {
		fields = append(fields, buildjob.FieldError)
	}
	if m.started_at != nil {
		fields = append(fields, buildjob.FieldStartedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, buildjob.FieldCompletedAt)
	}
	if m.kubernetes_job_name != nil {
		fields = append(fields, buildjob.FieldKubernetesJobName)
	}
	if m.kubernetes_job_status != nil {
		fields = append(fields, buildjob.FieldKubernetesJobStatus)
	}
	if m.attempts != nil {
		fields = append(fields, buildjob.FieldAttempts)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BuildJobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case buildjob.FieldCreatedAt:
		return m.CreatedAt()
	case buildjob.FieldUpdatedAt:
		return m.UpdatedAt()
	case buildjob.FieldServiceID:
		return m.ServiceID()
	case buildjob.FieldStatus:
		return m.Status()
	case buildjob.FieldError:
		return m.Error()
	case buildjob.FieldStartedAt:
		return m.StartedAt()
	case buildjob.FieldCompletedAt:
		return m.CompletedAt()
	case buildjob.FieldKubernetesJobName:
		return m.KubernetesJobName()
	case buildjob.FieldKubernetesJobStatus:
		return m.KubernetesJobStatus()
	case buildjob.FieldAttempts:
		return m.Attempts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BuildJobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case buildjob.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case buildjob.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case buildjob.FieldServiceID:
		return m.OldServiceID(ctx)
	case buildjob.FieldStatus:
		return m.OldStatus(ctx)
	case buildjob.FieldError:
		return m.OldError(ctx)
	case buildjob.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case buildjob.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case buildjob.FieldKubernetesJobName:
		return m.OldKubernetesJobName(ctx)
	case buildjob.FieldKubernetesJobStatus:
		return m.OldKubernetesJobStatus(ctx)
	case buildjob.FieldAttempts:
		return m.OldAttempts(ctx)
	}
	return nil, fmt.Errorf("unknown BuildJob field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BuildJobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case buildjob.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case buildjob.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case buildjob.FieldServiceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceID(v)
		return nil
	case buildjob.FieldStatus:
		v, ok := value.(buildjob.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case buildjob.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case buildjob.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case buildjob.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case buildjob.FieldKubernetesJobName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesJobName(v)
		return nil
	case buildjob.FieldKubernetesJobStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesJobStatus(v)
		return nil
	case buildjob.FieldAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown BuildJob field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BuildJobMutation) AddedFields() []string {
	var fields []string
	if m.addattempts != nil {
		fields = append(fields, buildjob.FieldAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BuildJobMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case buildjob.FieldAttempts:
		return m.AddedAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BuildJobMutation) AddField(name string, value ent.Value) error {
	switch name {
	case buildjob.FieldAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown BuildJob numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BuildJobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(buildjob.FieldError) {
		fields = append(fields, buildjob.FieldError)
	}
	if m.FieldCleared(buildjob.FieldStartedAt) {
		fields = append(fields, buildjob.FieldStartedAt)
	}
	if m.FieldCleared(buildjob.FieldCompletedAt) {
		fields = append(fields, buildjob.FieldCompletedAt)
	}
	if m.FieldCleared(buildjob.FieldKubernetesJobName) {
		fields = append(fields, buildjob.FieldKubernetesJobName)
	}
	if m.FieldCleared(buildjob.FieldKubernetesJobStatus) {
		fields = append(fields, buildjob.FieldKubernetesJobStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BuildJobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BuildJobMutation) ClearField(name string) error {
	switch name {
	case buildjob.FieldError:
		m.ClearError()
		return nil
	case buildjob.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	case buildjob.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	case buildjob.FieldKubernetesJobName:
		m.ClearKubernetesJobName()
		return nil
	case buildjob.FieldKubernetesJobStatus:
		m.ClearKubernetesJobStatus()
		return nil
	}
	return fmt.Errorf("unknown BuildJob nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BuildJobMutation) ResetField(name string) error {
	switch name {
	case buildjob.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case buildjob.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case buildjob.FieldServiceID:
		m.ResetServiceID()
		return nil
	case buildjob.FieldStatus:
		m.ResetStatus()
		return nil
	case buildjob.FieldError:
		m.ResetError()
		return nil
	case buildjob.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case buildjob.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case buildjob.FieldKubernetesJobName:
		m.ResetKubernetesJobName()
		return nil
	case buildjob.FieldKubernetesJobStatus:
		m.ResetKubernetesJobStatus()
		return nil
	case buildjob.FieldAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown BuildJob field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BuildJobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.service != nil {
		edges = append(edges, buildjob.EdgeService)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BuildJobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case buildjob.EdgeService:
		if id := m.service; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BuildJobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BuildJobMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BuildJobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedservice {
		edges = append(edges, buildjob.EdgeService)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BuildJobMutation) EdgeCleared(name string) bool {
	switch name {
	case buildjob.EdgeService:
		return m.clearedservice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BuildJobMutation) ClearEdge(name string) error {
	switch name {
	case buildjob.EdgeService:
		m.ClearService()
		return nil
	}
	return fmt.Errorf("unknown BuildJob unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BuildJobMutation) ResetEdge(name string) error {
	switch name {
	case buildjob.EdgeService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown BuildJob edge %s", name)
}

// DeploymentMutation represents an operation that mutates the Deployment nodes in the graph.
type DeploymentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Deployment, error)
	predicates    []predicate.Deployment
}

var _ ent.Mutation = (*DeploymentMutation)(nil)

// deploymentOption allows management of the mutation configuration using functional options.
type deploymentOption func(*DeploymentMutation)

// newDeploymentMutation creates new mutation for the Deployment entity.
func newDeploymentMutation(c config, op Op, opts ...deploymentOption) *DeploymentMutation {
	m := &DeploymentMutation{
		config:        c,
		op:            op,
		typ:           TypeDeployment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeploymentID sets the ID field of the mutation.
func withDeploymentID(id uuid.UUID) deploymentOption {
	return func(m *DeploymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Deployment
		)
		m.oldValue = func(ctx context.Context) (*Deployment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deployment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeployment sets the old Deployment of the mutation.
func withDeployment(node *Deployment) deploymentOption {
	return func(m *DeploymentMutation) {
		m.oldValue = func(context.Context) (*Deployment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeploymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeploymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Deployment entities.
func (m *DeploymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeploymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeploymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Deployment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DeploymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeploymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeploymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeploymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeploymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Deployment entity.
// If the Deployment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeploymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeploymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the DeploymentMutation builder.
func (m *DeploymentMutation) Where(ps ...predicate.Deployment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeploymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeploymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Deployment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeploymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeploymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Deployment).
func (m *DeploymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeploymentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, deployment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deployment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeploymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deployment.FieldCreatedAt:
		return m.CreatedAt()
	case deployment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeploymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deployment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deployment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Deployment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deployment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deployment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeploymentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeploymentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeploymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Deployment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeploymentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeploymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeploymentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Deployment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeploymentMutation) ResetField(name string) error {
	switch name {
	case deployment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deployment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Deployment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeploymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeploymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeploymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeploymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeploymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeploymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeploymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Deployment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeploymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Deployment edge %s", name)
}

// EnvironmentMutation represents an operation that mutates the Environment nodes in the graph.
type EnvironmentMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	name              *string
	display_name      *string
	description       *string
	active            *bool
	kubernetes_secret *string
	clearedFields     map[string]struct{}
	project           *uuid.UUID
	clearedproject    bool
	services          map[uuid.UUID]struct{}
	removedservices   map[uuid.UUID]struct{}
	clearedservices   bool
	done              bool
	oldValue          func(context.Context) (*Environment, error)
	predicates        []predicate.Environment
}

var _ ent.Mutation = (*EnvironmentMutation)(nil)

// environmentOption allows management of the mutation configuration using functional options.
type environmentOption func(*EnvironmentMutation)

// newEnvironmentMutation creates new mutation for the Environment entity.
func newEnvironmentMutation(c config, op Op, opts ...environmentOption) *EnvironmentMutation {
	m := &EnvironmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEnvironment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnvironmentID sets the ID field of the mutation.
func withEnvironmentID(id uuid.UUID) environmentOption {
	return func(m *EnvironmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Environment
		)
		m.oldValue = func(ctx context.Context) (*Environment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Environment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnvironment sets the old Environment of the mutation.
func withEnvironment(node *Environment) environmentOption {
	return func(m *EnvironmentMutation) {
		m.oldValue = func(context.Context) (*Environment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnvironmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnvironmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Environment entities.
func (m *EnvironmentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnvironmentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnvironmentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Environment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EnvironmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EnvironmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EnvironmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EnvironmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EnvironmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EnvironmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *EnvironmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EnvironmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EnvironmentMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *EnvironmentMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *EnvironmentMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *EnvironmentMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetDescription sets the "description" field.
func (m *EnvironmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EnvironmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *EnvironmentMutation) ResetDescription() {
	m.description = nil
}

// SetActive sets the "active" field.
func (m *EnvironmentMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *EnvironmentMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *EnvironmentMutation) ResetActive() {
	m.active = nil
}

// SetProjectID sets the "project_id" field.
func (m *EnvironmentMutation) SetProjectID(u uuid.UUID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *EnvironmentMutation) ProjectID() (r uuid.UUID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldProjectID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *EnvironmentMutation) ResetProjectID() {
	m.project = nil
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (m *EnvironmentMutation) SetKubernetesSecret(s string) {
	m.kubernetes_secret = &s
}

// KubernetesSecret returns the value of the "kubernetes_secret" field in the mutation.
func (m *EnvironmentMutation) KubernetesSecret() (r string, exists bool) {
	v := m.kubernetes_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesSecret returns the old "kubernetes_secret" field's value of the Environment entity.
// If the Environment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnvironmentMutation) OldKubernetesSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesSecret: %w", err)
	}
	return oldValue.KubernetesSecret, nil
}

// ResetKubernetesSecret resets all changes to the "kubernetes_secret" field.
func (m *EnvironmentMutation) ResetKubernetesSecret() {
	m.kubernetes_secret = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *EnvironmentMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[environment.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *EnvironmentMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *EnvironmentMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *EnvironmentMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddServiceIDs adds the "services" edge to the Service entity by ids.
func (m *EnvironmentMutation) AddServiceIDs(ids ...uuid.UUID) {
	if m.services == nil {
		m.services = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.services[ids[i]] = struct{}{}
	}
}

// ClearServices clears the "services" edge to the Service entity.
func (m *EnvironmentMutation) ClearServices() {
	m.clearedservices = true
}

// ServicesCleared reports if the "services" edge to the Service entity was cleared.
func (m *EnvironmentMutation) ServicesCleared() bool {
	return m.clearedservices
}

// RemoveServiceIDs removes the "services" edge to the Service entity by IDs.
func (m *EnvironmentMutation) RemoveServiceIDs(ids ...uuid.UUID) {
	if m.removedservices == nil {
		m.removedservices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.services, ids[i])
		m.removedservices[ids[i]] = struct{}{}
	}
}

// RemovedServices returns the removed IDs of the "services" edge to the Service entity.
func (m *EnvironmentMutation) RemovedServicesIDs() (ids []uuid.UUID) {
	for id := range m.removedservices {
		ids = append(ids, id)
	}
	return
}

// ServicesIDs returns the "services" edge IDs in the mutation.
func (m *EnvironmentMutation) ServicesIDs() (ids []uuid.UUID) {
	for id := range m.services {
		ids = append(ids, id)
	}
	return
}

// ResetServices resets all changes to the "services" edge.
func (m *EnvironmentMutation) ResetServices() {
	m.services = nil
	m.clearedservices = false
	m.removedservices = nil
}

// Where appends a list predicates to the EnvironmentMutation builder.
func (m *EnvironmentMutation) Where(ps ...predicate.Environment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnvironmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnvironmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Environment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnvironmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnvironmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Environment).
func (m *EnvironmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnvironmentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, environment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, environment.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, environment.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, environment.FieldDisplayName)
	}
	if m.description != nil {
		fields = append(fields, environment.FieldDescription)
	}
	if m.active != nil {
		fields = append(fields, environment.FieldActive)
	}
	if m.project != nil {
		fields = append(fields, environment.FieldProjectID)
	}
	if m.kubernetes_secret != nil {
		fields = append(fields, environment.FieldKubernetesSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnvironmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case environment.FieldCreatedAt:
		return m.CreatedAt()
	case environment.FieldUpdatedAt:
		return m.UpdatedAt()
	case environment.FieldName:
		return m.Name()
	case environment.FieldDisplayName:
		return m.DisplayName()
	case environment.FieldDescription:
		return m.Description()
	case environment.FieldActive:
		return m.Active()
	case environment.FieldProjectID:
		return m.ProjectID()
	case environment.FieldKubernetesSecret:
		return m.KubernetesSecret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnvironmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case environment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case environment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case environment.FieldName:
		return m.OldName(ctx)
	case environment.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case environment.FieldDescription:
		return m.OldDescription(ctx)
	case environment.FieldActive:
		return m.OldActive(ctx)
	case environment.FieldProjectID:
		return m.OldProjectID(ctx)
	case environment.FieldKubernetesSecret:
		return m.OldKubernetesSecret(ctx)
	}
	return nil, fmt.Errorf("unknown Environment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case environment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case environment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case environment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case environment.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case environment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case environment.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case environment.FieldProjectID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case environment.FieldKubernetesSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesSecret(v)
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnvironmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnvironmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnvironmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Environment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnvironmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnvironmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnvironmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Environment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnvironmentMutation) ResetField(name string) error {
	switch name {
	case environment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case environment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case environment.FieldName:
		m.ResetName()
		return nil
	case environment.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case environment.FieldDescription:
		m.ResetDescription()
		return nil
	case environment.FieldActive:
		m.ResetActive()
		return nil
	case environment.FieldProjectID:
		m.ResetProjectID()
		return nil
	case environment.FieldKubernetesSecret:
		m.ResetKubernetesSecret()
		return nil
	}
	return fmt.Errorf("unknown Environment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnvironmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, environment.EdgeProject)
	}
	if m.services != nil {
		edges = append(edges, environment.EdgeServices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnvironmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case environment.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case environment.EdgeServices:
		ids := make([]ent.Value, 0, len(m.services))
		for id := range m.services {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnvironmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedservices != nil {
		edges = append(edges, environment.EdgeServices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnvironmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case environment.EdgeServices:
		ids := make([]ent.Value, 0, len(m.removedservices))
		for id := range m.removedservices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnvironmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, environment.EdgeProject)
	}
	if m.clearedservices {
		edges = append(edges, environment.EdgeServices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnvironmentMutation) EdgeCleared(name string) bool {
	switch name {
	case environment.EdgeProject:
		return m.clearedproject
	case environment.EdgeServices:
		return m.clearedservices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnvironmentMutation) ClearEdge(name string) error {
	switch name {
	case environment.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Environment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnvironmentMutation) ResetEdge(name string) error {
	switch name {
	case environment.EdgeProject:
		m.ResetProject()
		return nil
	case environment.EdgeServices:
		m.ResetServices()
		return nil
	}
	return fmt.Errorf("unknown Environment edge %s", name)
}

// GithubAppMutation represents an operation that mutates the GithubApp nodes in the graph.
type GithubAppMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	created_at           *time.Time
	updated_at           *time.Time
	name                 *string
	client_id            *string
	client_secret        *string
	webhook_secret       *string
	private_key          *string
	clearedFields        map[string]struct{}
	installations        map[int64]struct{}
	removedinstallations map[int64]struct{}
	clearedinstallations bool
	users                *uuid.UUID
	clearedusers         bool
	done                 bool
	oldValue             func(context.Context) (*GithubApp, error)
	predicates           []predicate.GithubApp
}

var _ ent.Mutation = (*GithubAppMutation)(nil)

// githubappOption allows management of the mutation configuration using functional options.
type githubappOption func(*GithubAppMutation)

// newGithubAppMutation creates new mutation for the GithubApp entity.
func newGithubAppMutation(c config, op Op, opts ...githubappOption) *GithubAppMutation {
	m := &GithubAppMutation{
		config:        c,
		op:            op,
		typ:           TypeGithubApp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGithubAppID sets the ID field of the mutation.
func withGithubAppID(id int64) githubappOption {
	return func(m *GithubAppMutation) {
		var (
			err   error
			once  sync.Once
			value *GithubApp
		)
		m.oldValue = func(ctx context.Context) (*GithubApp, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GithubApp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGithubApp sets the old GithubApp of the mutation.
func withGithubApp(node *GithubApp) githubappOption {
	return func(m *GithubAppMutation) {
		m.oldValue = func(context.Context) (*GithubApp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GithubAppMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GithubAppMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GithubApp entities.
func (m *GithubAppMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GithubAppMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GithubAppMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GithubApp.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GithubAppMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GithubAppMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GithubAppMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GithubAppMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GithubAppMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GithubAppMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *GithubAppMutation) SetCreatedBy(u uuid.UUID) {
	m.users = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *GithubAppMutation) CreatedBy() (r uuid.UUID, exists bool) {
	v := m.users
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldCreatedBy(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *GithubAppMutation) ResetCreatedBy() {
	m.users = nil
}

// SetName sets the "name" field.
func (m *GithubAppMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GithubAppMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GithubAppMutation) ResetName() {
	m.name = nil
}

// SetClientID sets the "client_id" field.
func (m *GithubAppMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *GithubAppMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *GithubAppMutation) ResetClientID() {
	m.client_id = nil
}

// SetClientSecret sets the "client_secret" field.
func (m *GithubAppMutation) SetClientSecret(s string) {
	m.client_secret = &s
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *GithubAppMutation) ClientSecret() (r string, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldClientSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *GithubAppMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetWebhookSecret sets the "webhook_secret" field.
func (m *GithubAppMutation) SetWebhookSecret(s string) {
	m.webhook_secret = &s
}

// WebhookSecret returns the value of the "webhook_secret" field in the mutation.
func (m *GithubAppMutation) WebhookSecret() (r string, exists bool) {
	v := m.webhook_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhookSecret returns the old "webhook_secret" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldWebhookSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhookSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhookSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhookSecret: %w", err)
	}
	return oldValue.WebhookSecret, nil
}

// ResetWebhookSecret resets all changes to the "webhook_secret" field.
func (m *GithubAppMutation) ResetWebhookSecret() {
	m.webhook_secret = nil
}

// SetPrivateKey sets the "private_key" field.
func (m *GithubAppMutation) SetPrivateKey(s string) {
	m.private_key = &s
}

// PrivateKey returns the value of the "private_key" field in the mutation.
func (m *GithubAppMutation) PrivateKey() (r string, exists bool) {
	v := m.private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateKey returns the old "private_key" field's value of the GithubApp entity.
// If the GithubApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubAppMutation) OldPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateKey: %w", err)
	}
	return oldValue.PrivateKey, nil
}

// ResetPrivateKey resets all changes to the "private_key" field.
func (m *GithubAppMutation) ResetPrivateKey() {
	m.private_key = nil
}

// AddInstallationIDs adds the "installations" edge to the GithubInstallation entity by ids.
func (m *GithubAppMutation) AddInstallationIDs(ids ...int64) {
	if m.installations == nil {
		m.installations = make(map[int64]struct{})
	}
	for i := range ids {
		m.installations[ids[i]] = struct{}{}
	}
}

// ClearInstallations clears the "installations" edge to the GithubInstallation entity.
func (m *GithubAppMutation) ClearInstallations() {
	m.clearedinstallations = true
}

// InstallationsCleared reports if the "installations" edge to the GithubInstallation entity was cleared.
func (m *GithubAppMutation) InstallationsCleared() bool {
	return m.clearedinstallations
}

// RemoveInstallationIDs removes the "installations" edge to the GithubInstallation entity by IDs.
func (m *GithubAppMutation) RemoveInstallationIDs(ids ...int64) {
	if m.removedinstallations == nil {
		m.removedinstallations = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.installations, ids[i])
		m.removedinstallations[ids[i]] = struct{}{}
	}
}

// RemovedInstallations returns the removed IDs of the "installations" edge to the GithubInstallation entity.
func (m *GithubAppMutation) RemovedInstallationsIDs() (ids []int64) {
	for id := range m.removedinstallations {
		ids = append(ids, id)
	}
	return
}

// InstallationsIDs returns the "installations" edge IDs in the mutation.
func (m *GithubAppMutation) InstallationsIDs() (ids []int64) {
	for id := range m.installations {
		ids = append(ids, id)
	}
	return
}

// ResetInstallations resets all changes to the "installations" edge.
func (m *GithubAppMutation) ResetInstallations() {
	m.installations = nil
	m.clearedinstallations = false
	m.removedinstallations = nil
}

// SetUsersID sets the "users" edge to the User entity by id.
func (m *GithubAppMutation) SetUsersID(id uuid.UUID) {
	m.users = &id
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GithubAppMutation) ClearUsers() {
	m.clearedusers = true
	m.clearedFields[githubapp.FieldCreatedBy] = struct{}{}
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GithubAppMutation) UsersCleared() bool {
	return m.clearedusers
}

// UsersID returns the "users" edge ID in the mutation.
func (m *GithubAppMutation) UsersID() (id uuid.UUID, exists bool) {
	if m.users != nil {
		return *m.users, true
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsersID instead. It exists only for internal usage by the builders.
func (m *GithubAppMutation) UsersIDs() (ids []uuid.UUID) {
	if id := m.users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GithubAppMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
}

// Where appends a list predicates to the GithubAppMutation builder.
func (m *GithubAppMutation) Where(ps ...predicate.GithubApp) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GithubAppMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GithubAppMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GithubApp, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GithubAppMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GithubAppMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GithubApp).
func (m *GithubAppMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GithubAppMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, githubapp.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, githubapp.FieldUpdatedAt)
	}
	if m.users != nil {
		fields = append(fields, githubapp.FieldCreatedBy)
	}
	if m.name != nil {
		fields = append(fields, githubapp.FieldName)
	}
	if m.client_id != nil {
		fields = append(fields, githubapp.FieldClientID)
	}
	if m.client_secret != nil {
		fields = append(fields, githubapp.FieldClientSecret)
	}
	if m.webhook_secret != nil {
		fields = append(fields, githubapp.FieldWebhookSecret)
	}
	if m.private_key != nil {
		fields = append(fields, githubapp.FieldPrivateKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GithubAppMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case githubapp.FieldCreatedAt:
		return m.CreatedAt()
	case githubapp.FieldUpdatedAt:
		return m.UpdatedAt()
	case githubapp.FieldCreatedBy:
		return m.CreatedBy()
	case githubapp.FieldName:
		return m.Name()
	case githubapp.FieldClientID:
		return m.ClientID()
	case githubapp.FieldClientSecret:
		return m.ClientSecret()
	case githubapp.FieldWebhookSecret:
		return m.WebhookSecret()
	case githubapp.FieldPrivateKey:
		return m.PrivateKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GithubAppMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case githubapp.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case githubapp.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case githubapp.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case githubapp.FieldName:
		return m.OldName(ctx)
	case githubapp.FieldClientID:
		return m.OldClientID(ctx)
	case githubapp.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case githubapp.FieldWebhookSecret:
		return m.OldWebhookSecret(ctx)
	case githubapp.FieldPrivateKey:
		return m.OldPrivateKey(ctx)
	}
	return nil, fmt.Errorf("unknown GithubApp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubAppMutation) SetField(name string, value ent.Value) error {
	switch name {
	case githubapp.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case githubapp.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case githubapp.FieldCreatedBy:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case githubapp.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case githubapp.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case githubapp.FieldClientSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case githubapp.FieldWebhookSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhookSecret(v)
		return nil
	case githubapp.FieldPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateKey(v)
		return nil
	}
	return fmt.Errorf("unknown GithubApp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GithubAppMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GithubAppMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubAppMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GithubApp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GithubAppMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GithubAppMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GithubAppMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GithubApp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GithubAppMutation) ResetField(name string) error {
	switch name {
	case githubapp.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case githubapp.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case githubapp.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case githubapp.FieldName:
		m.ResetName()
		return nil
	case githubapp.FieldClientID:
		m.ResetClientID()
		return nil
	case githubapp.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case githubapp.FieldWebhookSecret:
		m.ResetWebhookSecret()
		return nil
	case githubapp.FieldPrivateKey:
		m.ResetPrivateKey()
		return nil
	}
	return fmt.Errorf("unknown GithubApp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GithubAppMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.installations != nil {
		edges = append(edges, githubapp.EdgeInstallations)
	}
	if m.users != nil {
		edges = append(edges, githubapp.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GithubAppMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case githubapp.EdgeInstallations:
		ids := make([]ent.Value, 0, len(m.installations))
		for id := range m.installations {
			ids = append(ids, id)
		}
		return ids
	case githubapp.EdgeUsers:
		if id := m.users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GithubAppMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedinstallations != nil {
		edges = append(edges, githubapp.EdgeInstallations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GithubAppMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case githubapp.EdgeInstallations:
		ids := make([]ent.Value, 0, len(m.removedinstallations))
		for id := range m.removedinstallations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GithubAppMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinstallations {
		edges = append(edges, githubapp.EdgeInstallations)
	}
	if m.clearedusers {
		edges = append(edges, githubapp.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GithubAppMutation) EdgeCleared(name string) bool {
	switch name {
	case githubapp.EdgeInstallations:
		return m.clearedinstallations
	case githubapp.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GithubAppMutation) ClearEdge(name string) error {
	switch name {
	case githubapp.EdgeUsers:
		m.ClearUsers()
		return nil
	}
	return fmt.Errorf("unknown GithubApp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GithubAppMutation) ResetEdge(name string) error {
	switch name {
	case githubapp.EdgeInstallations:
		m.ResetInstallations()
		return nil
	case githubapp.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown GithubApp edge %s", name)
}

// GithubInstallationMutation represents an operation that mutates the GithubInstallation nodes in the graph.
type GithubInstallationMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	created_at           *time.Time
	updated_at           *time.Time
	account_id           *int64
	addaccount_id        *int64
	account_login        *string
	account_type         *githubinstallation.AccountType
	account_url          *string
	repository_selection *githubinstallation.RepositorySelection
	suspended            *bool
	active               *bool
	permissions          *schema.GithubInstallationPermissions
	events               *[]string
	appendevents         []string
	clearedFields        map[string]struct{}
	github_app           *int64
	clearedgithub_app    bool
	services             map[uuid.UUID]struct{}
	removedservices      map[uuid.UUID]struct{}
	clearedservices      bool
	done                 bool
	oldValue             func(context.Context) (*GithubInstallation, error)
	predicates           []predicate.GithubInstallation
}

var _ ent.Mutation = (*GithubInstallationMutation)(nil)

// githubinstallationOption allows management of the mutation configuration using functional options.
type githubinstallationOption func(*GithubInstallationMutation)

// newGithubInstallationMutation creates new mutation for the GithubInstallation entity.
func newGithubInstallationMutation(c config, op Op, opts ...githubinstallationOption) *GithubInstallationMutation {
	m := &GithubInstallationMutation{
		config:        c,
		op:            op,
		typ:           TypeGithubInstallation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGithubInstallationID sets the ID field of the mutation.
func withGithubInstallationID(id int64) githubinstallationOption {
	return func(m *GithubInstallationMutation) {
		var (
			err   error
			once  sync.Once
			value *GithubInstallation
		)
		m.oldValue = func(ctx context.Context) (*GithubInstallation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GithubInstallation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGithubInstallation sets the old GithubInstallation of the mutation.
func withGithubInstallation(node *GithubInstallation) githubinstallationOption {
	return func(m *GithubInstallationMutation) {
		m.oldValue = func(context.Context) (*GithubInstallation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GithubInstallationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GithubInstallationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GithubInstallation entities.
func (m *GithubInstallationMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GithubInstallationMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GithubInstallationMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GithubInstallation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GithubInstallationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GithubInstallationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GithubInstallationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GithubInstallationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GithubInstallationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GithubInstallationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGithubAppID sets the "github_app_id" field.
func (m *GithubInstallationMutation) SetGithubAppID(i int64) {
	m.github_app = &i
}

// GithubAppID returns the value of the "github_app_id" field in the mutation.
func (m *GithubInstallationMutation) GithubAppID() (r int64, exists bool) {
	v := m.github_app
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubAppID returns the old "github_app_id" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldGithubAppID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubAppID: %w", err)
	}
	return oldValue.GithubAppID, nil
}

// ResetGithubAppID resets all changes to the "github_app_id" field.
func (m *GithubInstallationMutation) ResetGithubAppID() {
	m.github_app = nil
}

// SetAccountID sets the "account_id" field.
func (m *GithubInstallationMutation) SetAccountID(i int64) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GithubInstallationMutation) AccountID() (r int64, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *GithubInstallationMutation) AddAccountID(i int64) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *GithubInstallationMutation) AddedAccountID() (r int64, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GithubInstallationMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
}

// SetAccountLogin sets the "account_login" field.
func (m *GithubInstallationMutation) SetAccountLogin(s string) {
	m.account_login = &s
}

// AccountLogin returns the value of the "account_login" field in the mutation.
func (m *GithubInstallationMutation) AccountLogin() (r string, exists bool) {
	v := m.account_login
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountLogin returns the old "account_login" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldAccountLogin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountLogin: %w", err)
	}
	return oldValue.AccountLogin, nil
}

// ResetAccountLogin resets all changes to the "account_login" field.
func (m *GithubInstallationMutation) ResetAccountLogin() {
	m.account_login = nil
}

// SetAccountType sets the "account_type" field.
func (m *GithubInstallationMutation) SetAccountType(gt githubinstallation.AccountType) {
	m.account_type = &gt
}

// AccountType returns the value of the "account_type" field in the mutation.
func (m *GithubInstallationMutation) AccountType() (r githubinstallation.AccountType, exists bool) {
	v := m.account_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountType returns the old "account_type" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldAccountType(ctx context.Context) (v githubinstallation.AccountType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountType: %w", err)
	}
	return oldValue.AccountType, nil
}

// ResetAccountType resets all changes to the "account_type" field.
func (m *GithubInstallationMutation) ResetAccountType() {
	m.account_type = nil
}

// SetAccountURL sets the "account_url" field.
func (m *GithubInstallationMutation) SetAccountURL(s string) {
	m.account_url = &s
}

// AccountURL returns the value of the "account_url" field in the mutation.
func (m *GithubInstallationMutation) AccountURL() (r string, exists bool) {
	v := m.account_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountURL returns the old "account_url" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldAccountURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountURL: %w", err)
	}
	return oldValue.AccountURL, nil
}

// ResetAccountURL resets all changes to the "account_url" field.
func (m *GithubInstallationMutation) ResetAccountURL() {
	m.account_url = nil
}

// SetRepositorySelection sets the "repository_selection" field.
func (m *GithubInstallationMutation) SetRepositorySelection(gs githubinstallation.RepositorySelection) {
	m.repository_selection = &gs
}

// RepositorySelection returns the value of the "repository_selection" field in the mutation.
func (m *GithubInstallationMutation) RepositorySelection() (r githubinstallation.RepositorySelection, exists bool) {
	v := m.repository_selection
	if v == nil {
		return
	}
	return *v, true
}

// OldRepositorySelection returns the old "repository_selection" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldRepositorySelection(ctx context.Context) (v githubinstallation.RepositorySelection, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepositorySelection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepositorySelection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepositorySelection: %w", err)
	}
	return oldValue.RepositorySelection, nil
}

// ResetRepositorySelection resets all changes to the "repository_selection" field.
func (m *GithubInstallationMutation) ResetRepositorySelection() {
	m.repository_selection = nil
}

// SetSuspended sets the "suspended" field.
func (m *GithubInstallationMutation) SetSuspended(b bool) {
	m.suspended = &b
}

// Suspended returns the value of the "suspended" field in the mutation.
func (m *GithubInstallationMutation) Suspended() (r bool, exists bool) {
	v := m.suspended
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspended returns the old "suspended" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldSuspended(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspended is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspended requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspended: %w", err)
	}
	return oldValue.Suspended, nil
}

// ResetSuspended resets all changes to the "suspended" field.
func (m *GithubInstallationMutation) ResetSuspended() {
	m.suspended = nil
}

// SetActive sets the "active" field.
func (m *GithubInstallationMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *GithubInstallationMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *GithubInstallationMutation) ResetActive() {
	m.active = nil
}

// SetPermissions sets the "permissions" field.
func (m *GithubInstallationMutation) SetPermissions(sip schema.GithubInstallationPermissions) {
	m.permissions = &sip
}

// Permissions returns the value of the "permissions" field in the mutation.
func (m *GithubInstallationMutation) Permissions() (r schema.GithubInstallationPermissions, exists bool) {
	v := m.permissions
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissions returns the old "permissions" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldPermissions(ctx context.Context) (v schema.GithubInstallationPermissions, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissions: %w", err)
	}
	return oldValue.Permissions, nil
}

// ClearPermissions clears the value of the "permissions" field.
func (m *GithubInstallationMutation) ClearPermissions() {
	m.permissions = nil
	m.clearedFields[githubinstallation.FieldPermissions] = struct{}{}
}

// PermissionsCleared returns if the "permissions" field was cleared in this mutation.
func (m *GithubInstallationMutation) PermissionsCleared() bool {
	_, ok := m.clearedFields[githubinstallation.FieldPermissions]
	return ok
}

// ResetPermissions resets all changes to the "permissions" field.
func (m *GithubInstallationMutation) ResetPermissions() {
	m.permissions = nil
	delete(m.clearedFields, githubinstallation.FieldPermissions)
}

// SetEvents sets the "events" field.
func (m *GithubInstallationMutation) SetEvents(s []string) {
	m.events = &s
	m.appendevents = nil
}

// Events returns the value of the "events" field in the mutation.
func (m *GithubInstallationMutation) Events() (r []string, exists bool) {
	v := m.events
	if v == nil {
		return
	}
	return *v, true
}

// OldEvents returns the old "events" field's value of the GithubInstallation entity.
// If the GithubInstallation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GithubInstallationMutation) OldEvents(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvents is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvents requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvents: %w", err)
	}
	return oldValue.Events, nil
}

// AppendEvents adds s to the "events" field.
func (m *GithubInstallationMutation) AppendEvents(s []string) {
	m.appendevents = append(m.appendevents, s...)
}

// AppendedEvents returns the list of values that were appended to the "events" field in this mutation.
func (m *GithubInstallationMutation) AppendedEvents() ([]string, bool) {
	if len(m.appendevents) == 0 {
		return nil, false
	}
	return m.appendevents, true
}

// ClearEvents clears the value of the "events" field.
func (m *GithubInstallationMutation) ClearEvents() {
	m.events = nil
	m.appendevents = nil
	m.clearedFields[githubinstallation.FieldEvents] = struct{}{}
}

// EventsCleared returns if the "events" field was cleared in this mutation.
func (m *GithubInstallationMutation) EventsCleared() bool {
	_, ok := m.clearedFields[githubinstallation.FieldEvents]
	return ok
}

// ResetEvents resets all changes to the "events" field.
func (m *GithubInstallationMutation) ResetEvents() {
	m.events = nil
	m.appendevents = nil
	delete(m.clearedFields, githubinstallation.FieldEvents)
}

// ClearGithubApp clears the "github_app" edge to the GithubApp entity.
func (m *GithubInstallationMutation) ClearGithubApp() {
	m.clearedgithub_app = true
	m.clearedFields[githubinstallation.FieldGithubAppID] = struct{}{}
}

// GithubAppCleared reports if the "github_app" edge to the GithubApp entity was cleared.
func (m *GithubInstallationMutation) GithubAppCleared() bool {
	return m.clearedgithub_app
}

// GithubAppIDs returns the "github_app" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GithubAppID instead. It exists only for internal usage by the builders.
func (m *GithubInstallationMutation) GithubAppIDs() (ids []int64) {
	if id := m.github_app; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGithubApp resets all changes to the "github_app" edge.
func (m *GithubInstallationMutation) ResetGithubApp() {
	m.github_app = nil
	m.clearedgithub_app = false
}

// AddServiceIDs adds the "services" edge to the Service entity by ids.
func (m *GithubInstallationMutation) AddServiceIDs(ids ...uuid.UUID) {
	if m.services == nil {
		m.services = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.services[ids[i]] = struct{}{}
	}
}

// ClearServices clears the "services" edge to the Service entity.
func (m *GithubInstallationMutation) ClearServices() {
	m.clearedservices = true
}

// ServicesCleared reports if the "services" edge to the Service entity was cleared.
func (m *GithubInstallationMutation) ServicesCleared() bool {
	return m.clearedservices
}

// RemoveServiceIDs removes the "services" edge to the Service entity by IDs.
func (m *GithubInstallationMutation) RemoveServiceIDs(ids ...uuid.UUID) {
	if m.removedservices == nil {
		m.removedservices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.services, ids[i])
		m.removedservices[ids[i]] = struct{}{}
	}
}

// RemovedServices returns the removed IDs of the "services" edge to the Service entity.
func (m *GithubInstallationMutation) RemovedServicesIDs() (ids []uuid.UUID) {
	for id := range m.removedservices {
		ids = append(ids, id)
	}
	return
}

// ServicesIDs returns the "services" edge IDs in the mutation.
func (m *GithubInstallationMutation) ServicesIDs() (ids []uuid.UUID) {
	for id := range m.services {
		ids = append(ids, id)
	}
	return
}

// ResetServices resets all changes to the "services" edge.
func (m *GithubInstallationMutation) ResetServices() {
	m.services = nil
	m.clearedservices = false
	m.removedservices = nil
}

// Where appends a list predicates to the GithubInstallationMutation builder.
func (m *GithubInstallationMutation) Where(ps ...predicate.GithubInstallation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GithubInstallationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GithubInstallationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GithubInstallation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GithubInstallationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GithubInstallationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GithubInstallation).
func (m *GithubInstallationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GithubInstallationMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, githubinstallation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, githubinstallation.FieldUpdatedAt)
	}
	if m.github_app != nil {
		fields = append(fields, githubinstallation.FieldGithubAppID)
	}
	if m.account_id != nil {
		fields = append(fields, githubinstallation.FieldAccountID)
	}
	if m.account_login != nil {
		fields = append(fields, githubinstallation.FieldAccountLogin)
	}
	if m.account_type != nil {
		fields = append(fields, githubinstallation.FieldAccountType)
	}
	if m.account_url != nil {
		fields = append(fields, githubinstallation.FieldAccountURL)
	}
	if m.repository_selection != nil {
		fields = append(fields, githubinstallation.FieldRepositorySelection)
	}
	if m.suspended != nil {
		fields = append(fields, githubinstallation.FieldSuspended)
	}
	if m.active != nil {
		fields = append(fields, githubinstallation.FieldActive)
	}
	if m.permissions != nil {
		fields = append(fields, githubinstallation.FieldPermissions)
	}
	if m.events != nil {
		fields = append(fields, githubinstallation.FieldEvents)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GithubInstallationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case githubinstallation.FieldCreatedAt:
		return m.CreatedAt()
	case githubinstallation.FieldUpdatedAt:
		return m.UpdatedAt()
	case githubinstallation.FieldGithubAppID:
		return m.GithubAppID()
	case githubinstallation.FieldAccountID:
		return m.AccountID()
	case githubinstallation.FieldAccountLogin:
		return m.AccountLogin()
	case githubinstallation.FieldAccountType:
		return m.AccountType()
	case githubinstallation.FieldAccountURL:
		return m.AccountURL()
	case githubinstallation.FieldRepositorySelection:
		return m.RepositorySelection()
	case githubinstallation.FieldSuspended:
		return m.Suspended()
	case githubinstallation.FieldActive:
		return m.Active()
	case githubinstallation.FieldPermissions:
		return m.Permissions()
	case githubinstallation.FieldEvents:
		return m.Events()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GithubInstallationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case githubinstallation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case githubinstallation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case githubinstallation.FieldGithubAppID:
		return m.OldGithubAppID(ctx)
	case githubinstallation.FieldAccountID:
		return m.OldAccountID(ctx)
	case githubinstallation.FieldAccountLogin:
		return m.OldAccountLogin(ctx)
	case githubinstallation.FieldAccountType:
		return m.OldAccountType(ctx)
	case githubinstallation.FieldAccountURL:
		return m.OldAccountURL(ctx)
	case githubinstallation.FieldRepositorySelection:
		return m.OldRepositorySelection(ctx)
	case githubinstallation.FieldSuspended:
		return m.OldSuspended(ctx)
	case githubinstallation.FieldActive:
		return m.OldActive(ctx)
	case githubinstallation.FieldPermissions:
		return m.OldPermissions(ctx)
	case githubinstallation.FieldEvents:
		return m.OldEvents(ctx)
	}
	return nil, fmt.Errorf("unknown GithubInstallation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubInstallationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case githubinstallation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case githubinstallation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case githubinstallation.FieldGithubAppID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubAppID(v)
		return nil
	case githubinstallation.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case githubinstallation.FieldAccountLogin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountLogin(v)
		return nil
	case githubinstallation.FieldAccountType:
		v, ok := value.(githubinstallation.AccountType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountType(v)
		return nil
	case githubinstallation.FieldAccountURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountURL(v)
		return nil
	case githubinstallation.FieldRepositorySelection:
		v, ok := value.(githubinstallation.RepositorySelection)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepositorySelection(v)
		return nil
	case githubinstallation.FieldSuspended:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspended(v)
		return nil
	case githubinstallation.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case githubinstallation.FieldPermissions:
		v, ok := value.(schema.GithubInstallationPermissions)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissions(v)
		return nil
	case githubinstallation.FieldEvents:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvents(v)
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GithubInstallationMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, githubinstallation.FieldAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GithubInstallationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case githubinstallation.FieldAccountID:
		return m.AddedAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GithubInstallationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case githubinstallation.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GithubInstallationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(githubinstallation.FieldPermissions) {
		fields = append(fields, githubinstallation.FieldPermissions)
	}
	if m.FieldCleared(githubinstallation.FieldEvents) {
		fields = append(fields, githubinstallation.FieldEvents)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GithubInstallationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GithubInstallationMutation) ClearField(name string) error {
	switch name {
	case githubinstallation.FieldPermissions:
		m.ClearPermissions()
		return nil
	case githubinstallation.FieldEvents:
		m.ClearEvents()
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GithubInstallationMutation) ResetField(name string) error {
	switch name {
	case githubinstallation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case githubinstallation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case githubinstallation.FieldGithubAppID:
		m.ResetGithubAppID()
		return nil
	case githubinstallation.FieldAccountID:
		m.ResetAccountID()
		return nil
	case githubinstallation.FieldAccountLogin:
		m.ResetAccountLogin()
		return nil
	case githubinstallation.FieldAccountType:
		m.ResetAccountType()
		return nil
	case githubinstallation.FieldAccountURL:
		m.ResetAccountURL()
		return nil
	case githubinstallation.FieldRepositorySelection:
		m.ResetRepositorySelection()
		return nil
	case githubinstallation.FieldSuspended:
		m.ResetSuspended()
		return nil
	case githubinstallation.FieldActive:
		m.ResetActive()
		return nil
	case githubinstallation.FieldPermissions:
		m.ResetPermissions()
		return nil
	case githubinstallation.FieldEvents:
		m.ResetEvents()
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GithubInstallationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.github_app != nil {
		edges = append(edges, githubinstallation.EdgeGithubApp)
	}
	if m.services != nil {
		edges = append(edges, githubinstallation.EdgeServices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GithubInstallationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case githubinstallation.EdgeGithubApp:
		if id := m.github_app; id != nil {
			return []ent.Value{*id}
		}
	case githubinstallation.EdgeServices:
		ids := make([]ent.Value, 0, len(m.services))
		for id := range m.services {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GithubInstallationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedservices != nil {
		edges = append(edges, githubinstallation.EdgeServices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GithubInstallationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case githubinstallation.EdgeServices:
		ids := make([]ent.Value, 0, len(m.removedservices))
		for id := range m.removedservices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GithubInstallationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgithub_app {
		edges = append(edges, githubinstallation.EdgeGithubApp)
	}
	if m.clearedservices {
		edges = append(edges, githubinstallation.EdgeServices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GithubInstallationMutation) EdgeCleared(name string) bool {
	switch name {
	case githubinstallation.EdgeGithubApp:
		return m.clearedgithub_app
	case githubinstallation.EdgeServices:
		return m.clearedservices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GithubInstallationMutation) ClearEdge(name string) error {
	switch name {
	case githubinstallation.EdgeGithubApp:
		m.ClearGithubApp()
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GithubInstallationMutation) ResetEdge(name string) error {
	switch name {
	case githubinstallation.EdgeGithubApp:
		m.ResetGithubApp()
		return nil
	case githubinstallation.EdgeServices:
		m.ResetServices()
		return nil
	}
	return fmt.Errorf("unknown GithubInstallation edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *time.Time
	updated_at         *time.Time
	name               *string
	description        *string
	superuser          *bool
	k8s_role_name      *string
	identity_provider  *string
	external_id        *string
	clearedFields      map[string]struct{}
	users              map[uuid.UUID]struct{}
	removedusers       map[uuid.UUID]struct{}
	clearedusers       bool
	permissions        map[uuid.UUID]struct{}
	removedpermissions map[uuid.UUID]struct{}
	clearedpermissions bool
	team               *uuid.UUID
	clearedteam        bool
	done               bool
	oldValue           func(context.Context) (*Group, error)
	predicates         []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GroupMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[group.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GroupMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[group.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, group.FieldDescription)
}

// SetSuperuser sets the "superuser" field.
func (m *GroupMutation) SetSuperuser(b bool) {
	m.superuser = &b
}

// Superuser returns the value of the "superuser" field in the mutation.
func (m *GroupMutation) Superuser() (r bool, exists bool) {
	v := m.superuser
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperuser returns the old "superuser" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldSuperuser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuperuser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuperuser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperuser: %w", err)
	}
	return oldValue.Superuser, nil
}

// ResetSuperuser resets all changes to the "superuser" field.
func (m *GroupMutation) ResetSuperuser() {
	m.superuser = nil
}

// SetK8sRoleName sets the "k8s_role_name" field.
func (m *GroupMutation) SetK8sRoleName(s string) {
	m.k8s_role_name = &s
}

// K8sRoleName returns the value of the "k8s_role_name" field in the mutation.
func (m *GroupMutation) K8sRoleName() (r string, exists bool) {
	v := m.k8s_role_name
	if v == nil {
		return
	}
	return *v, true
}

// OldK8sRoleName returns the old "k8s_role_name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldK8sRoleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldK8sRoleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldK8sRoleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldK8sRoleName: %w", err)
	}
	return oldValue.K8sRoleName, nil
}

// ClearK8sRoleName clears the value of the "k8s_role_name" field.
func (m *GroupMutation) ClearK8sRoleName() {
	m.k8s_role_name = nil
	m.clearedFields[group.FieldK8sRoleName] = struct{}{}
}

// K8sRoleNameCleared returns if the "k8s_role_name" field was cleared in this mutation.
func (m *GroupMutation) K8sRoleNameCleared() bool {
	_, ok := m.clearedFields[group.FieldK8sRoleName]
	return ok
}

// ResetK8sRoleName resets all changes to the "k8s_role_name" field.
func (m *GroupMutation) ResetK8sRoleName() {
	m.k8s_role_name = nil
	delete(m.clearedFields, group.FieldK8sRoleName)
}

// SetIdentityProvider sets the "identity_provider" field.
func (m *GroupMutation) SetIdentityProvider(s string) {
	m.identity_provider = &s
}

// IdentityProvider returns the value of the "identity_provider" field in the mutation.
func (m *GroupMutation) IdentityProvider() (r string, exists bool) {
	v := m.identity_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityProvider returns the old "identity_provider" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldIdentityProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentityProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentityProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityProvider: %w", err)
	}
	return oldValue.IdentityProvider, nil
}

// ClearIdentityProvider clears the value of the "identity_provider" field.
func (m *GroupMutation) ClearIdentityProvider() {
	m.identity_provider = nil
	m.clearedFields[group.FieldIdentityProvider] = struct{}{}
}

// IdentityProviderCleared returns if the "identity_provider" field was cleared in this mutation.
func (m *GroupMutation) IdentityProviderCleared() bool {
	_, ok := m.clearedFields[group.FieldIdentityProvider]
	return ok
}

// ResetIdentityProvider resets all changes to the "identity_provider" field.
func (m *GroupMutation) ResetIdentityProvider() {
	m.identity_provider = nil
	delete(m.clearedFields, group.FieldIdentityProvider)
}

// SetExternalID sets the "external_id" field.
func (m *GroupMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *GroupMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ClearExternalID clears the value of the "external_id" field.
func (m *GroupMutation) ClearExternalID() {
	m.external_id = nil
	m.clearedFields[group.FieldExternalID] = struct{}{}
}

// ExternalIDCleared returns if the "external_id" field was cleared in this mutation.
func (m *GroupMutation) ExternalIDCleared() bool {
	_, ok := m.clearedFields[group.FieldExternalID]
	return ok
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *GroupMutation) ResetExternalID() {
	m.external_id = nil
	delete(m.clearedFields, group.FieldExternalID)
}

// SetTeamID sets the "team_id" field.
func (m *GroupMutation) SetTeamID(u uuid.UUID) {
	m.team = &u
}

// TeamID returns the value of the "team_id" field in the mutation.
func (m *GroupMutation) TeamID() (r uuid.UUID, exists bool) {
	v := m.team
	if v == nil {
		return
	}
	return *v, true
}

// OldTeamID returns the old "team_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldTeamID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeamID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeamID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeamID: %w", err)
	}
	return oldValue.TeamID, nil
}

// ClearTeamID clears the value of the "team_id" field.
func (m *GroupMutation) ClearTeamID() {
	m.team = nil
	m.clearedFields[group.FieldTeamID] = struct{}{}
}

// TeamIDCleared returns if the "team_id" field was cleared in this mutation.
func (m *GroupMutation) TeamIDCleared() bool {
	_, ok := m.clearedFields[group.FieldTeamID]
	return ok
}

// ResetTeamID resets all changes to the "team_id" field.
func (m *GroupMutation) ResetTeamID() {
	m.team = nil
	delete(m.clearedFields, group.FieldTeamID)
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.users == nil {
		m.users = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removedusers == nil {
		m.removedusers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []uuid.UUID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []uuid.UUID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by ids.
func (m *GroupMutation) AddPermissionIDs(ids ...uuid.UUID) {
	if m.permissions == nil {
		m.permissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (m *GroupMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the Permission entity was cleared.
func (m *GroupMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the Permission entity by IDs.
func (m *GroupMutation) RemovePermissionIDs(ids ...uuid.UUID) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the Permission entity.
func (m *GroupMutation) RemovedPermissionsIDs() (ids []uuid.UUID) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *GroupMutation) PermissionsIDs() (ids []uuid.UUID) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *GroupMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *GroupMutation) ClearTeam() {
	m.clearedteam = true
	m.clearedFields[group.FieldTeamID] = struct{}{}
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *GroupMutation) TeamCleared() bool {
	return m.TeamIDCleared() || m.clearedteam
}

// TeamIDs returns the "team" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) TeamIDs() (ids []uuid.UUID) {
	if id := m.team; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *GroupMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.superuser != nil {
		fields = append(fields, group.FieldSuperuser)
	}
	if m.k8s_role_name != nil {
		fields = append(fields, group.FieldK8sRoleName)
	}
	if m.identity_provider != nil {
		fields = append(fields, group.FieldIdentityProvider)
	}
	if m.external_id != nil {
		fields = append(fields, group.FieldExternalID)
	}
	if m.team != nil {
		fields = append(fields, group.FieldTeamID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldSuperuser:
		return m.Superuser()
	case group.FieldK8sRoleName:
		return m.K8sRoleName()
	case group.FieldIdentityProvider:
		return m.IdentityProvider()
	case group.FieldExternalID:
		return m.ExternalID()
	case group.FieldTeamID:
		return m.TeamID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldSuperuser:
		return m.OldSuperuser(ctx)
	case group.FieldK8sRoleName:
		return m.OldK8sRoleName(ctx)
	case group.FieldIdentityProvider:
		return m.OldIdentityProvider(ctx)
	case group.FieldExternalID:
		return m.OldExternalID(ctx)
	case group.FieldTeamID:
		return m.OldTeamID(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldSuperuser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperuser(v)
		return nil
	case group.FieldK8sRoleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetK8sRoleName(v)
		return nil
	case group.FieldIdentityProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityProvider(v)
		return nil
	case group.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case group.FieldTeamID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamID(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldDescription) {
		fields = append(fields, group.FieldDescription)
	}
	if m.FieldCleared(group.FieldK8sRoleName) {
		fields = append(fields, group.FieldK8sRoleName)
	}
	if m.FieldCleared(group.FieldIdentityProvider) {
		fields = append(fields, group.FieldIdentityProvider)
	}
	if m.FieldCleared(group.FieldExternalID) {
		fields = append(fields, group.FieldExternalID)
	}
	if m.FieldCleared(group.FieldTeamID) {
		fields = append(fields, group.FieldTeamID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldDescription:
		m.ClearDescription()
		return nil
	case group.FieldK8sRoleName:
		m.ClearK8sRoleName()
		return nil
	case group.FieldIdentityProvider:
		m.ClearIdentityProvider()
		return nil
	case group.FieldExternalID:
		m.ClearExternalID()
		return nil
	case group.FieldTeamID:
		m.ClearTeamID()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldSuperuser:
		m.ResetSuperuser()
		return nil
	case group.FieldK8sRoleName:
		m.ResetK8sRoleName()
		return nil
	case group.FieldIdentityProvider:
		m.ResetIdentityProvider()
		return nil
	case group.FieldExternalID:
		m.ResetExternalID()
		return nil
	case group.FieldTeamID:
		m.ResetTeamID()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.permissions != nil {
		edges = append(edges, group.EdgePermissions)
	}
	if m.team != nil {
		edges = append(edges, group.EdgeTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeTeam:
		if id := m.team; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.removedpermissions != nil {
		edges = append(edges, group.EdgePermissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedpermissions {
		edges = append(edges, group.EdgePermissions)
	}
	if m.clearedteam {
		edges = append(edges, group.EdgeTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgePermissions:
		return m.clearedpermissions
	case group.EdgeTeam:
		return m.clearedteam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeTeam:
		m.ClearTeam()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgePermissions:
		m.ResetPermissions()
		return nil
	case group.EdgeTeam:
		m.ResetTeam()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// JWTKeyMutation represents an operation that mutates the JWTKey nodes in the graph.
type JWTKeyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	label         *string
	private_key   *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*JWTKey, error)
	predicates    []predicate.JWTKey
}

var _ ent.Mutation = (*JWTKeyMutation)(nil)

// jwtkeyOption allows management of the mutation configuration using functional options.
type jwtkeyOption func(*JWTKeyMutation)

// newJWTKeyMutation creates new mutation for the JWTKey entity.
func newJWTKeyMutation(c config, op Op, opts ...jwtkeyOption) *JWTKeyMutation {
	m := &JWTKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeJWTKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJWTKeyID sets the ID field of the mutation.
func withJWTKeyID(id int) jwtkeyOption {
	return func(m *JWTKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *JWTKey
		)
		m.oldValue = func(ctx context.Context) (*JWTKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().JWTKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJWTKey sets the old JWTKey of the mutation.
func withJWTKey(node *JWTKey) jwtkeyOption {
	return func(m *JWTKeyMutation) {
		m.oldValue = func(context.Context) (*JWTKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JWTKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JWTKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JWTKeyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JWTKeyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().JWTKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *JWTKeyMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *JWTKeyMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the JWTKey entity.
// If the JWTKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JWTKeyMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *JWTKeyMutation) ResetLabel() {
	m.label = nil
}

// SetPrivateKey sets the "private_key" field.
func (m *JWTKeyMutation) SetPrivateKey(b []byte) {
	m.private_key = &b
}

// PrivateKey returns the value of the "private_key" field in the mutation.
func (m *JWTKeyMutation) PrivateKey() (r []byte, exists bool) {
	v := m.private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateKey returns the old "private_key" field's value of the JWTKey entity.
// If the JWTKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JWTKeyMutation) OldPrivateKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateKey: %w", err)
	}
	return oldValue.PrivateKey, nil
}

// ResetPrivateKey resets all changes to the "private_key" field.
func (m *JWTKeyMutation) ResetPrivateKey() {
	m.private_key = nil
}

// Where appends a list predicates to the JWTKeyMutation builder.
func (m *JWTKeyMutation) Where(ps ...predicate.JWTKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JWTKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JWTKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.JWTKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JWTKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JWTKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (JWTKey).
func (m *JWTKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JWTKeyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.label != nil {
		fields = append(fields, jwtkey.FieldLabel)
	}
	if m.private_key != nil {
		fields = append(fields, jwtkey.FieldPrivateKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JWTKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jwtkey.FieldLabel:
		return m.Label()
	case jwtkey.FieldPrivateKey:
		return m.PrivateKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JWTKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jwtkey.FieldLabel:
		return m.OldLabel(ctx)
	case jwtkey.FieldPrivateKey:
		return m.OldPrivateKey(ctx)
	}
	return nil, fmt.Errorf("unknown JWTKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JWTKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jwtkey.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case jwtkey.FieldPrivateKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateKey(v)
		return nil
	}
	return fmt.Errorf("unknown JWTKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JWTKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JWTKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JWTKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown JWTKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JWTKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JWTKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JWTKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown JWTKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JWTKeyMutation) ResetField(name string) error {
	switch name {
	case jwtkey.FieldLabel:
		m.ResetLabel()
		return nil
	case jwtkey.FieldPrivateKey:
		m.ResetPrivateKey()
		return nil
	}
	return fmt.Errorf("unknown JWTKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JWTKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JWTKeyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JWTKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JWTKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JWTKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JWTKeyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JWTKeyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown JWTKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JWTKeyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown JWTKey edge %s", name)
}

// Oauth2CodeMutation represents an operation that mutates the Oauth2Code nodes in the graph.
type Oauth2CodeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	auth_code     *string
	client_id     *string
	scope         *string
	expires_at    *time.Time
	revoked       *bool
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Oauth2Code, error)
	predicates    []predicate.Oauth2Code
}

var _ ent.Mutation = (*Oauth2CodeMutation)(nil)

// oauth2codeOption allows management of the mutation configuration using functional options.
type oauth2codeOption func(*Oauth2CodeMutation)

// newOauth2CodeMutation creates new mutation for the Oauth2Code entity.
func newOauth2CodeMutation(c config, op Op, opts ...oauth2codeOption) *Oauth2CodeMutation {
	m := &Oauth2CodeMutation{
		config:        c,
		op:            op,
		typ:           TypeOauth2Code,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOauth2CodeID sets the ID field of the mutation.
func withOauth2CodeID(id uuid.UUID) oauth2codeOption {
	return func(m *Oauth2CodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Oauth2Code
		)
		m.oldValue = func(ctx context.Context) (*Oauth2Code, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Oauth2Code.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOauth2Code sets the old Oauth2Code of the mutation.
func withOauth2Code(node *Oauth2Code) oauth2codeOption {
	return func(m *Oauth2CodeMutation) {
		m.oldValue = func(context.Context) (*Oauth2Code, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Oauth2CodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Oauth2CodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Oauth2Code entities.
func (m *Oauth2CodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Oauth2CodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Oauth2CodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Oauth2Code.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *Oauth2CodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Oauth2CodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Oauth2CodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *Oauth2CodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *Oauth2CodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *Oauth2CodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAuthCode sets the "auth_code" field.
func (m *Oauth2CodeMutation) SetAuthCode(s string) {
	m.auth_code = &s
}

// AuthCode returns the value of the "auth_code" field in the mutation.
func (m *Oauth2CodeMutation) AuthCode() (r string, exists bool) {
	v := m.auth_code
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthCode returns the old "auth_code" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldAuthCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthCode: %w", err)
	}
	return oldValue.AuthCode, nil
}

// ResetAuthCode resets all changes to the "auth_code" field.
func (m *Oauth2CodeMutation) ResetAuthCode() {
	m.auth_code = nil
}

// SetClientID sets the "client_id" field.
func (m *Oauth2CodeMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *Oauth2CodeMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *Oauth2CodeMutation) ResetClientID() {
	m.client_id = nil
}

// SetScope sets the "scope" field.
func (m *Oauth2CodeMutation) SetScope(s string) {
	m.scope = &s
}

// Scope returns the value of the "scope" field in the mutation.
func (m *Oauth2CodeMutation) Scope() (r string, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *Oauth2CodeMutation) ResetScope() {
	m.scope = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *Oauth2CodeMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *Oauth2CodeMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *Oauth2CodeMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetRevoked sets the "revoked" field.
func (m *Oauth2CodeMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *Oauth2CodeMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Oauth2Code entity.
// If the Oauth2Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2CodeMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *Oauth2CodeMutation) ResetRevoked() {
	m.revoked = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *Oauth2CodeMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *Oauth2CodeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *Oauth2CodeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *Oauth2CodeMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *Oauth2CodeMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *Oauth2CodeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the Oauth2CodeMutation builder.
func (m *Oauth2CodeMutation) Where(ps ...predicate.Oauth2Code) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Oauth2CodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Oauth2CodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Oauth2Code, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Oauth2CodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Oauth2CodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Oauth2Code).
func (m *Oauth2CodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Oauth2CodeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, oauth2code.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauth2code.FieldUpdatedAt)
	}
	if m.auth_code != nil {
		fields = append(fields, oauth2code.FieldAuthCode)
	}
	if m.client_id != nil {
		fields = append(fields, oauth2code.FieldClientID)
	}
	if m.scope != nil {
		fields = append(fields, oauth2code.FieldScope)
	}
	if m.expires_at != nil {
		fields = append(fields, oauth2code.FieldExpiresAt)
	}
	if m.revoked != nil {
		fields = append(fields, oauth2code.FieldRevoked)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Oauth2CodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauth2code.FieldCreatedAt:
		return m.CreatedAt()
	case oauth2code.FieldUpdatedAt:
		return m.UpdatedAt()
	case oauth2code.FieldAuthCode:
		return m.AuthCode()
	case oauth2code.FieldClientID:
		return m.ClientID()
	case oauth2code.FieldScope:
		return m.Scope()
	case oauth2code.FieldExpiresAt:
		return m.ExpiresAt()
	case oauth2code.FieldRevoked:
		return m.Revoked()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Oauth2CodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauth2code.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauth2code.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case oauth2code.FieldAuthCode:
		return m.OldAuthCode(ctx)
	case oauth2code.FieldClientID:
		return m.OldClientID(ctx)
	case oauth2code.FieldScope:
		return m.OldScope(ctx)
	case oauth2code.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case oauth2code.FieldRevoked:
		return m.OldRevoked(ctx)
	}
	return nil, fmt.Errorf("unknown Oauth2Code field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Oauth2CodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauth2code.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauth2code.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case oauth2code.FieldAuthCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthCode(v)
		return nil
	case oauth2code.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case oauth2code.FieldScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case oauth2code.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case oauth2code.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	}
	return fmt.Errorf("unknown Oauth2Code field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Oauth2CodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Oauth2CodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Oauth2CodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Oauth2Code numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Oauth2CodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Oauth2CodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Oauth2CodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Oauth2Code nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Oauth2CodeMutation) ResetField(name string) error {
	switch name {
	case oauth2code.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauth2code.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case oauth2code.FieldAuthCode:
		m.ResetAuthCode()
		return nil
	case oauth2code.FieldClientID:
		m.ResetClientID()
		return nil
	case oauth2code.FieldScope:
		m.ResetScope()
		return nil
	case oauth2code.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case oauth2code.FieldRevoked:
		m.ResetRevoked()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Code field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Oauth2CodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, oauth2code.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Oauth2CodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case oauth2code.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Oauth2CodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Oauth2CodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Oauth2CodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, oauth2code.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Oauth2CodeMutation) EdgeCleared(name string) bool {
	switch name {
	case oauth2code.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Oauth2CodeMutation) ClearEdge(name string) error {
	switch name {
	case oauth2code.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Code unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Oauth2CodeMutation) ResetEdge(name string) error {
	switch name {
	case oauth2code.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Code edge %s", name)
}

// Oauth2TokenMutation represents an operation that mutates the Oauth2Token nodes in the graph.
type Oauth2TokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	access_token  *string
	refresh_token *string
	client_id     *string
	expires_at    *time.Time
	revoked       *bool
	scope         *string
	device_info   *string
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Oauth2Token, error)
	predicates    []predicate.Oauth2Token
}

var _ ent.Mutation = (*Oauth2TokenMutation)(nil)

// oauth2tokenOption allows management of the mutation configuration using functional options.
type oauth2tokenOption func(*Oauth2TokenMutation)

// newOauth2TokenMutation creates new mutation for the Oauth2Token entity.
func newOauth2TokenMutation(c config, op Op, opts ...oauth2tokenOption) *Oauth2TokenMutation {
	m := &Oauth2TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeOauth2Token,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOauth2TokenID sets the ID field of the mutation.
func withOauth2TokenID(id uuid.UUID) oauth2tokenOption {
	return func(m *Oauth2TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Oauth2Token
		)
		m.oldValue = func(ctx context.Context) (*Oauth2Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Oauth2Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOauth2Token sets the old Oauth2Token of the mutation.
func withOauth2Token(node *Oauth2Token) oauth2tokenOption {
	return func(m *Oauth2TokenMutation) {
		m.oldValue = func(context.Context) (*Oauth2Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Oauth2TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Oauth2TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Oauth2Token entities.
func (m *Oauth2TokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Oauth2TokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Oauth2TokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Oauth2Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *Oauth2TokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Oauth2TokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Oauth2TokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *Oauth2TokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *Oauth2TokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *Oauth2TokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAccessToken sets the "access_token" field.
func (m *Oauth2TokenMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *Oauth2TokenMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *Oauth2TokenMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *Oauth2TokenMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *Oauth2TokenMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *Oauth2TokenMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetClientID sets the "client_id" field.
func (m *Oauth2TokenMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *Oauth2TokenMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *Oauth2TokenMutation) ResetClientID() {
	m.client_id = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *Oauth2TokenMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *Oauth2TokenMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *Oauth2TokenMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetRevoked sets the "revoked" field.
func (m *Oauth2TokenMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *Oauth2TokenMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *Oauth2TokenMutation) ResetRevoked() {
	m.revoked = nil
}

// SetScope sets the "scope" field.
func (m *Oauth2TokenMutation) SetScope(s string) {
	m.scope = &s
}

// Scope returns the value of the "scope" field in the mutation.
func (m *Oauth2TokenMutation) Scope() (r string, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ResetScope resets all changes to the "scope" field.
func (m *Oauth2TokenMutation) ResetScope() {
	m.scope = nil
}

// SetDeviceInfo sets the "device_info" field.
func (m *Oauth2TokenMutation) SetDeviceInfo(s string) {
	m.device_info = &s
}

// DeviceInfo returns the value of the "device_info" field in the mutation.
func (m *Oauth2TokenMutation) DeviceInfo() (r string, exists bool) {
	v := m.device_info
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfo returns the old "device_info" field's value of the Oauth2Token entity.
// If the Oauth2Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Oauth2TokenMutation) OldDeviceInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfo: %w", err)
	}
	return oldValue.DeviceInfo, nil
}

// ClearDeviceInfo clears the value of the "device_info" field.
func (m *Oauth2TokenMutation) ClearDeviceInfo() {
	m.device_info = nil
	m.clearedFields[oauth2token.FieldDeviceInfo] = struct{}{}
}

// DeviceInfoCleared returns if the "device_info" field was cleared in this mutation.
func (m *Oauth2TokenMutation) DeviceInfoCleared() bool {
	_, ok := m.clearedFields[oauth2token.FieldDeviceInfo]
	return ok
}

// ResetDeviceInfo resets all changes to the "device_info" field.
func (m *Oauth2TokenMutation) ResetDeviceInfo() {
	m.device_info = nil
	delete(m.clearedFields, oauth2token.FieldDeviceInfo)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *Oauth2TokenMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *Oauth2TokenMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *Oauth2TokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *Oauth2TokenMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *Oauth2TokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *Oauth2TokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the Oauth2TokenMutation builder.
func (m *Oauth2TokenMutation) Where(ps ...predicate.Oauth2Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Oauth2TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Oauth2TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Oauth2Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Oauth2TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Oauth2TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Oauth2Token).
func (m *Oauth2TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Oauth2TokenMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, oauth2token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauth2token.FieldUpdatedAt)
	}
	if m.access_token != nil {
		fields = append(fields, oauth2token.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, oauth2token.FieldRefreshToken)
	}
	if m.client_id != nil {
		fields = append(fields, oauth2token.FieldClientID)
	}
	if m.expires_at != nil {
		fields = append(fields, oauth2token.FieldExpiresAt)
	}
	if m.revoked != nil {
		fields = append(fields, oauth2token.FieldRevoked)
	}
	if m.scope != nil {
		fields = append(fields, oauth2token.FieldScope)
	}
	if m.device_info != nil {
		fields = append(fields, oauth2token.FieldDeviceInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Oauth2TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauth2token.FieldCreatedAt:
		return m.CreatedAt()
	case oauth2token.FieldUpdatedAt:
		return m.UpdatedAt()
	case oauth2token.FieldAccessToken:
		return m.AccessToken()
	case oauth2token.FieldRefreshToken:
		return m.RefreshToken()
	case oauth2token.FieldClientID:
		return m.ClientID()
	case oauth2token.FieldExpiresAt:
		return m.ExpiresAt()
	case oauth2token.FieldRevoked:
		return m.Revoked()
	case oauth2token.FieldScope:
		return m.Scope()
	case oauth2token.FieldDeviceInfo:
		return m.DeviceInfo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Oauth2TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauth2token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauth2token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case oauth2token.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case oauth2token.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case oauth2token.FieldClientID:
		return m.OldClientID(ctx)
	case oauth2token.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case oauth2token.FieldRevoked:
		return m.OldRevoked(ctx)
	case oauth2token.FieldScope:
		return m.OldScope(ctx)
	case oauth2token.FieldDeviceInfo:
		return m.OldDeviceInfo(ctx)
	}
	return nil, fmt.Errorf("unknown Oauth2Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Oauth2TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauth2token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauth2token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case oauth2token.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case oauth2token.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case oauth2token.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case oauth2token.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case oauth2token.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	case oauth2token.FieldScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case oauth2token.FieldDeviceInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfo(v)
		return nil
	}
	return fmt.Errorf("unknown Oauth2Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Oauth2TokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Oauth2TokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Oauth2TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Oauth2Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Oauth2TokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(oauth2token.FieldDeviceInfo) {
		fields = append(fields, oauth2token.FieldDeviceInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Oauth2TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Oauth2TokenMutation) ClearField(name string) error {
	switch name {
	case oauth2token.FieldDeviceInfo:
		m.ClearDeviceInfo()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Oauth2TokenMutation) ResetField(name string) error {
	switch name {
	case oauth2token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauth2token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case oauth2token.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case oauth2token.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case oauth2token.FieldClientID:
		m.ResetClientID()
		return nil
	case oauth2token.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case oauth2token.FieldRevoked:
		m.ResetRevoked()
		return nil
	case oauth2token.FieldScope:
		m.ResetScope()
		return nil
	case oauth2token.FieldDeviceInfo:
		m.ResetDeviceInfo()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Oauth2TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, oauth2token.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Oauth2TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case oauth2token.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Oauth2TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Oauth2TokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Oauth2TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, oauth2token.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Oauth2TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case oauth2token.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Oauth2TokenMutation) ClearEdge(name string) error {
	switch name {
	case oauth2token.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Oauth2TokenMutation) ResetEdge(name string) error {
	switch name {
	case oauth2token.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Oauth2Token edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	action        *permission.Action
	resource_type *permission.ResourceType
	resource_id   *string
	scope         *string
	labels        *map[string]string
	clearedFields map[string]struct{}
	groups        map[uuid.UUID]struct{}
	removedgroups map[uuid.UUID]struct{}
	clearedgroups bool
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id uuid.UUID) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAction sets the "action" field.
func (m *PermissionMutation) SetAction(pe permission.Action) {
	m.action = &pe
}

// Action returns the value of the "action" field in the mutation.
func (m *PermissionMutation) Action() (r permission.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldAction(ctx context.Context) (v permission.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *PermissionMutation) ResetAction() {
	m.action = nil
}

// SetResourceType sets the "resource_type" field.
func (m *PermissionMutation) SetResourceType(pt permission.ResourceType) {
	m.resource_type = &pt
}

// ResourceType returns the value of the "resource_type" field in the mutation.
func (m *PermissionMutation) ResourceType() (r permission.ResourceType, exists bool) {
	v := m.resource_type
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceType returns the old "resource_type" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldResourceType(ctx context.Context) (v permission.ResourceType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceType: %w", err)
	}
	return oldValue.ResourceType, nil
}

// ResetResourceType resets all changes to the "resource_type" field.
func (m *PermissionMutation) ResetResourceType() {
	m.resource_type = nil
}

// SetResourceID sets the "resource_id" field.
func (m *PermissionMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *PermissionMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *PermissionMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetScope sets the "scope" field.
func (m *PermissionMutation) SetScope(s string) {
	m.scope = &s
}

// Scope returns the value of the "scope" field in the mutation.
func (m *PermissionMutation) Scope() (r string, exists bool) {
	v := m.scope
	if v == nil {
		return
	}
	return *v, true
}

// OldScope returns the old "scope" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScope: %w", err)
	}
	return oldValue.Scope, nil
}

// ClearScope clears the value of the "scope" field.
func (m *PermissionMutation) ClearScope() {
	m.scope = nil
	m.clearedFields[permission.FieldScope] = struct{}{}
}

// ScopeCleared returns if the "scope" field was cleared in this mutation.
func (m *PermissionMutation) ScopeCleared() bool {
	_, ok := m.clearedFields[permission.FieldScope]
	return ok
}

// ResetScope resets all changes to the "scope" field.
func (m *PermissionMutation) ResetScope() {
	m.scope = nil
	delete(m.clearedFields, permission.FieldScope)
}

// SetLabels sets the "labels" field.
func (m *PermissionMutation) SetLabels(value map[string]string) {
	m.labels = &value
}

// Labels returns the value of the "labels" field in the mutation.
func (m *PermissionMutation) Labels() (r map[string]string, exists bool) {
	v := m.labels
	if v == nil {
		return
	}
	return *v, true
}

// OldLabels returns the old "labels" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldLabels(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabels: %w", err)
	}
	return oldValue.Labels, nil
}

// ClearLabels clears the value of the "labels" field.
func (m *PermissionMutation) ClearLabels() {
	m.labels = nil
	m.clearedFields[permission.FieldLabels] = struct{}{}
}

// LabelsCleared returns if the "labels" field was cleared in this mutation.
func (m *PermissionMutation) LabelsCleared() bool {
	_, ok := m.clearedFields[permission.FieldLabels]
	return ok
}

// ResetLabels resets all changes to the "labels" field.
func (m *PermissionMutation) ResetLabels() {
	m.labels = nil
	delete(m.clearedFields, permission.FieldLabels)
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *PermissionMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *PermissionMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *PermissionMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *PermissionMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *PermissionMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *PermissionMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *PermissionMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	if m.action != nil {
		fields = append(fields, permission.FieldAction)
	}
	if m.resource_type != nil {
		fields = append(fields, permission.FieldResourceType)
	}
	if m.resource_id != nil {
		fields = append(fields, permission.FieldResourceID)
	}
	if m.scope != nil {
		fields = append(fields, permission.FieldScope)
	}
	if m.labels != nil {
		fields = append(fields, permission.FieldLabels)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	case permission.FieldAction:
		return m.Action()
	case permission.FieldResourceType:
		return m.ResourceType()
	case permission.FieldResourceID:
		return m.ResourceID()
	case permission.FieldScope:
		return m.Scope()
	case permission.FieldLabels:
		return m.Labels()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case permission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case permission.FieldAction:
		return m.OldAction(ctx)
	case permission.FieldResourceType:
		return m.OldResourceType(ctx)
	case permission.FieldResourceID:
		return m.OldResourceID(ctx)
	case permission.FieldScope:
		return m.OldScope(ctx)
	case permission.FieldLabels:
		return m.OldLabels(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case permission.FieldAction:
		v, ok := value.(permission.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case permission.FieldResourceType:
		v, ok := value.(permission.ResourceType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceType(v)
		return nil
	case permission.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case permission.FieldScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScope(v)
		return nil
	case permission.FieldLabels:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabels(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(permission.FieldScope) {
		fields = append(fields, permission.FieldScope)
	}
	if m.FieldCleared(permission.FieldLabels) {
		fields = append(fields, permission.FieldLabels)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	switch name {
	case permission.FieldScope:
		m.ClearScope()
		return nil
	case permission.FieldLabels:
		m.ClearLabels()
		return nil
	}
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case permission.FieldAction:
		m.ResetAction()
		return nil
	case permission.FieldResourceType:
		m.ResetResourceType()
		return nil
	case permission.FieldResourceID:
		m.ResetResourceID()
		return nil
	case permission.FieldScope:
		m.ResetScope()
		return nil
	case permission.FieldLabels:
		m.ResetLabels()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.groups != nil {
		edges = append(edges, permission.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgroups != nil {
		edges = append(edges, permission.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroups {
		edges = append(edges, permission.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case permission.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	case permission.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	created_at          *time.Time
	updated_at          *time.Time
	name                *string
	display_name        *string
	description         *string
	status              *string
	kubernetes_secret   *string
	clearedFields       map[string]struct{}
	team                *uuid.UUID
	clearedteam         bool
	environments        map[uuid.UUID]struct{}
	removedenvironments map[uuid.UUID]struct{}
	clearedenvironments bool
	done                bool
	oldValue            func(context.Context) (*Project, error)
	predicates          []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id uuid.UUID) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ProjectMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ProjectMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ProjectMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *ProjectMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ProjectMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProjectMutation) ResetStatus() {
	m.status = nil
}

// SetTeamID sets the "team_id" field.
func (m *ProjectMutation) SetTeamID(u uuid.UUID) {
	m.team = &u
}

// TeamID returns the value of the "team_id" field in the mutation.
func (m *ProjectMutation) TeamID() (r uuid.UUID, exists bool) {
	v := m.team
	if v == nil {
		return
	}
	return *v, true
}

// OldTeamID returns the old "team_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldTeamID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeamID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeamID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeamID: %w", err)
	}
	return oldValue.TeamID, nil
}

// ResetTeamID resets all changes to the "team_id" field.
func (m *ProjectMutation) ResetTeamID() {
	m.team = nil
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (m *ProjectMutation) SetKubernetesSecret(s string) {
	m.kubernetes_secret = &s
}

// KubernetesSecret returns the value of the "kubernetes_secret" field in the mutation.
func (m *ProjectMutation) KubernetesSecret() (r string, exists bool) {
	v := m.kubernetes_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesSecret returns the old "kubernetes_secret" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldKubernetesSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesSecret: %w", err)
	}
	return oldValue.KubernetesSecret, nil
}

// ResetKubernetesSecret resets all changes to the "kubernetes_secret" field.
func (m *ProjectMutation) ResetKubernetesSecret() {
	m.kubernetes_secret = nil
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *ProjectMutation) ClearTeam() {
	m.clearedteam = true
	m.clearedFields[project.FieldTeamID] = struct{}{}
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *ProjectMutation) TeamCleared() bool {
	return m.clearedteam
}

// TeamIDs returns the "team" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) TeamIDs() (ids []uuid.UUID) {
	if id := m.team; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *ProjectMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
}

// AddEnvironmentIDs adds the "environments" edge to the Environment entity by ids.
func (m *ProjectMutation) AddEnvironmentIDs(ids ...uuid.UUID) {
	if m.environments == nil {
		m.environments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.environments[ids[i]] = struct{}{}
	}
}

// ClearEnvironments clears the "environments" edge to the Environment entity.
func (m *ProjectMutation) ClearEnvironments() {
	m.clearedenvironments = true
}

// EnvironmentsCleared reports if the "environments" edge to the Environment entity was cleared.
func (m *ProjectMutation) EnvironmentsCleared() bool {
	return m.clearedenvironments
}

// RemoveEnvironmentIDs removes the "environments" edge to the Environment entity by IDs.
func (m *ProjectMutation) RemoveEnvironmentIDs(ids ...uuid.UUID) {
	if m.removedenvironments == nil {
		m.removedenvironments = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.environments, ids[i])
		m.removedenvironments[ids[i]] = struct{}{}
	}
}

// RemovedEnvironments returns the removed IDs of the "environments" edge to the Environment entity.
func (m *ProjectMutation) RemovedEnvironmentsIDs() (ids []uuid.UUID) {
	for id := range m.removedenvironments {
		ids = append(ids, id)
	}
	return
}

// EnvironmentsIDs returns the "environments" edge IDs in the mutation.
func (m *ProjectMutation) EnvironmentsIDs() (ids []uuid.UUID) {
	for id := range m.environments {
		ids = append(ids, id)
	}
	return
}

// ResetEnvironments resets all changes to the "environments" edge.
func (m *ProjectMutation) ResetEnvironments() {
	m.environments = nil
	m.clearedenvironments = false
	m.removedenvironments = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, project.FieldDisplayName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, project.FieldStatus)
	}
	if m.team != nil {
		fields = append(fields, project.FieldTeamID)
	}
	if m.kubernetes_secret != nil {
		fields = append(fields, project.FieldKubernetesSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	case project.FieldName:
		return m.Name()
	case project.FieldDisplayName:
		return m.DisplayName()
	case project.FieldDescription:
		return m.Description()
	case project.FieldStatus:
		return m.Status()
	case project.FieldTeamID:
		return m.TeamID()
	case project.FieldKubernetesSecret:
		return m.KubernetesSecret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldStatus:
		return m.OldStatus(ctx)
	case project.FieldTeamID:
		return m.OldTeamID(ctx)
	case project.FieldKubernetesSecret:
		return m.OldKubernetesSecret(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case project.FieldTeamID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamID(v)
		return nil
	case project.FieldKubernetesSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesSecret(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldStatus:
		m.ResetStatus()
		return nil
	case project.FieldTeamID:
		m.ResetTeamID()
		return nil
	case project.FieldKubernetesSecret:
		m.ResetKubernetesSecret()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.team != nil {
		edges = append(edges, project.EdgeTeam)
	}
	if m.environments != nil {
		edges = append(edges, project.EdgeEnvironments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTeam:
		if id := m.team; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeEnvironments:
		ids := make([]ent.Value, 0, len(m.environments))
		for id := range m.environments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedenvironments != nil {
		edges = append(edges, project.EdgeEnvironments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeEnvironments:
		ids := make([]ent.Value, 0, len(m.removedenvironments))
		for id := range m.removedenvironments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteam {
		edges = append(edges, project.EdgeTeam)
	}
	if m.clearedenvironments {
		edges = append(edges, project.EdgeEnvironments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeTeam:
		return m.clearedteam
	case project.EdgeEnvironments:
		return m.clearedenvironments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeTeam:
		m.ClearTeam()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeTeam:
		m.ResetTeam()
		return nil
	case project.EdgeEnvironments:
		m.ResetEnvironments()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// ServiceMutation represents an operation that mutates the Service nodes in the graph.
type ServiceMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	created_at                 *time.Time
	updated_at                 *time.Time
	name                       *string
	display_name               *string
	description                *string
	_type                      *service.Type
	builder                    *service.Builder
	provider                   *enum.Provider
	framework                  *enum.Framework
	git_repository             *string
	kubernetes_secret          *string
	kubernetes_build_secret    *string
	clearedFields              map[string]struct{}
	environment                *uuid.UUID
	clearedenvironment         bool
	github_installation        *int64
	clearedgithub_installation bool
	service_config             *uuid.UUID
	clearedservice_config      bool
	build_jobs                 map[uuid.UUID]struct{}
	removedbuild_jobs          map[uuid.UUID]struct{}
	clearedbuild_jobs          bool
	done                       bool
	oldValue                   func(context.Context) (*Service, error)
	predicates                 []predicate.Service
}

var _ ent.Mutation = (*ServiceMutation)(nil)

// serviceOption allows management of the mutation configuration using functional options.
type serviceOption func(*ServiceMutation)

// newServiceMutation creates new mutation for the Service entity.
func newServiceMutation(c config, op Op, opts ...serviceOption) *ServiceMutation {
	m := &ServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceID sets the ID field of the mutation.
func withServiceID(id uuid.UUID) serviceOption {
	return func(m *ServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Service
		)
		m.oldValue = func(ctx context.Context) (*Service, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Service.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withService sets the old Service of the mutation.
func withService(node *Service) serviceOption {
	return func(m *ServiceMutation) {
		m.oldValue = func(context.Context) (*Service, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Service entities.
func (m *ServiceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Service.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ServiceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServiceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServiceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ServiceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ServiceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ServiceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ServiceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ServiceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ServiceMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ServiceMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ServiceMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ServiceMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetDescription sets the "description" field.
func (m *ServiceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ServiceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ServiceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[service.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ServiceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[service.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ServiceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, service.FieldDescription)
}

// SetType sets the "type" field.
func (m *ServiceMutation) SetType(s service.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ServiceMutation) GetType() (r service.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldType(ctx context.Context) (v service.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ServiceMutation) ResetType() {
	m._type = nil
}

// SetBuilder sets the "builder" field.
func (m *ServiceMutation) SetBuilder(s service.Builder) {
	m.builder = &s
}

// Builder returns the value of the "builder" field in the mutation.
func (m *ServiceMutation) Builder() (r service.Builder, exists bool) {
	v := m.builder
	if v == nil {
		return
	}
	return *v, true
}

// OldBuilder returns the old "builder" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldBuilder(ctx context.Context) (v service.Builder, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuilder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuilder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuilder: %w", err)
	}
	return oldValue.Builder, nil
}

// ResetBuilder resets all changes to the "builder" field.
func (m *ServiceMutation) ResetBuilder() {
	m.builder = nil
}

// SetProvider sets the "provider" field.
func (m *ServiceMutation) SetProvider(e enum.Provider) {
	m.provider = &e
}

// Provider returns the value of the "provider" field in the mutation.
func (m *ServiceMutation) Provider() (r enum.Provider, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldProvider(ctx context.Context) (v *enum.Provider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ClearProvider clears the value of the "provider" field.
func (m *ServiceMutation) ClearProvider() {
	m.provider = nil
	m.clearedFields[service.FieldProvider] = struct{}{}
}

// ProviderCleared returns if the "provider" field was cleared in this mutation.
func (m *ServiceMutation) ProviderCleared() bool {
	_, ok := m.clearedFields[service.FieldProvider]
	return ok
}

// ResetProvider resets all changes to the "provider" field.
func (m *ServiceMutation) ResetProvider() {
	m.provider = nil
	delete(m.clearedFields, service.FieldProvider)
}

// SetFramework sets the "framework" field.
func (m *ServiceMutation) SetFramework(e enum.Framework) {
	m.framework = &e
}

// Framework returns the value of the "framework" field in the mutation.
func (m *ServiceMutation) Framework() (r enum.Framework, exists bool) {
	v := m.framework
	if v == nil {
		return
	}
	return *v, true
}

// OldFramework returns the old "framework" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldFramework(ctx context.Context) (v *enum.Framework, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFramework is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFramework requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFramework: %w", err)
	}
	return oldValue.Framework, nil
}

// ClearFramework clears the value of the "framework" field.
func (m *ServiceMutation) ClearFramework() {
	m.framework = nil
	m.clearedFields[service.FieldFramework] = struct{}{}
}

// FrameworkCleared returns if the "framework" field was cleared in this mutation.
func (m *ServiceMutation) FrameworkCleared() bool {
	_, ok := m.clearedFields[service.FieldFramework]
	return ok
}

// ResetFramework resets all changes to the "framework" field.
func (m *ServiceMutation) ResetFramework() {
	m.framework = nil
	delete(m.clearedFields, service.FieldFramework)
}

// SetEnvironmentID sets the "environment_id" field.
func (m *ServiceMutation) SetEnvironmentID(u uuid.UUID) {
	m.environment = &u
}

// EnvironmentID returns the value of the "environment_id" field in the mutation.
func (m *ServiceMutation) EnvironmentID() (r uuid.UUID, exists bool) {
	v := m.environment
	if v == nil {
		return
	}
	return *v, true
}

// OldEnvironmentID returns the old "environment_id" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldEnvironmentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnvironmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnvironmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnvironmentID: %w", err)
	}
	return oldValue.EnvironmentID, nil
}

// ResetEnvironmentID resets all changes to the "environment_id" field.
func (m *ServiceMutation) ResetEnvironmentID() {
	m.environment = nil
}

// SetGithubInstallationID sets the "github_installation_id" field.
func (m *ServiceMutation) SetGithubInstallationID(i int64) {
	m.github_installation = &i
}

// GithubInstallationID returns the value of the "github_installation_id" field in the mutation.
func (m *ServiceMutation) GithubInstallationID() (r int64, exists bool) {
	v := m.github_installation
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubInstallationID returns the old "github_installation_id" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldGithubInstallationID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubInstallationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubInstallationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubInstallationID: %w", err)
	}
	return oldValue.GithubInstallationID, nil
}

// ClearGithubInstallationID clears the value of the "github_installation_id" field.
func (m *ServiceMutation) ClearGithubInstallationID() {
	m.github_installation = nil
	m.clearedFields[service.FieldGithubInstallationID] = struct{}{}
}

// GithubInstallationIDCleared returns if the "github_installation_id" field was cleared in this mutation.
func (m *ServiceMutation) GithubInstallationIDCleared() bool {
	_, ok := m.clearedFields[service.FieldGithubInstallationID]
	return ok
}

// ResetGithubInstallationID resets all changes to the "github_installation_id" field.
func (m *ServiceMutation) ResetGithubInstallationID() {
	m.github_installation = nil
	delete(m.clearedFields, service.FieldGithubInstallationID)
}

// SetGitRepository sets the "git_repository" field.
func (m *ServiceMutation) SetGitRepository(s string) {
	m.git_repository = &s
}

// GitRepository returns the value of the "git_repository" field in the mutation.
func (m *ServiceMutation) GitRepository() (r string, exists bool) {
	v := m.git_repository
	if v == nil {
		return
	}
	return *v, true
}

// OldGitRepository returns the old "git_repository" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldGitRepository(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitRepository is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitRepository requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitRepository: %w", err)
	}
	return oldValue.GitRepository, nil
}

// ClearGitRepository clears the value of the "git_repository" field.
func (m *ServiceMutation) ClearGitRepository() {
	m.git_repository = nil
	m.clearedFields[service.FieldGitRepository] = struct{}{}
}

// GitRepositoryCleared returns if the "git_repository" field was cleared in this mutation.
func (m *ServiceMutation) GitRepositoryCleared() bool {
	_, ok := m.clearedFields[service.FieldGitRepository]
	return ok
}

// ResetGitRepository resets all changes to the "git_repository" field.
func (m *ServiceMutation) ResetGitRepository() {
	m.git_repository = nil
	delete(m.clearedFields, service.FieldGitRepository)
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (m *ServiceMutation) SetKubernetesSecret(s string) {
	m.kubernetes_secret = &s
}

// KubernetesSecret returns the value of the "kubernetes_secret" field in the mutation.
func (m *ServiceMutation) KubernetesSecret() (r string, exists bool) {
	v := m.kubernetes_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesSecret returns the old "kubernetes_secret" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldKubernetesSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesSecret: %w", err)
	}
	return oldValue.KubernetesSecret, nil
}

// ResetKubernetesSecret resets all changes to the "kubernetes_secret" field.
func (m *ServiceMutation) ResetKubernetesSecret() {
	m.kubernetes_secret = nil
}

// SetKubernetesBuildSecret sets the "kubernetes_build_secret" field.
func (m *ServiceMutation) SetKubernetesBuildSecret(s string) {
	m.kubernetes_build_secret = &s
}

// KubernetesBuildSecret returns the value of the "kubernetes_build_secret" field in the mutation.
func (m *ServiceMutation) KubernetesBuildSecret() (r string, exists bool) {
	v := m.kubernetes_build_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesBuildSecret returns the old "kubernetes_build_secret" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldKubernetesBuildSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesBuildSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesBuildSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesBuildSecret: %w", err)
	}
	return oldValue.KubernetesBuildSecret, nil
}

// ResetKubernetesBuildSecret resets all changes to the "kubernetes_build_secret" field.
func (m *ServiceMutation) ResetKubernetesBuildSecret() {
	m.kubernetes_build_secret = nil
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (m *ServiceMutation) ClearEnvironment() {
	m.clearedenvironment = true
	m.clearedFields[service.FieldEnvironmentID] = struct{}{}
}

// EnvironmentCleared reports if the "environment" edge to the Environment entity was cleared.
func (m *ServiceMutation) EnvironmentCleared() bool {
	return m.clearedenvironment
}

// EnvironmentIDs returns the "environment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnvironmentID instead. It exists only for internal usage by the builders.
func (m *ServiceMutation) EnvironmentIDs() (ids []uuid.UUID) {
	if id := m.environment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnvironment resets all changes to the "environment" edge.
func (m *ServiceMutation) ResetEnvironment() {
	m.environment = nil
	m.clearedenvironment = false
}

// ClearGithubInstallation clears the "github_installation" edge to the GithubInstallation entity.
func (m *ServiceMutation) ClearGithubInstallation() {
	m.clearedgithub_installation = true
	m.clearedFields[service.FieldGithubInstallationID] = struct{}{}
}

// GithubInstallationCleared reports if the "github_installation" edge to the GithubInstallation entity was cleared.
func (m *ServiceMutation) GithubInstallationCleared() bool {
	return m.GithubInstallationIDCleared() || m.clearedgithub_installation
}

// GithubInstallationIDs returns the "github_installation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GithubInstallationID instead. It exists only for internal usage by the builders.
func (m *ServiceMutation) GithubInstallationIDs() (ids []int64) {
	if id := m.github_installation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGithubInstallation resets all changes to the "github_installation" edge.
func (m *ServiceMutation) ResetGithubInstallation() {
	m.github_installation = nil
	m.clearedgithub_installation = false
}

// SetServiceConfigID sets the "service_config" edge to the ServiceConfig entity by id.
func (m *ServiceMutation) SetServiceConfigID(id uuid.UUID) {
	m.service_config = &id
}

// ClearServiceConfig clears the "service_config" edge to the ServiceConfig entity.
func (m *ServiceMutation) ClearServiceConfig() {
	m.clearedservice_config = true
}

// ServiceConfigCleared reports if the "service_config" edge to the ServiceConfig entity was cleared.
func (m *ServiceMutation) ServiceConfigCleared() bool {
	return m.clearedservice_config
}

// ServiceConfigID returns the "service_config" edge ID in the mutation.
func (m *ServiceMutation) ServiceConfigID() (id uuid.UUID, exists bool) {
	if m.service_config != nil {
		return *m.service_config, true
	}
	return
}

// ServiceConfigIDs returns the "service_config" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ServiceConfigID instead. It exists only for internal usage by the builders.
func (m *ServiceMutation) ServiceConfigIDs() (ids []uuid.UUID) {
	if id := m.service_config; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetServiceConfig resets all changes to the "service_config" edge.
func (m *ServiceMutation) ResetServiceConfig() {
	m.service_config = nil
	m.clearedservice_config = false
}

// AddBuildJobIDs adds the "build_jobs" edge to the BuildJob entity by ids.
func (m *ServiceMutation) AddBuildJobIDs(ids ...uuid.UUID) {
	if m.build_jobs == nil {
		m.build_jobs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.build_jobs[ids[i]] = struct{}{}
	}
}

// ClearBuildJobs clears the "build_jobs" edge to the BuildJob entity.
func (m *ServiceMutation) ClearBuildJobs() {
	m.clearedbuild_jobs = true
}

// BuildJobsCleared reports if the "build_jobs" edge to the BuildJob entity was cleared.
func (m *ServiceMutation) BuildJobsCleared() bool {
	return m.clearedbuild_jobs
}

// RemoveBuildJobIDs removes the "build_jobs" edge to the BuildJob entity by IDs.
func (m *ServiceMutation) RemoveBuildJobIDs(ids ...uuid.UUID) {
	if m.removedbuild_jobs == nil {
		m.removedbuild_jobs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.build_jobs, ids[i])
		m.removedbuild_jobs[ids[i]] = struct{}{}
	}
}

// RemovedBuildJobs returns the removed IDs of the "build_jobs" edge to the BuildJob entity.
func (m *ServiceMutation) RemovedBuildJobsIDs() (ids []uuid.UUID) {
	for id := range m.removedbuild_jobs {
		ids = append(ids, id)
	}
	return
}

// BuildJobsIDs returns the "build_jobs" edge IDs in the mutation.
func (m *ServiceMutation) BuildJobsIDs() (ids []uuid.UUID) {
	for id := range m.build_jobs {
		ids = append(ids, id)
	}
	return
}

// ResetBuildJobs resets all changes to the "build_jobs" edge.
func (m *ServiceMutation) ResetBuildJobs() {
	m.build_jobs = nil
	m.clearedbuild_jobs = false
	m.removedbuild_jobs = nil
}

// Where appends a list predicates to the ServiceMutation builder.
func (m *ServiceMutation) Where(ps ...predicate.Service) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Service, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Service).
func (m *ServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, service.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, service.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, service.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, service.FieldDisplayName)
	}
	if m.description != nil {
		fields = append(fields, service.FieldDescription)
	}
	if m._type != nil {
		fields = append(fields, service.FieldType)
	}
	if m.builder != nil {
		fields = append(fields, service.FieldBuilder)
	}
	if m.provider != nil {
		fields = append(fields, service.FieldProvider)
	}
	if m.framework != nil {
		fields = append(fields, service.FieldFramework)
	}
	if m.environment != nil {
		fields = append(fields, service.FieldEnvironmentID)
	}
	if m.github_installation != nil {
		fields = append(fields, service.FieldGithubInstallationID)
	}
	if m.git_repository != nil {
		fields = append(fields, service.FieldGitRepository)
	}
	if m.kubernetes_secret != nil {
		fields = append(fields, service.FieldKubernetesSecret)
	}
	if m.kubernetes_build_secret != nil {
		fields = append(fields, service.FieldKubernetesBuildSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case service.FieldCreatedAt:
		return m.CreatedAt()
	case service.FieldUpdatedAt:
		return m.UpdatedAt()
	case service.FieldName:
		return m.Name()
	case service.FieldDisplayName:
		return m.DisplayName()
	case service.FieldDescription:
		return m.Description()
	case service.FieldType:
		return m.GetType()
	case service.FieldBuilder:
		return m.Builder()
	case service.FieldProvider:
		return m.Provider()
	case service.FieldFramework:
		return m.Framework()
	case service.FieldEnvironmentID:
		return m.EnvironmentID()
	case service.FieldGithubInstallationID:
		return m.GithubInstallationID()
	case service.FieldGitRepository:
		return m.GitRepository()
	case service.FieldKubernetesSecret:
		return m.KubernetesSecret()
	case service.FieldKubernetesBuildSecret:
		return m.KubernetesBuildSecret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case service.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case service.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case service.FieldName:
		return m.OldName(ctx)
	case service.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case service.FieldDescription:
		return m.OldDescription(ctx)
	case service.FieldType:
		return m.OldType(ctx)
	case service.FieldBuilder:
		return m.OldBuilder(ctx)
	case service.FieldProvider:
		return m.OldProvider(ctx)
	case service.FieldFramework:
		return m.OldFramework(ctx)
	case service.FieldEnvironmentID:
		return m.OldEnvironmentID(ctx)
	case service.FieldGithubInstallationID:
		return m.OldGithubInstallationID(ctx)
	case service.FieldGitRepository:
		return m.OldGitRepository(ctx)
	case service.FieldKubernetesSecret:
		return m.OldKubernetesSecret(ctx)
	case service.FieldKubernetesBuildSecret:
		return m.OldKubernetesBuildSecret(ctx)
	}
	return nil, fmt.Errorf("unknown Service field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case service.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case service.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case service.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case service.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case service.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case service.FieldType:
		v, ok := value.(service.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case service.FieldBuilder:
		v, ok := value.(service.Builder)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuilder(v)
		return nil
	case service.FieldProvider:
		v, ok := value.(enum.Provider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	case service.FieldFramework:
		v, ok := value.(enum.Framework)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFramework(v)
		return nil
	case service.FieldEnvironmentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnvironmentID(v)
		return nil
	case service.FieldGithubInstallationID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubInstallationID(v)
		return nil
	case service.FieldGitRepository:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitRepository(v)
		return nil
	case service.FieldKubernetesSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesSecret(v)
		return nil
	case service.FieldKubernetesBuildSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesBuildSecret(v)
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Service numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(service.FieldDescription) {
		fields = append(fields, service.FieldDescription)
	}
	if m.FieldCleared(service.FieldProvider) {
		fields = append(fields, service.FieldProvider)
	}
	if m.FieldCleared(service.FieldFramework) {
		fields = append(fields, service.FieldFramework)
	}
	if m.FieldCleared(service.FieldGithubInstallationID) {
		fields = append(fields, service.FieldGithubInstallationID)
	}
	if m.FieldCleared(service.FieldGitRepository) {
		fields = append(fields, service.FieldGitRepository)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceMutation) ClearField(name string) error {
	switch name {
	case service.FieldDescription:
		m.ClearDescription()
		return nil
	case service.FieldProvider:
		m.ClearProvider()
		return nil
	case service.FieldFramework:
		m.ClearFramework()
		return nil
	case service.FieldGithubInstallationID:
		m.ClearGithubInstallationID()
		return nil
	case service.FieldGitRepository:
		m.ClearGitRepository()
		return nil
	}
	return fmt.Errorf("unknown Service nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceMutation) ResetField(name string) error {
	switch name {
	case service.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case service.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case service.FieldName:
		m.ResetName()
		return nil
	case service.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case service.FieldDescription:
		m.ResetDescription()
		return nil
	case service.FieldType:
		m.ResetType()
		return nil
	case service.FieldBuilder:
		m.ResetBuilder()
		return nil
	case service.FieldProvider:
		m.ResetProvider()
		return nil
	case service.FieldFramework:
		m.ResetFramework()
		return nil
	case service.FieldEnvironmentID:
		m.ResetEnvironmentID()
		return nil
	case service.FieldGithubInstallationID:
		m.ResetGithubInstallationID()
		return nil
	case service.FieldGitRepository:
		m.ResetGitRepository()
		return nil
	case service.FieldKubernetesSecret:
		m.ResetKubernetesSecret()
		return nil
	case service.FieldKubernetesBuildSecret:
		m.ResetKubernetesBuildSecret()
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.environment != nil {
		edges = append(edges, service.EdgeEnvironment)
	}
	if m.github_installation != nil {
		edges = append(edges, service.EdgeGithubInstallation)
	}
	if m.service_config != nil {
		edges = append(edges, service.EdgeServiceConfig)
	}
	if m.build_jobs != nil {
		edges = append(edges, service.EdgeBuildJobs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case service.EdgeEnvironment:
		if id := m.environment; id != nil {
			return []ent.Value{*id}
		}
	case service.EdgeGithubInstallation:
		if id := m.github_installation; id != nil {
			return []ent.Value{*id}
		}
	case service.EdgeServiceConfig:
		if id := m.service_config; id != nil {
			return []ent.Value{*id}
		}
	case service.EdgeBuildJobs:
		ids := make([]ent.Value, 0, len(m.build_jobs))
		for id := range m.build_jobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedbuild_jobs != nil {
		edges = append(edges, service.EdgeBuildJobs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case service.EdgeBuildJobs:
		ids := make([]ent.Value, 0, len(m.removedbuild_jobs))
		for id := range m.removedbuild_jobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedenvironment {
		edges = append(edges, service.EdgeEnvironment)
	}
	if m.clearedgithub_installation {
		edges = append(edges, service.EdgeGithubInstallation)
	}
	if m.clearedservice_config {
		edges = append(edges, service.EdgeServiceConfig)
	}
	if m.clearedbuild_jobs {
		edges = append(edges, service.EdgeBuildJobs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceMutation) EdgeCleared(name string) bool {
	switch name {
	case service.EdgeEnvironment:
		return m.clearedenvironment
	case service.EdgeGithubInstallation:
		return m.clearedgithub_installation
	case service.EdgeServiceConfig:
		return m.clearedservice_config
	case service.EdgeBuildJobs:
		return m.clearedbuild_jobs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceMutation) ClearEdge(name string) error {
	switch name {
	case service.EdgeEnvironment:
		m.ClearEnvironment()
		return nil
	case service.EdgeGithubInstallation:
		m.ClearGithubInstallation()
		return nil
	case service.EdgeServiceConfig:
		m.ClearServiceConfig()
		return nil
	}
	return fmt.Errorf("unknown Service unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceMutation) ResetEdge(name string) error {
	switch name {
	case service.EdgeEnvironment:
		m.ResetEnvironment()
		return nil
	case service.EdgeGithubInstallation:
		m.ResetGithubInstallation()
		return nil
	case service.EdgeServiceConfig:
		m.ResetServiceConfig()
		return nil
	case service.EdgeBuildJobs:
		m.ResetBuildJobs()
		return nil
	}
	return fmt.Errorf("unknown Service edge %s", name)
}

// ServiceConfigMutation represents an operation that mutates the ServiceConfig nodes in the graph.
type ServiceConfigMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	git_branch     *string
	host           *string
	port           *int
	addport        *int
	replicas       *int32
	addreplicas    *int32
	auto_deploy    *bool
	run_command    *string
	public         *bool
	image          *string
	clearedFields  map[string]struct{}
	service        *uuid.UUID
	clearedservice bool
	done           bool
	oldValue       func(context.Context) (*ServiceConfig, error)
	predicates     []predicate.ServiceConfig
}

var _ ent.Mutation = (*ServiceConfigMutation)(nil)

// serviceconfigOption allows management of the mutation configuration using functional options.
type serviceconfigOption func(*ServiceConfigMutation)

// newServiceConfigMutation creates new mutation for the ServiceConfig entity.
func newServiceConfigMutation(c config, op Op, opts ...serviceconfigOption) *ServiceConfigMutation {
	m := &ServiceConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceConfigID sets the ID field of the mutation.
func withServiceConfigID(id uuid.UUID) serviceconfigOption {
	return func(m *ServiceConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceConfig
		)
		m.oldValue = func(ctx context.Context) (*ServiceConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceConfig sets the old ServiceConfig of the mutation.
func withServiceConfig(node *ServiceConfig) serviceconfigOption {
	return func(m *ServiceConfigMutation) {
		m.oldValue = func(context.Context) (*ServiceConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ServiceConfig entities.
func (m *ServiceConfigMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceConfigMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceConfigMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ServiceConfigMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServiceConfigMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServiceConfigMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ServiceConfigMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ServiceConfigMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ServiceConfigMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetServiceID sets the "service_id" field.
func (m *ServiceConfigMutation) SetServiceID(u uuid.UUID) {
	m.service = &u
}

// ServiceID returns the value of the "service_id" field in the mutation.
func (m *ServiceConfigMutation) ServiceID() (r uuid.UUID, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceID returns the old "service_id" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldServiceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceID: %w", err)
	}
	return oldValue.ServiceID, nil
}

// ResetServiceID resets all changes to the "service_id" field.
func (m *ServiceConfigMutation) ResetServiceID() {
	m.service = nil
}

// SetGitBranch sets the "git_branch" field.
func (m *ServiceConfigMutation) SetGitBranch(s string) {
	m.git_branch = &s
}

// GitBranch returns the value of the "git_branch" field in the mutation.
func (m *ServiceConfigMutation) GitBranch() (r string, exists bool) {
	v := m.git_branch
	if v == nil {
		return
	}
	return *v, true
}

// OldGitBranch returns the old "git_branch" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldGitBranch(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitBranch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitBranch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitBranch: %w", err)
	}
	return oldValue.GitBranch, nil
}

// ClearGitBranch clears the value of the "git_branch" field.
func (m *ServiceConfigMutation) ClearGitBranch() {
	m.git_branch = nil
	m.clearedFields[serviceconfig.FieldGitBranch] = struct{}{}
}

// GitBranchCleared returns if the "git_branch" field was cleared in this mutation.
func (m *ServiceConfigMutation) GitBranchCleared() bool {
	_, ok := m.clearedFields[serviceconfig.FieldGitBranch]
	return ok
}

// ResetGitBranch resets all changes to the "git_branch" field.
func (m *ServiceConfigMutation) ResetGitBranch() {
	m.git_branch = nil
	delete(m.clearedFields, serviceconfig.FieldGitBranch)
}

// SetHost sets the "host" field.
func (m *ServiceConfigMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *ServiceConfigMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldHost(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ClearHost clears the value of the "host" field.
func (m *ServiceConfigMutation) ClearHost() {
	m.host = nil
	m.clearedFields[serviceconfig.FieldHost] = struct{}{}
}

// HostCleared returns if the "host" field was cleared in this mutation.
func (m *ServiceConfigMutation) HostCleared() bool {
	_, ok := m.clearedFields[serviceconfig.FieldHost]
	return ok
}

// ResetHost resets all changes to the "host" field.
func (m *ServiceConfigMutation) ResetHost() {
	m.host = nil
	delete(m.clearedFields, serviceconfig.FieldHost)
}

// SetPort sets the "port" field.
func (m *ServiceConfigMutation) SetPort(i int) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *ServiceConfigMutation) Port() (r int, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldPort(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *ServiceConfigMutation) AddPort(i int) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *ServiceConfigMutation) AddedPort() (r int, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ClearPort clears the value of the "port" field.
func (m *ServiceConfigMutation) ClearPort() {
	m.port = nil
	m.addport = nil
	m.clearedFields[serviceconfig.FieldPort] = struct{}{}
}

// PortCleared returns if the "port" field was cleared in this mutation.
func (m *ServiceConfigMutation) PortCleared() bool {
	_, ok := m.clearedFields[serviceconfig.FieldPort]
	return ok
}

// ResetPort resets all changes to the "port" field.
func (m *ServiceConfigMutation) ResetPort() {
	m.port = nil
	m.addport = nil
	delete(m.clearedFields, serviceconfig.FieldPort)
}

// SetReplicas sets the "replicas" field.
func (m *ServiceConfigMutation) SetReplicas(i int32) {
	m.replicas = &i
	m.addreplicas = nil
}

// Replicas returns the value of the "replicas" field in the mutation.
func (m *ServiceConfigMutation) Replicas() (r int32, exists bool) {
	v := m.replicas
	if v == nil {
		return
	}
	return *v, true
}

// OldReplicas returns the old "replicas" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldReplicas(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplicas is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplicas requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplicas: %w", err)
	}
	return oldValue.Replicas, nil
}

// AddReplicas adds i to the "replicas" field.
func (m *ServiceConfigMutation) AddReplicas(i int32) {
	if m.addreplicas != nil {
		*m.addreplicas += i
	} else {
		m.addreplicas = &i
	}
}

// AddedReplicas returns the value that was added to the "replicas" field in this mutation.
func (m *ServiceConfigMutation) AddedReplicas() (r int32, exists bool) {
	v := m.addreplicas
	if v == nil {
		return
	}
	return *v, true
}

// ResetReplicas resets all changes to the "replicas" field.
func (m *ServiceConfigMutation) ResetReplicas() {
	m.replicas = nil
	m.addreplicas = nil
}

// SetAutoDeploy sets the "auto_deploy" field.
func (m *ServiceConfigMutation) SetAutoDeploy(b bool) {
	m.auto_deploy = &b
}

// AutoDeploy returns the value of the "auto_deploy" field in the mutation.
func (m *ServiceConfigMutation) AutoDeploy() (r bool, exists bool) {
	v := m.auto_deploy
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoDeploy returns the old "auto_deploy" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldAutoDeploy(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoDeploy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoDeploy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoDeploy: %w", err)
	}
	return oldValue.AutoDeploy, nil
}

// ResetAutoDeploy resets all changes to the "auto_deploy" field.
func (m *ServiceConfigMutation) ResetAutoDeploy() {
	m.auto_deploy = nil
}

// SetRunCommand sets the "run_command" field.
func (m *ServiceConfigMutation) SetRunCommand(s string) {
	m.run_command = &s
}

// RunCommand returns the value of the "run_command" field in the mutation.
func (m *ServiceConfigMutation) RunCommand() (r string, exists bool) {
	v := m.run_command
	if v == nil {
		return
	}
	return *v, true
}

// OldRunCommand returns the old "run_command" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldRunCommand(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunCommand: %w", err)
	}
	return oldValue.RunCommand, nil
}

// ClearRunCommand clears the value of the "run_command" field.
func (m *ServiceConfigMutation) ClearRunCommand() {
	m.run_command = nil
	m.clearedFields[serviceconfig.FieldRunCommand] = struct{}{}
}

// RunCommandCleared returns if the "run_command" field was cleared in this mutation.
func (m *ServiceConfigMutation) RunCommandCleared() bool {
	_, ok := m.clearedFields[serviceconfig.FieldRunCommand]
	return ok
}

// ResetRunCommand resets all changes to the "run_command" field.
func (m *ServiceConfigMutation) ResetRunCommand() {
	m.run_command = nil
	delete(m.clearedFields, serviceconfig.FieldRunCommand)
}

// SetPublic sets the "public" field.
func (m *ServiceConfigMutation) SetPublic(b bool) {
	m.public = &b
}

// Public returns the value of the "public" field in the mutation.
func (m *ServiceConfigMutation) Public() (r bool, exists bool) {
	v := m.public
	if v == nil {
		return
	}
	return *v, true
}

// OldPublic returns the old "public" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublic: %w", err)
	}
	return oldValue.Public, nil
}

// ResetPublic resets all changes to the "public" field.
func (m *ServiceConfigMutation) ResetPublic() {
	m.public = nil
}

// SetImage sets the "image" field.
func (m *ServiceConfigMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ServiceConfigMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ServiceConfig entity.
// If the ServiceConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceConfigMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *ServiceConfigMutation) ClearImage() {
	m.image = nil
	m.clearedFields[serviceconfig.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *ServiceConfigMutation) ImageCleared() bool {
	_, ok := m.clearedFields[serviceconfig.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *ServiceConfigMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, serviceconfig.FieldImage)
}

// ClearService clears the "service" edge to the Service entity.
func (m *ServiceConfigMutation) ClearService() {
	m.clearedservice = true
	m.clearedFields[serviceconfig.FieldServiceID] = struct{}{}
}

// ServiceCleared reports if the "service" edge to the Service entity was cleared.
func (m *ServiceConfigMutation) ServiceCleared() bool {
	return m.clearedservice
}

// ServiceIDs returns the "service" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ServiceID instead. It exists only for internal usage by the builders.
func (m *ServiceConfigMutation) ServiceIDs() (ids []uuid.UUID) {
	if id := m.service; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetService resets all changes to the "service" edge.
func (m *ServiceConfigMutation) ResetService() {
	m.service = nil
	m.clearedservice = false
}

// Where appends a list predicates to the ServiceConfigMutation builder.
func (m *ServiceConfigMutation) Where(ps ...predicate.ServiceConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ServiceConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ServiceConfig).
func (m *ServiceConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceConfigMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, serviceconfig.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, serviceconfig.FieldUpdatedAt)
	}
	if m.service != nil {
		fields = append(fields, serviceconfig.FieldServiceID)
	}
	if m.git_branch != nil {
		fields = append(fields, serviceconfig.FieldGitBranch)
	}
	if m.host != nil {
		fields = append(fields, serviceconfig.FieldHost)
	}
	if m.port != nil {
		fields = append(fields, serviceconfig.FieldPort)
	}
	if m.replicas != nil {
		fields = append(fields, serviceconfig.FieldReplicas)
	}
	if m.auto_deploy != nil {
		fields = append(fields, serviceconfig.FieldAutoDeploy)
	}
	if m.run_command != nil {
		fields = append(fields, serviceconfig.FieldRunCommand)
	}
	if m.public != nil {
		fields = append(fields, serviceconfig.FieldPublic)
	}
	if m.image != nil {
		fields = append(fields, serviceconfig.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case serviceconfig.FieldCreatedAt:
		return m.CreatedAt()
	case serviceconfig.FieldUpdatedAt:
		return m.UpdatedAt()
	case serviceconfig.FieldServiceID:
		return m.ServiceID()
	case serviceconfig.FieldGitBranch:
		return m.GitBranch()
	case serviceconfig.FieldHost:
		return m.Host()
	case serviceconfig.FieldPort:
		return m.Port()
	case serviceconfig.FieldReplicas:
		return m.Replicas()
	case serviceconfig.FieldAutoDeploy:
		return m.AutoDeploy()
	case serviceconfig.FieldRunCommand:
		return m.RunCommand()
	case serviceconfig.FieldPublic:
		return m.Public()
	case serviceconfig.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case serviceconfig.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case serviceconfig.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case serviceconfig.FieldServiceID:
		return m.OldServiceID(ctx)
	case serviceconfig.FieldGitBranch:
		return m.OldGitBranch(ctx)
	case serviceconfig.FieldHost:
		return m.OldHost(ctx)
	case serviceconfig.FieldPort:
		return m.OldPort(ctx)
	case serviceconfig.FieldReplicas:
		return m.OldReplicas(ctx)
	case serviceconfig.FieldAutoDeploy:
		return m.OldAutoDeploy(ctx)
	case serviceconfig.FieldRunCommand:
		return m.OldRunCommand(ctx)
	case serviceconfig.FieldPublic:
		return m.OldPublic(ctx)
	case serviceconfig.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case serviceconfig.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case serviceconfig.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case serviceconfig.FieldServiceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceID(v)
		return nil
	case serviceconfig.FieldGitBranch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitBranch(v)
		return nil
	case serviceconfig.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	case serviceconfig.FieldPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case serviceconfig.FieldReplicas:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplicas(v)
		return nil
	case serviceconfig.FieldAutoDeploy:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoDeploy(v)
		return nil
	case serviceconfig.FieldRunCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunCommand(v)
		return nil
	case serviceconfig.FieldPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublic(v)
		return nil
	case serviceconfig.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceConfigMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, serviceconfig.FieldPort)
	}
	if m.addreplicas != nil {
		fields = append(fields, serviceconfig.FieldReplicas)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case serviceconfig.FieldPort:
		return m.AddedPort()
	case serviceconfig.FieldReplicas:
		return m.AddedReplicas()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case serviceconfig.FieldPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	case serviceconfig.FieldReplicas:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReplicas(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(serviceconfig.FieldGitBranch) {
		fields = append(fields, serviceconfig.FieldGitBranch)
	}
	if m.FieldCleared(serviceconfig.FieldHost) {
		fields = append(fields, serviceconfig.FieldHost)
	}
	if m.FieldCleared(serviceconfig.FieldPort) {
		fields = append(fields, serviceconfig.FieldPort)
	}
	if m.FieldCleared(serviceconfig.FieldRunCommand) {
		fields = append(fields, serviceconfig.FieldRunCommand)
	}
	if m.FieldCleared(serviceconfig.FieldImage) {
		fields = append(fields, serviceconfig.FieldImage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceConfigMutation) ClearField(name string) error {
	switch name {
	case serviceconfig.FieldGitBranch:
		m.ClearGitBranch()
		return nil
	case serviceconfig.FieldHost:
		m.ClearHost()
		return nil
	case serviceconfig.FieldPort:
		m.ClearPort()
		return nil
	case serviceconfig.FieldRunCommand:
		m.ClearRunCommand()
		return nil
	case serviceconfig.FieldImage:
		m.ClearImage()
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceConfigMutation) ResetField(name string) error {
	switch name {
	case serviceconfig.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case serviceconfig.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case serviceconfig.FieldServiceID:
		m.ResetServiceID()
		return nil
	case serviceconfig.FieldGitBranch:
		m.ResetGitBranch()
		return nil
	case serviceconfig.FieldHost:
		m.ResetHost()
		return nil
	case serviceconfig.FieldPort:
		m.ResetPort()
		return nil
	case serviceconfig.FieldReplicas:
		m.ResetReplicas()
		return nil
	case serviceconfig.FieldAutoDeploy:
		m.ResetAutoDeploy()
		return nil
	case serviceconfig.FieldRunCommand:
		m.ResetRunCommand()
		return nil
	case serviceconfig.FieldPublic:
		m.ResetPublic()
		return nil
	case serviceconfig.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.service != nil {
		edges = append(edges, serviceconfig.EdgeService)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceConfigMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case serviceconfig.EdgeService:
		if id := m.service; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedservice {
		edges = append(edges, serviceconfig.EdgeService)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceConfigMutation) EdgeCleared(name string) bool {
	switch name {
	case serviceconfig.EdgeService:
		return m.clearedservice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceConfigMutation) ClearEdge(name string) error {
	switch name {
	case serviceconfig.EdgeService:
		m.ClearService()
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceConfigMutation) ResetEdge(name string) error {
	switch name {
	case serviceconfig.EdgeService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown ServiceConfig edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	name              *string
	display_name      *string
	namespace         *string
	kubernetes_secret *string
	description       *string
	clearedFields     map[string]struct{}
	projects          map[uuid.UUID]struct{}
	removedprojects   map[uuid.UUID]struct{}
	clearedprojects   bool
	members           map[uuid.UUID]struct{}
	removedmembers    map[uuid.UUID]struct{}
	clearedmembers    bool
	groups            map[uuid.UUID]struct{}
	removedgroups     map[uuid.UUID]struct{}
	clearedgroups     bool
	done              bool
	oldValue          func(context.Context) (*Team, error)
	predicates        []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id uuid.UUID) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Team entities.
func (m *TeamMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TeamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *TeamMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *TeamMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *TeamMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetNamespace sets the "namespace" field.
func (m *TeamMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *TeamMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *TeamMutation) ResetNamespace() {
	m.namespace = nil
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (m *TeamMutation) SetKubernetesSecret(s string) {
	m.kubernetes_secret = &s
}

// KubernetesSecret returns the value of the "kubernetes_secret" field in the mutation.
func (m *TeamMutation) KubernetesSecret() (r string, exists bool) {
	v := m.kubernetes_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldKubernetesSecret returns the old "kubernetes_secret" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldKubernetesSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubernetesSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubernetesSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubernetesSecret: %w", err)
	}
	return oldValue.KubernetesSecret, nil
}

// ResetKubernetesSecret resets all changes to the "kubernetes_secret" field.
func (m *TeamMutation) ResetKubernetesSecret() {
	m.kubernetes_secret = nil
}

// SetDescription sets the "description" field.
func (m *TeamMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TeamMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TeamMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[team.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TeamMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[team.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TeamMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, team.FieldDescription)
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *TeamMutation) AddProjectIDs(ids ...uuid.UUID) {
	if m.projects == nil {
		m.projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *TeamMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *TeamMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *TeamMutation) RemoveProjectIDs(ids ...uuid.UUID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *TeamMutation) RemovedProjectsIDs() (ids []uuid.UUID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *TeamMutation) ProjectsIDs() (ids []uuid.UUID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *TeamMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *TeamMutation) AddMemberIDs(ids ...uuid.UUID) {
	if m.members == nil {
		m.members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *TeamMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *TeamMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *TeamMutation) RemoveMemberIDs(ids ...uuid.UUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *TeamMutation) RemovedMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *TeamMutation) MembersIDs() (ids []uuid.UUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *TeamMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *TeamMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *TeamMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *TeamMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *TeamMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *TeamMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *TeamMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *TeamMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TeamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TeamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Team, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TeamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, team.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, team.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, team.FieldDisplayName)
	}
	if m.namespace != nil {
		fields = append(fields, team.FieldNamespace)
	}
	if m.kubernetes_secret != nil {
		fields = append(fields, team.FieldKubernetesSecret)
	}
	if m.description != nil {
		fields = append(fields, team.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldCreatedAt:
		return m.CreatedAt()
	case team.FieldUpdatedAt:
		return m.UpdatedAt()
	case team.FieldName:
		return m.Name()
	case team.FieldDisplayName:
		return m.DisplayName()
	case team.FieldNamespace:
		return m.Namespace()
	case team.FieldKubernetesSecret:
		return m.KubernetesSecret()
	case team.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case team.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case team.FieldName:
		return m.OldName(ctx)
	case team.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case team.FieldNamespace:
		return m.OldNamespace(ctx)
	case team.FieldKubernetesSecret:
		return m.OldKubernetesSecret(ctx)
	case team.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case team.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case team.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case team.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case team.FieldKubernetesSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubernetesSecret(v)
		return nil
	case team.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(team.FieldDescription) {
		fields = append(fields, team.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	switch name {
	case team.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case team.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case team.FieldName:
		m.ResetName()
		return nil
	case team.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case team.FieldNamespace:
		m.ResetNamespace()
		return nil
	case team.FieldKubernetesSecret:
		m.ResetKubernetesSecret()
		return nil
	case team.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.projects != nil {
		edges = append(edges, team.EdgeProjects)
	}
	if m.members != nil {
		edges = append(edges, team.EdgeMembers)
	}
	if m.groups != nil {
		edges = append(edges, team.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedprojects != nil {
		edges = append(edges, team.EdgeProjects)
	}
	if m.removedmembers != nil {
		edges = append(edges, team.EdgeMembers)
	}
	if m.removedgroups != nil {
		edges = append(edges, team.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedprojects {
		edges = append(edges, team.EdgeProjects)
	}
	if m.clearedmembers {
		edges = append(edges, team.EdgeMembers)
	}
	if m.clearedgroups {
		edges = append(edges, team.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgeProjects:
		return m.clearedprojects
	case team.EdgeMembers:
		return m.clearedmembers
	case team.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgeProjects:
		m.ResetProjects()
		return nil
	case team.EdgeMembers:
		m.ResetMembers()
		return nil
	case team.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	email                *string
	password_hash        *string
	clearedFields        map[string]struct{}
	oauth2_tokens        map[uuid.UUID]struct{}
	removedoauth2_tokens map[uuid.UUID]struct{}
	clearedoauth2_tokens bool
	oauth2_codes         map[uuid.UUID]struct{}
	removedoauth2_codes  map[uuid.UUID]struct{}
	clearedoauth2_codes  bool
	created_by           map[int64]struct{}
	removedcreated_by    map[int64]struct{}
	clearedcreated_by    bool
	groups               map[uuid.UUID]struct{}
	removedgroups        map[uuid.UUID]struct{}
	clearedgroups        bool
	teams                map[uuid.UUID]struct{}
	removedteams         map[uuid.UUID]struct{}
	clearedteams         bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// AddOauth2TokenIDs adds the "oauth2_tokens" edge to the Oauth2Token entity by ids.
func (m *UserMutation) AddOauth2TokenIDs(ids ...uuid.UUID) {
	if m.oauth2_tokens == nil {
		m.oauth2_tokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.oauth2_tokens[ids[i]] = struct{}{}
	}
}

// ClearOauth2Tokens clears the "oauth2_tokens" edge to the Oauth2Token entity.
func (m *UserMutation) ClearOauth2Tokens() {
	m.clearedoauth2_tokens = true
}

// Oauth2TokensCleared reports if the "oauth2_tokens" edge to the Oauth2Token entity was cleared.
func (m *UserMutation) Oauth2TokensCleared() bool {
	return m.clearedoauth2_tokens
}

// RemoveOauth2TokenIDs removes the "oauth2_tokens" edge to the Oauth2Token entity by IDs.
func (m *UserMutation) RemoveOauth2TokenIDs(ids ...uuid.UUID) {
	if m.removedoauth2_tokens == nil {
		m.removedoauth2_tokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.oauth2_tokens, ids[i])
		m.removedoauth2_tokens[ids[i]] = struct{}{}
	}
}

// RemovedOauth2Tokens returns the removed IDs of the "oauth2_tokens" edge to the Oauth2Token entity.
func (m *UserMutation) RemovedOauth2TokensIDs() (ids []uuid.UUID) {
	for id := range m.removedoauth2_tokens {
		ids = append(ids, id)
	}
	return
}

// Oauth2TokensIDs returns the "oauth2_tokens" edge IDs in the mutation.
func (m *UserMutation) Oauth2TokensIDs() (ids []uuid.UUID) {
	for id := range m.oauth2_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetOauth2Tokens resets all changes to the "oauth2_tokens" edge.
func (m *UserMutation) ResetOauth2Tokens() {
	m.oauth2_tokens = nil
	m.clearedoauth2_tokens = false
	m.removedoauth2_tokens = nil
}

// AddOauth2CodeIDs adds the "oauth2_codes" edge to the Oauth2Code entity by ids.
func (m *UserMutation) AddOauth2CodeIDs(ids ...uuid.UUID) {
	if m.oauth2_codes == nil {
		m.oauth2_codes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.oauth2_codes[ids[i]] = struct{}{}
	}
}

// ClearOauth2Codes clears the "oauth2_codes" edge to the Oauth2Code entity.
func (m *UserMutation) ClearOauth2Codes() {
	m.clearedoauth2_codes = true
}

// Oauth2CodesCleared reports if the "oauth2_codes" edge to the Oauth2Code entity was cleared.
func (m *UserMutation) Oauth2CodesCleared() bool {
	return m.clearedoauth2_codes
}

// RemoveOauth2CodeIDs removes the "oauth2_codes" edge to the Oauth2Code entity by IDs.
func (m *UserMutation) RemoveOauth2CodeIDs(ids ...uuid.UUID) {
	if m.removedoauth2_codes == nil {
		m.removedoauth2_codes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.oauth2_codes, ids[i])
		m.removedoauth2_codes[ids[i]] = struct{}{}
	}
}

// RemovedOauth2Codes returns the removed IDs of the "oauth2_codes" edge to the Oauth2Code entity.
func (m *UserMutation) RemovedOauth2CodesIDs() (ids []uuid.UUID) {
	for id := range m.removedoauth2_codes {
		ids = append(ids, id)
	}
	return
}

// Oauth2CodesIDs returns the "oauth2_codes" edge IDs in the mutation.
func (m *UserMutation) Oauth2CodesIDs() (ids []uuid.UUID) {
	for id := range m.oauth2_codes {
		ids = append(ids, id)
	}
	return
}

// ResetOauth2Codes resets all changes to the "oauth2_codes" edge.
func (m *UserMutation) ResetOauth2Codes() {
	m.oauth2_codes = nil
	m.clearedoauth2_codes = false
	m.removedoauth2_codes = nil
}

// AddCreatedByIDs adds the "created_by" edge to the GithubApp entity by ids.
func (m *UserMutation) AddCreatedByIDs(ids ...int64) {
	if m.created_by == nil {
		m.created_by = make(map[int64]struct{})
	}
	for i := range ids {
		m.created_by[ids[i]] = struct{}{}
	}
}

// ClearCreatedBy clears the "created_by" edge to the GithubApp entity.
func (m *UserMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the GithubApp entity was cleared.
func (m *UserMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// RemoveCreatedByIDs removes the "created_by" edge to the GithubApp entity by IDs.
func (m *UserMutation) RemoveCreatedByIDs(ids ...int64) {
	if m.removedcreated_by == nil {
		m.removedcreated_by = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.created_by, ids[i])
		m.removedcreated_by[ids[i]] = struct{}{}
	}
}

// RemovedCreatedBy returns the removed IDs of the "created_by" edge to the GithubApp entity.
func (m *UserMutation) RemovedCreatedByIDs() (ids []int64) {
	for id := range m.removedcreated_by {
		ids = append(ids, id)
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
func (m *UserMutation) CreatedByIDs() (ids []int64) {
	for id := range m.created_by {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
	m.removedcreated_by = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.groups == nil {
		m.groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []uuid.UUID) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddTeamIDs adds the "teams" edge to the Team entity by ids.
func (m *UserMutation) AddTeamIDs(ids ...uuid.UUID) {
	if m.teams == nil {
		m.teams = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.teams[ids[i]] = struct{}{}
	}
}

// ClearTeams clears the "teams" edge to the Team entity.
func (m *UserMutation) ClearTeams() {
	m.clearedteams = true
}

// TeamsCleared reports if the "teams" edge to the Team entity was cleared.
func (m *UserMutation) TeamsCleared() bool {
	return m.clearedteams
}

// RemoveTeamIDs removes the "teams" edge to the Team entity by IDs.
func (m *UserMutation) RemoveTeamIDs(ids ...uuid.UUID) {
	if m.removedteams == nil {
		m.removedteams = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.teams, ids[i])
		m.removedteams[ids[i]] = struct{}{}
	}
}

// RemovedTeams returns the removed IDs of the "teams" edge to the Team entity.
func (m *UserMutation) RemovedTeamsIDs() (ids []uuid.UUID) {
	for id := range m.removedteams {
		ids = append(ids, id)
	}
	return
}

// TeamsIDs returns the "teams" edge IDs in the mutation.
func (m *UserMutation) TeamsIDs() (ids []uuid.UUID) {
	for id := range m.teams {
		ids = append(ids, id)
	}
	return
}

// ResetTeams resets all changes to the "teams" edge.
func (m *UserMutation) ResetTeams() {
	m.teams = nil
	m.clearedteams = false
	m.removedteams = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.oauth2_tokens != nil {
		edges = append(edges, user.EdgeOauth2Tokens)
	}
	if m.oauth2_codes != nil {
		edges = append(edges, user.EdgeOauth2Codes)
	}
	if m.created_by != nil {
		edges = append(edges, user.EdgeCreatedBy)
	}
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.teams != nil {
		edges = append(edges, user.EdgeTeams)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOauth2Tokens:
		ids := make([]ent.Value, 0, len(m.oauth2_tokens))
		for id := range m.oauth2_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOauth2Codes:
		ids := make([]ent.Value, 0, len(m.oauth2_codes))
		for id := range m.oauth2_codes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedBy:
		ids := make([]ent.Value, 0, len(m.created_by))
		for id := range m.created_by {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeams:
		ids := make([]ent.Value, 0, len(m.teams))
		for id := range m.teams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedoauth2_tokens != nil {
		edges = append(edges, user.EdgeOauth2Tokens)
	}
	if m.removedoauth2_codes != nil {
		edges = append(edges, user.EdgeOauth2Codes)
	}
	if m.removedcreated_by != nil {
		edges = append(edges, user.EdgeCreatedBy)
	}
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedteams != nil {
		edges = append(edges, user.EdgeTeams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOauth2Tokens:
		ids := make([]ent.Value, 0, len(m.removedoauth2_tokens))
		for id := range m.removedoauth2_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOauth2Codes:
		ids := make([]ent.Value, 0, len(m.removedoauth2_codes))
		for id := range m.removedoauth2_codes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedBy:
		ids := make([]ent.Value, 0, len(m.removedcreated_by))
		for id := range m.removedcreated_by {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeams:
		ids := make([]ent.Value, 0, len(m.removedteams))
		for id := range m.removedteams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedoauth2_tokens {
		edges = append(edges, user.EdgeOauth2Tokens)
	}
	if m.clearedoauth2_codes {
		edges = append(edges, user.EdgeOauth2Codes)
	}
	if m.clearedcreated_by {
		edges = append(edges, user.EdgeCreatedBy)
	}
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedteams {
		edges = append(edges, user.EdgeTeams)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOauth2Tokens:
		return m.clearedoauth2_tokens
	case user.EdgeOauth2Codes:
		return m.clearedoauth2_codes
	case user.EdgeCreatedBy:
		return m.clearedcreated_by
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeTeams:
		return m.clearedteams
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOauth2Tokens:
		m.ResetOauth2Tokens()
		return nil
	case user.EdgeOauth2Codes:
		m.ResetOauth2Codes()
		return nil
	case user.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeTeams:
		m.ResetTeams()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
