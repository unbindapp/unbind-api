// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/registry"
)

// RegistryCreate is the builder for creating a Registry entity.
type RegistryCreate struct {
	config
	mutation *RegistryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RegistryCreate) SetCreatedAt(t time.Time) *RegistryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableCreatedAt(t *time.Time) *RegistryCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RegistryCreate) SetUpdatedAt(t time.Time) *RegistryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableUpdatedAt(t *time.Time) *RegistryCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetHost sets the "host" field.
func (rc *RegistryCreate) SetHost(s string) *RegistryCreate {
	rc.mutation.SetHost(s)
	return rc
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (rc *RegistryCreate) SetKubernetesSecret(s string) *RegistryCreate {
	rc.mutation.SetKubernetesSecret(s)
	return rc
}

// SetNillableKubernetesSecret sets the "kubernetes_secret" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableKubernetesSecret(s *string) *RegistryCreate {
	if s != nil {
		rc.SetKubernetesSecret(*s)
	}
	return rc
}

// SetIsDefault sets the "is_default" field.
func (rc *RegistryCreate) SetIsDefault(b bool) *RegistryCreate {
	rc.mutation.SetIsDefault(b)
	return rc
}

// SetID sets the "id" field.
func (rc *RegistryCreate) SetID(u uuid.UUID) *RegistryCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RegistryCreate) SetNillableID(u *uuid.UUID) *RegistryCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// Mutation returns the RegistryMutation object of the builder.
func (rc *RegistryCreate) Mutation() *RegistryMutation {
	return rc.mutation
}

// Save creates the Registry in the database.
func (rc *RegistryCreate) Save(ctx context.Context) (*Registry, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegistryCreate) SaveX(ctx context.Context) *Registry {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegistryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegistryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegistryCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := registry.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := registry.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := registry.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegistryCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Registry.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Registry.updated_at"`)}
	}
	if _, ok := rc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "Registry.host"`)}
	}
	if v, ok := rc.mutation.Host(); ok {
		if err := registry.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Registry.host": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Registry.is_default"`)}
	}
	return nil
}

func (rc *RegistryCreate) sqlSave(ctx context.Context) (*Registry, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegistryCreate) createSpec() (*Registry, *sqlgraph.CreateSpec) {
	var (
		_node = &Registry{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(registry.Table, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(registry.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(registry.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Host(); ok {
		_spec.SetField(registry.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := rc.mutation.KubernetesSecret(); ok {
		_spec.SetField(registry.FieldKubernetesSecret, field.TypeString, value)
		_node.KubernetesSecret = &value
	}
	if value, ok := rc.mutation.IsDefault(); ok {
		_spec.SetField(registry.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registry.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RegistryCreate) OnConflict(opts ...sql.ConflictOption) *RegistryUpsertOne {
	rc.conflict = opts
	return &RegistryUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RegistryCreate) OnConflictColumns(columns ...string) *RegistryUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RegistryUpsertOne{
		create: rc,
	}
}

type (
	// RegistryUpsertOne is the builder for "upsert"-ing
	//  one Registry node.
	RegistryUpsertOne struct {
		create *RegistryCreate
	}

	// RegistryUpsert is the "OnConflict" setter.
	RegistryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistryUpsert) SetUpdatedAt(v time.Time) *RegistryUpsert {
	u.Set(registry.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateUpdatedAt() *RegistryUpsert {
	u.SetExcluded(registry.FieldUpdatedAt)
	return u
}

// SetHost sets the "host" field.
func (u *RegistryUpsert) SetHost(v string) *RegistryUpsert {
	u.Set(registry.FieldHost, v)
	return u
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateHost() *RegistryUpsert {
	u.SetExcluded(registry.FieldHost)
	return u
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *RegistryUpsert) SetKubernetesSecret(v string) *RegistryUpsert {
	u.Set(registry.FieldKubernetesSecret, v)
	return u
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateKubernetesSecret() *RegistryUpsert {
	u.SetExcluded(registry.FieldKubernetesSecret)
	return u
}

// ClearKubernetesSecret clears the value of the "kubernetes_secret" field.
func (u *RegistryUpsert) ClearKubernetesSecret() *RegistryUpsert {
	u.SetNull(registry.FieldKubernetesSecret)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *RegistryUpsert) SetIsDefault(v bool) *RegistryUpsert {
	u.Set(registry.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateIsDefault() *RegistryUpsert {
	u.SetExcluded(registry.FieldIsDefault)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegistryUpsertOne) UpdateNewValues() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(registry.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(registry.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegistryUpsertOne) Ignore() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistryUpsertOne) DoNothing() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistryCreate.OnConflict
// documentation for more info.
func (u *RegistryUpsertOne) Update(set func(*RegistryUpsert)) *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistryUpsertOne) SetUpdatedAt(v time.Time) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateUpdatedAt() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetHost sets the "host" field.
func (u *RegistryUpsertOne) SetHost(v string) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateHost() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateHost()
	})
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *RegistryUpsertOne) SetKubernetesSecret(v string) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetKubernetesSecret(v)
	})
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateKubernetesSecret() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateKubernetesSecret()
	})
}

// ClearKubernetesSecret clears the value of the "kubernetes_secret" field.
func (u *RegistryUpsertOne) ClearKubernetesSecret() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.ClearKubernetesSecret()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *RegistryUpsertOne) SetIsDefault(v bool) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateIsDefault() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *RegistryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegistryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RegistryUpsertOne.ID is not supported by MySQL driver. Use RegistryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegistryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegistryCreateBulk is the builder for creating many Registry entities in bulk.
type RegistryCreateBulk struct {
	config
	err      error
	builders []*RegistryCreate
	conflict []sql.ConflictOption
}

// Save creates the Registry entities in the database.
func (rcb *RegistryCreateBulk) Save(ctx context.Context) ([]*Registry, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Registry, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegistryCreateBulk) SaveX(ctx context.Context) []*Registry {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegistryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegistryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RegistryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegistryUpsertBulk {
	rcb.conflict = opts
	return &RegistryUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RegistryCreateBulk) OnConflictColumns(columns ...string) *RegistryUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RegistryUpsertBulk{
		create: rcb,
	}
}

// RegistryUpsertBulk is the builder for "upsert"-ing
// a bulk of Registry nodes.
type RegistryUpsertBulk struct {
	create *RegistryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegistryUpsertBulk) UpdateNewValues() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(registry.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(registry.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegistryUpsertBulk) Ignore() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistryUpsertBulk) DoNothing() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistryCreateBulk.OnConflict
// documentation for more info.
func (u *RegistryUpsertBulk) Update(set func(*RegistryUpsert)) *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegistryUpsertBulk) SetUpdatedAt(v time.Time) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateUpdatedAt() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetHost sets the "host" field.
func (u *RegistryUpsertBulk) SetHost(v string) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateHost() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateHost()
	})
}

// SetKubernetesSecret sets the "kubernetes_secret" field.
func (u *RegistryUpsertBulk) SetKubernetesSecret(v string) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetKubernetesSecret(v)
	})
}

// UpdateKubernetesSecret sets the "kubernetes_secret" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateKubernetesSecret() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateKubernetesSecret()
	})
}

// ClearKubernetesSecret clears the value of the "kubernetes_secret" field.
func (u *RegistryUpsertBulk) ClearKubernetesSecret() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.ClearKubernetesSecret()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *RegistryUpsertBulk) SetIsDefault(v bool) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateIsDefault() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *RegistryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegistryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
