// Code generated by ent, DO NOT EDIT.

package serviceconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldServiceID, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldHost, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldPort, v))
}

// Replicas applies equality check predicate on the "replicas" field. It's identical to ReplicasEQ.
func Replicas(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldReplicas, v))
}

// AutoDeploy applies equality check predicate on the "auto_deploy" field. It's identical to AutoDeployEQ.
func AutoDeploy(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldAutoDeploy, v))
}

// RunCommand applies equality check predicate on the "run_command" field. It's identical to RunCommandEQ.
func RunCommand(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRunCommand, v))
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldPublic, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldServiceID, vs...))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldHost, v))
}

// HostIsNil applies the IsNil predicate on the "host" field.
func HostIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldHost))
}

// HostNotNil applies the NotNil predicate on the "host" field.
func HostNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldHost))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldHost, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldPort, v))
}

// ReplicasEQ applies the EQ predicate on the "replicas" field.
func ReplicasEQ(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldReplicas, v))
}

// ReplicasNEQ applies the NEQ predicate on the "replicas" field.
func ReplicasNEQ(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldReplicas, v))
}

// ReplicasIn applies the In predicate on the "replicas" field.
func ReplicasIn(vs ...int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldReplicas, vs...))
}

// ReplicasNotIn applies the NotIn predicate on the "replicas" field.
func ReplicasNotIn(vs ...int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldReplicas, vs...))
}

// ReplicasGT applies the GT predicate on the "replicas" field.
func ReplicasGT(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldReplicas, v))
}

// ReplicasGTE applies the GTE predicate on the "replicas" field.
func ReplicasGTE(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldReplicas, v))
}

// ReplicasLT applies the LT predicate on the "replicas" field.
func ReplicasLT(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldReplicas, v))
}

// ReplicasLTE applies the LTE predicate on the "replicas" field.
func ReplicasLTE(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldReplicas, v))
}

// AutoDeployEQ applies the EQ predicate on the "auto_deploy" field.
func AutoDeployEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldAutoDeploy, v))
}

// AutoDeployNEQ applies the NEQ predicate on the "auto_deploy" field.
func AutoDeployNEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldAutoDeploy, v))
}

// RunCommandEQ applies the EQ predicate on the "run_command" field.
func RunCommandEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRunCommand, v))
}

// RunCommandNEQ applies the NEQ predicate on the "run_command" field.
func RunCommandNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRunCommand, v))
}

// RunCommandIn applies the In predicate on the "run_command" field.
func RunCommandIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldRunCommand, vs...))
}

// RunCommandNotIn applies the NotIn predicate on the "run_command" field.
func RunCommandNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRunCommand, vs...))
}

// RunCommandGT applies the GT predicate on the "run_command" field.
func RunCommandGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldRunCommand, v))
}

// RunCommandGTE applies the GTE predicate on the "run_command" field.
func RunCommandGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldRunCommand, v))
}

// RunCommandLT applies the LT predicate on the "run_command" field.
func RunCommandLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldRunCommand, v))
}

// RunCommandLTE applies the LTE predicate on the "run_command" field.
func RunCommandLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldRunCommand, v))
}

// RunCommandContains applies the Contains predicate on the "run_command" field.
func RunCommandContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldRunCommand, v))
}

// RunCommandHasPrefix applies the HasPrefix predicate on the "run_command" field.
func RunCommandHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldRunCommand, v))
}

// RunCommandHasSuffix applies the HasSuffix predicate on the "run_command" field.
func RunCommandHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldRunCommand, v))
}

// RunCommandIsNil applies the IsNil predicate on the "run_command" field.
func RunCommandIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRunCommand))
}

// RunCommandNotNil applies the NotNil predicate on the "run_command" field.
func RunCommandNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRunCommand))
}

// RunCommandEqualFold applies the EqualFold predicate on the "run_command" field.
func RunCommandEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldRunCommand, v))
}

// RunCommandContainsFold applies the ContainsFold predicate on the "run_command" field.
func RunCommandContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldRunCommand, v))
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldPublic, v))
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldPublic, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldImage, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.NotPredicates(p))
}
