// Code generated by ent, DO NOT EDIT.

package serviceconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/internal/sourceanalyzer/enum"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldServiceID, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldIcon, v))
}

// DockerBuilderDockerfilePath applies equality check predicate on the "docker_builder_dockerfile_path" field. It's identical to DockerBuilderDockerfilePathEQ.
func DockerBuilderDockerfilePath(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderBuildContext applies equality check predicate on the "docker_builder_build_context" field. It's identical to DockerBuilderBuildContextEQ.
func DockerBuilderBuildContext(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDockerBuilderBuildContext, v))
}

// GitBranch applies equality check predicate on the "git_branch" field. It's identical to GitBranchEQ.
func GitBranch(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldGitBranch, v))
}

// GitTag applies equality check predicate on the "git_tag" field. It's identical to GitTagEQ.
func GitTag(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldGitTag, v))
}

// Replicas applies equality check predicate on the "replicas" field. It's identical to ReplicasEQ.
func Replicas(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldReplicas, v))
}

// AutoDeploy applies equality check predicate on the "auto_deploy" field. It's identical to AutoDeployEQ.
func AutoDeploy(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldAutoDeploy, v))
}

// RailpackBuilderInstallCommand applies equality check predicate on the "railpack_builder_install_command" field. It's identical to RailpackBuilderInstallCommandEQ.
func RailpackBuilderInstallCommand(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderBuildCommand applies equality check predicate on the "railpack_builder_build_command" field. It's identical to RailpackBuilderBuildCommandEQ.
func RailpackBuilderBuildCommand(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackBuilderBuildCommand, v))
}

// RunCommand applies equality check predicate on the "run_command" field. It's identical to RunCommandEQ.
func RunCommand(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRunCommand, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldIsPublic, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldImage, v))
}

// DefinitionVersion applies equality check predicate on the "definition_version" field. It's identical to DefinitionVersionEQ.
func DefinitionVersion(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDefinitionVersion, v))
}

// S3BackupSourceID applies equality check predicate on the "s3_backup_source_id" field. It's identical to S3BackupSourceIDEQ.
func S3BackupSourceID(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldS3BackupSourceID, v))
}

// S3BackupBucket applies equality check predicate on the "s3_backup_bucket" field. It's identical to S3BackupBucketEQ.
func S3BackupBucket(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldS3BackupBucket, v))
}

// BackupSchedule applies equality check predicate on the "backup_schedule" field. It's identical to BackupScheduleEQ.
func BackupSchedule(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldBackupSchedule, v))
}

// BackupRetentionCount applies equality check predicate on the "backup_retention_count" field. It's identical to BackupRetentionCountEQ.
func BackupRetentionCount(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldBackupRetentionCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldServiceID, vs...))
}

// BuilderEQ applies the EQ predicate on the "builder" field.
func BuilderEQ(v schema.ServiceBuilder) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldEQ(FieldBuilder, vc))
}

// BuilderNEQ applies the NEQ predicate on the "builder" field.
func BuilderNEQ(v schema.ServiceBuilder) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldNEQ(FieldBuilder, vc))
}

// BuilderIn applies the In predicate on the "builder" field.
func BuilderIn(vs ...schema.ServiceBuilder) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldIn(FieldBuilder, v...))
}

// BuilderNotIn applies the NotIn predicate on the "builder" field.
func BuilderNotIn(vs ...schema.ServiceBuilder) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldNotIn(FieldBuilder, v...))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldIcon, v))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldIcon, v))
}

// DockerBuilderDockerfilePathEQ applies the EQ predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathNEQ applies the NEQ predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathIn applies the In predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldDockerBuilderDockerfilePath, vs...))
}

// DockerBuilderDockerfilePathNotIn applies the NotIn predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldDockerBuilderDockerfilePath, vs...))
}

// DockerBuilderDockerfilePathGT applies the GT predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathGTE applies the GTE predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathLT applies the LT predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathLTE applies the LTE predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathContains applies the Contains predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathHasPrefix applies the HasPrefix predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathHasSuffix applies the HasSuffix predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathIsNil applies the IsNil predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldDockerBuilderDockerfilePath))
}

// DockerBuilderDockerfilePathNotNil applies the NotNil predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldDockerBuilderDockerfilePath))
}

// DockerBuilderDockerfilePathEqualFold applies the EqualFold predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderDockerfilePathContainsFold applies the ContainsFold predicate on the "docker_builder_dockerfile_path" field.
func DockerBuilderDockerfilePathContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldDockerBuilderDockerfilePath, v))
}

// DockerBuilderBuildContextEQ applies the EQ predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextNEQ applies the NEQ predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextIn applies the In predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldDockerBuilderBuildContext, vs...))
}

// DockerBuilderBuildContextNotIn applies the NotIn predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldDockerBuilderBuildContext, vs...))
}

// DockerBuilderBuildContextGT applies the GT predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextGTE applies the GTE predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextLT applies the LT predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextLTE applies the LTE predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextContains applies the Contains predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextHasPrefix applies the HasPrefix predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextHasSuffix applies the HasSuffix predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextIsNil applies the IsNil predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldDockerBuilderBuildContext))
}

// DockerBuilderBuildContextNotNil applies the NotNil predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldDockerBuilderBuildContext))
}

// DockerBuilderBuildContextEqualFold applies the EqualFold predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldDockerBuilderBuildContext, v))
}

// DockerBuilderBuildContextContainsFold applies the ContainsFold predicate on the "docker_builder_build_context" field.
func DockerBuilderBuildContextContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldDockerBuilderBuildContext, v))
}

// RailpackProviderEQ applies the EQ predicate on the "railpack_provider" field.
func RailpackProviderEQ(v enum.Provider) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackProvider, vc))
}

// RailpackProviderNEQ applies the NEQ predicate on the "railpack_provider" field.
func RailpackProviderNEQ(v enum.Provider) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRailpackProvider, vc))
}

// RailpackProviderIn applies the In predicate on the "railpack_provider" field.
func RailpackProviderIn(vs ...enum.Provider) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldIn(FieldRailpackProvider, v...))
}

// RailpackProviderNotIn applies the NotIn predicate on the "railpack_provider" field.
func RailpackProviderNotIn(vs ...enum.Provider) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRailpackProvider, v...))
}

// RailpackProviderIsNil applies the IsNil predicate on the "railpack_provider" field.
func RailpackProviderIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRailpackProvider))
}

// RailpackProviderNotNil applies the NotNil predicate on the "railpack_provider" field.
func RailpackProviderNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRailpackProvider))
}

// RailpackFrameworkEQ applies the EQ predicate on the "railpack_framework" field.
func RailpackFrameworkEQ(v enum.Framework) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackFramework, vc))
}

// RailpackFrameworkNEQ applies the NEQ predicate on the "railpack_framework" field.
func RailpackFrameworkNEQ(v enum.Framework) predicate.ServiceConfig {
	vc := v
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRailpackFramework, vc))
}

// RailpackFrameworkIn applies the In predicate on the "railpack_framework" field.
func RailpackFrameworkIn(vs ...enum.Framework) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldIn(FieldRailpackFramework, v...))
}

// RailpackFrameworkNotIn applies the NotIn predicate on the "railpack_framework" field.
func RailpackFrameworkNotIn(vs ...enum.Framework) predicate.ServiceConfig {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRailpackFramework, v...))
}

// RailpackFrameworkIsNil applies the IsNil predicate on the "railpack_framework" field.
func RailpackFrameworkIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRailpackFramework))
}

// RailpackFrameworkNotNil applies the NotNil predicate on the "railpack_framework" field.
func RailpackFrameworkNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRailpackFramework))
}

// GitBranchEQ applies the EQ predicate on the "git_branch" field.
func GitBranchEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldGitBranch, v))
}

// GitBranchNEQ applies the NEQ predicate on the "git_branch" field.
func GitBranchNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldGitBranch, v))
}

// GitBranchIn applies the In predicate on the "git_branch" field.
func GitBranchIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldGitBranch, vs...))
}

// GitBranchNotIn applies the NotIn predicate on the "git_branch" field.
func GitBranchNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldGitBranch, vs...))
}

// GitBranchGT applies the GT predicate on the "git_branch" field.
func GitBranchGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldGitBranch, v))
}

// GitBranchGTE applies the GTE predicate on the "git_branch" field.
func GitBranchGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldGitBranch, v))
}

// GitBranchLT applies the LT predicate on the "git_branch" field.
func GitBranchLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldGitBranch, v))
}

// GitBranchLTE applies the LTE predicate on the "git_branch" field.
func GitBranchLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldGitBranch, v))
}

// GitBranchContains applies the Contains predicate on the "git_branch" field.
func GitBranchContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldGitBranch, v))
}

// GitBranchHasPrefix applies the HasPrefix predicate on the "git_branch" field.
func GitBranchHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldGitBranch, v))
}

// GitBranchHasSuffix applies the HasSuffix predicate on the "git_branch" field.
func GitBranchHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldGitBranch, v))
}

// GitBranchIsNil applies the IsNil predicate on the "git_branch" field.
func GitBranchIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldGitBranch))
}

// GitBranchNotNil applies the NotNil predicate on the "git_branch" field.
func GitBranchNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldGitBranch))
}

// GitBranchEqualFold applies the EqualFold predicate on the "git_branch" field.
func GitBranchEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldGitBranch, v))
}

// GitBranchContainsFold applies the ContainsFold predicate on the "git_branch" field.
func GitBranchContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldGitBranch, v))
}

// GitTagEQ applies the EQ predicate on the "git_tag" field.
func GitTagEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldGitTag, v))
}

// GitTagNEQ applies the NEQ predicate on the "git_tag" field.
func GitTagNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldGitTag, v))
}

// GitTagIn applies the In predicate on the "git_tag" field.
func GitTagIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldGitTag, vs...))
}

// GitTagNotIn applies the NotIn predicate on the "git_tag" field.
func GitTagNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldGitTag, vs...))
}

// GitTagGT applies the GT predicate on the "git_tag" field.
func GitTagGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldGitTag, v))
}

// GitTagGTE applies the GTE predicate on the "git_tag" field.
func GitTagGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldGitTag, v))
}

// GitTagLT applies the LT predicate on the "git_tag" field.
func GitTagLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldGitTag, v))
}

// GitTagLTE applies the LTE predicate on the "git_tag" field.
func GitTagLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldGitTag, v))
}

// GitTagContains applies the Contains predicate on the "git_tag" field.
func GitTagContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldGitTag, v))
}

// GitTagHasPrefix applies the HasPrefix predicate on the "git_tag" field.
func GitTagHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldGitTag, v))
}

// GitTagHasSuffix applies the HasSuffix predicate on the "git_tag" field.
func GitTagHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldGitTag, v))
}

// GitTagIsNil applies the IsNil predicate on the "git_tag" field.
func GitTagIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldGitTag))
}

// GitTagNotNil applies the NotNil predicate on the "git_tag" field.
func GitTagNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldGitTag))
}

// GitTagEqualFold applies the EqualFold predicate on the "git_tag" field.
func GitTagEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldGitTag, v))
}

// GitTagContainsFold applies the ContainsFold predicate on the "git_tag" field.
func GitTagContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldGitTag, v))
}

// HostsIsNil applies the IsNil predicate on the "hosts" field.
func HostsIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldHosts))
}

// HostsNotNil applies the NotNil predicate on the "hosts" field.
func HostsNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldHosts))
}

// PortsIsNil applies the IsNil predicate on the "ports" field.
func PortsIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldPorts))
}

// PortsNotNil applies the NotNil predicate on the "ports" field.
func PortsNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldPorts))
}

// ReplicasEQ applies the EQ predicate on the "replicas" field.
func ReplicasEQ(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldReplicas, v))
}

// ReplicasNEQ applies the NEQ predicate on the "replicas" field.
func ReplicasNEQ(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldReplicas, v))
}

// ReplicasIn applies the In predicate on the "replicas" field.
func ReplicasIn(vs ...int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldReplicas, vs...))
}

// ReplicasNotIn applies the NotIn predicate on the "replicas" field.
func ReplicasNotIn(vs ...int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldReplicas, vs...))
}

// ReplicasGT applies the GT predicate on the "replicas" field.
func ReplicasGT(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldReplicas, v))
}

// ReplicasGTE applies the GTE predicate on the "replicas" field.
func ReplicasGTE(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldReplicas, v))
}

// ReplicasLT applies the LT predicate on the "replicas" field.
func ReplicasLT(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldReplicas, v))
}

// ReplicasLTE applies the LTE predicate on the "replicas" field.
func ReplicasLTE(v int32) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldReplicas, v))
}

// AutoDeployEQ applies the EQ predicate on the "auto_deploy" field.
func AutoDeployEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldAutoDeploy, v))
}

// AutoDeployNEQ applies the NEQ predicate on the "auto_deploy" field.
func AutoDeployNEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldAutoDeploy, v))
}

// RailpackBuilderInstallCommandEQ applies the EQ predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandNEQ applies the NEQ predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandIn applies the In predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldRailpackBuilderInstallCommand, vs...))
}

// RailpackBuilderInstallCommandNotIn applies the NotIn predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRailpackBuilderInstallCommand, vs...))
}

// RailpackBuilderInstallCommandGT applies the GT predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandGTE applies the GTE predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandLT applies the LT predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandLTE applies the LTE predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandContains applies the Contains predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandHasPrefix applies the HasPrefix predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandHasSuffix applies the HasSuffix predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandIsNil applies the IsNil predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRailpackBuilderInstallCommand))
}

// RailpackBuilderInstallCommandNotNil applies the NotNil predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRailpackBuilderInstallCommand))
}

// RailpackBuilderInstallCommandEqualFold applies the EqualFold predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderInstallCommandContainsFold applies the ContainsFold predicate on the "railpack_builder_install_command" field.
func RailpackBuilderInstallCommandContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldRailpackBuilderInstallCommand, v))
}

// RailpackBuilderBuildCommandEQ applies the EQ predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandNEQ applies the NEQ predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandIn applies the In predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldRailpackBuilderBuildCommand, vs...))
}

// RailpackBuilderBuildCommandNotIn applies the NotIn predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRailpackBuilderBuildCommand, vs...))
}

// RailpackBuilderBuildCommandGT applies the GT predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandGTE applies the GTE predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandLT applies the LT predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandLTE applies the LTE predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandContains applies the Contains predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandHasPrefix applies the HasPrefix predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandHasSuffix applies the HasSuffix predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandIsNil applies the IsNil predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRailpackBuilderBuildCommand))
}

// RailpackBuilderBuildCommandNotNil applies the NotNil predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRailpackBuilderBuildCommand))
}

// RailpackBuilderBuildCommandEqualFold applies the EqualFold predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldRailpackBuilderBuildCommand, v))
}

// RailpackBuilderBuildCommandContainsFold applies the ContainsFold predicate on the "railpack_builder_build_command" field.
func RailpackBuilderBuildCommandContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldRailpackBuilderBuildCommand, v))
}

// RunCommandEQ applies the EQ predicate on the "run_command" field.
func RunCommandEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldRunCommand, v))
}

// RunCommandNEQ applies the NEQ predicate on the "run_command" field.
func RunCommandNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldRunCommand, v))
}

// RunCommandIn applies the In predicate on the "run_command" field.
func RunCommandIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldRunCommand, vs...))
}

// RunCommandNotIn applies the NotIn predicate on the "run_command" field.
func RunCommandNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldRunCommand, vs...))
}

// RunCommandGT applies the GT predicate on the "run_command" field.
func RunCommandGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldRunCommand, v))
}

// RunCommandGTE applies the GTE predicate on the "run_command" field.
func RunCommandGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldRunCommand, v))
}

// RunCommandLT applies the LT predicate on the "run_command" field.
func RunCommandLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldRunCommand, v))
}

// RunCommandLTE applies the LTE predicate on the "run_command" field.
func RunCommandLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldRunCommand, v))
}

// RunCommandContains applies the Contains predicate on the "run_command" field.
func RunCommandContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldRunCommand, v))
}

// RunCommandHasPrefix applies the HasPrefix predicate on the "run_command" field.
func RunCommandHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldRunCommand, v))
}

// RunCommandHasSuffix applies the HasSuffix predicate on the "run_command" field.
func RunCommandHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldRunCommand, v))
}

// RunCommandIsNil applies the IsNil predicate on the "run_command" field.
func RunCommandIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldRunCommand))
}

// RunCommandNotNil applies the NotNil predicate on the "run_command" field.
func RunCommandNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldRunCommand))
}

// RunCommandEqualFold applies the EqualFold predicate on the "run_command" field.
func RunCommandEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldRunCommand, v))
}

// RunCommandContainsFold applies the ContainsFold predicate on the "run_command" field.
func RunCommandContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldRunCommand, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldIsPublic, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldImage, v))
}

// DefinitionVersionEQ applies the EQ predicate on the "definition_version" field.
func DefinitionVersionEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldDefinitionVersion, v))
}

// DefinitionVersionNEQ applies the NEQ predicate on the "definition_version" field.
func DefinitionVersionNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldDefinitionVersion, v))
}

// DefinitionVersionIn applies the In predicate on the "definition_version" field.
func DefinitionVersionIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldDefinitionVersion, vs...))
}

// DefinitionVersionNotIn applies the NotIn predicate on the "definition_version" field.
func DefinitionVersionNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldDefinitionVersion, vs...))
}

// DefinitionVersionGT applies the GT predicate on the "definition_version" field.
func DefinitionVersionGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldDefinitionVersion, v))
}

// DefinitionVersionGTE applies the GTE predicate on the "definition_version" field.
func DefinitionVersionGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldDefinitionVersion, v))
}

// DefinitionVersionLT applies the LT predicate on the "definition_version" field.
func DefinitionVersionLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldDefinitionVersion, v))
}

// DefinitionVersionLTE applies the LTE predicate on the "definition_version" field.
func DefinitionVersionLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldDefinitionVersion, v))
}

// DefinitionVersionContains applies the Contains predicate on the "definition_version" field.
func DefinitionVersionContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldDefinitionVersion, v))
}

// DefinitionVersionHasPrefix applies the HasPrefix predicate on the "definition_version" field.
func DefinitionVersionHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldDefinitionVersion, v))
}

// DefinitionVersionHasSuffix applies the HasSuffix predicate on the "definition_version" field.
func DefinitionVersionHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldDefinitionVersion, v))
}

// DefinitionVersionIsNil applies the IsNil predicate on the "definition_version" field.
func DefinitionVersionIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldDefinitionVersion))
}

// DefinitionVersionNotNil applies the NotNil predicate on the "definition_version" field.
func DefinitionVersionNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldDefinitionVersion))
}

// DefinitionVersionEqualFold applies the EqualFold predicate on the "definition_version" field.
func DefinitionVersionEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldDefinitionVersion, v))
}

// DefinitionVersionContainsFold applies the ContainsFold predicate on the "definition_version" field.
func DefinitionVersionContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldDefinitionVersion, v))
}

// DatabaseConfigIsNil applies the IsNil predicate on the "database_config" field.
func DatabaseConfigIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldDatabaseConfig))
}

// DatabaseConfigNotNil applies the NotNil predicate on the "database_config" field.
func DatabaseConfigNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldDatabaseConfig))
}

// S3BackupSourceIDEQ applies the EQ predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldS3BackupSourceID, v))
}

// S3BackupSourceIDNEQ applies the NEQ predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDNEQ(v uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldS3BackupSourceID, v))
}

// S3BackupSourceIDIn applies the In predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldS3BackupSourceID, vs...))
}

// S3BackupSourceIDNotIn applies the NotIn predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDNotIn(vs ...uuid.UUID) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldS3BackupSourceID, vs...))
}

// S3BackupSourceIDIsNil applies the IsNil predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldS3BackupSourceID))
}

// S3BackupSourceIDNotNil applies the NotNil predicate on the "s3_backup_source_id" field.
func S3BackupSourceIDNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldS3BackupSourceID))
}

// S3BackupBucketEQ applies the EQ predicate on the "s3_backup_bucket" field.
func S3BackupBucketEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldS3BackupBucket, v))
}

// S3BackupBucketNEQ applies the NEQ predicate on the "s3_backup_bucket" field.
func S3BackupBucketNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldS3BackupBucket, v))
}

// S3BackupBucketIn applies the In predicate on the "s3_backup_bucket" field.
func S3BackupBucketIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldS3BackupBucket, vs...))
}

// S3BackupBucketNotIn applies the NotIn predicate on the "s3_backup_bucket" field.
func S3BackupBucketNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldS3BackupBucket, vs...))
}

// S3BackupBucketGT applies the GT predicate on the "s3_backup_bucket" field.
func S3BackupBucketGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldS3BackupBucket, v))
}

// S3BackupBucketGTE applies the GTE predicate on the "s3_backup_bucket" field.
func S3BackupBucketGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldS3BackupBucket, v))
}

// S3BackupBucketLT applies the LT predicate on the "s3_backup_bucket" field.
func S3BackupBucketLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldS3BackupBucket, v))
}

// S3BackupBucketLTE applies the LTE predicate on the "s3_backup_bucket" field.
func S3BackupBucketLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldS3BackupBucket, v))
}

// S3BackupBucketContains applies the Contains predicate on the "s3_backup_bucket" field.
func S3BackupBucketContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldS3BackupBucket, v))
}

// S3BackupBucketHasPrefix applies the HasPrefix predicate on the "s3_backup_bucket" field.
func S3BackupBucketHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldS3BackupBucket, v))
}

// S3BackupBucketHasSuffix applies the HasSuffix predicate on the "s3_backup_bucket" field.
func S3BackupBucketHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldS3BackupBucket, v))
}

// S3BackupBucketIsNil applies the IsNil predicate on the "s3_backup_bucket" field.
func S3BackupBucketIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldS3BackupBucket))
}

// S3BackupBucketNotNil applies the NotNil predicate on the "s3_backup_bucket" field.
func S3BackupBucketNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldS3BackupBucket))
}

// S3BackupBucketEqualFold applies the EqualFold predicate on the "s3_backup_bucket" field.
func S3BackupBucketEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldS3BackupBucket, v))
}

// S3BackupBucketContainsFold applies the ContainsFold predicate on the "s3_backup_bucket" field.
func S3BackupBucketContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldS3BackupBucket, v))
}

// BackupScheduleEQ applies the EQ predicate on the "backup_schedule" field.
func BackupScheduleEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldBackupSchedule, v))
}

// BackupScheduleNEQ applies the NEQ predicate on the "backup_schedule" field.
func BackupScheduleNEQ(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldBackupSchedule, v))
}

// BackupScheduleIn applies the In predicate on the "backup_schedule" field.
func BackupScheduleIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldBackupSchedule, vs...))
}

// BackupScheduleNotIn applies the NotIn predicate on the "backup_schedule" field.
func BackupScheduleNotIn(vs ...string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldBackupSchedule, vs...))
}

// BackupScheduleGT applies the GT predicate on the "backup_schedule" field.
func BackupScheduleGT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldBackupSchedule, v))
}

// BackupScheduleGTE applies the GTE predicate on the "backup_schedule" field.
func BackupScheduleGTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldBackupSchedule, v))
}

// BackupScheduleLT applies the LT predicate on the "backup_schedule" field.
func BackupScheduleLT(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldBackupSchedule, v))
}

// BackupScheduleLTE applies the LTE predicate on the "backup_schedule" field.
func BackupScheduleLTE(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldBackupSchedule, v))
}

// BackupScheduleContains applies the Contains predicate on the "backup_schedule" field.
func BackupScheduleContains(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContains(FieldBackupSchedule, v))
}

// BackupScheduleHasPrefix applies the HasPrefix predicate on the "backup_schedule" field.
func BackupScheduleHasPrefix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasPrefix(FieldBackupSchedule, v))
}

// BackupScheduleHasSuffix applies the HasSuffix predicate on the "backup_schedule" field.
func BackupScheduleHasSuffix(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldHasSuffix(FieldBackupSchedule, v))
}

// BackupScheduleEqualFold applies the EqualFold predicate on the "backup_schedule" field.
func BackupScheduleEqualFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEqualFold(FieldBackupSchedule, v))
}

// BackupScheduleContainsFold applies the ContainsFold predicate on the "backup_schedule" field.
func BackupScheduleContainsFold(v string) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldContainsFold(FieldBackupSchedule, v))
}

// BackupRetentionCountEQ applies the EQ predicate on the "backup_retention_count" field.
func BackupRetentionCountEQ(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldEQ(FieldBackupRetentionCount, v))
}

// BackupRetentionCountNEQ applies the NEQ predicate on the "backup_retention_count" field.
func BackupRetentionCountNEQ(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNEQ(FieldBackupRetentionCount, v))
}

// BackupRetentionCountIn applies the In predicate on the "backup_retention_count" field.
func BackupRetentionCountIn(vs ...int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIn(FieldBackupRetentionCount, vs...))
}

// BackupRetentionCountNotIn applies the NotIn predicate on the "backup_retention_count" field.
func BackupRetentionCountNotIn(vs ...int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotIn(FieldBackupRetentionCount, vs...))
}

// BackupRetentionCountGT applies the GT predicate on the "backup_retention_count" field.
func BackupRetentionCountGT(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGT(FieldBackupRetentionCount, v))
}

// BackupRetentionCountGTE applies the GTE predicate on the "backup_retention_count" field.
func BackupRetentionCountGTE(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldGTE(FieldBackupRetentionCount, v))
}

// BackupRetentionCountLT applies the LT predicate on the "backup_retention_count" field.
func BackupRetentionCountLT(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLT(FieldBackupRetentionCount, v))
}

// BackupRetentionCountLTE applies the LTE predicate on the "backup_retention_count" field.
func BackupRetentionCountLTE(v int) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldLTE(FieldBackupRetentionCount, v))
}

// VolumesIsNil applies the IsNil predicate on the "volumes" field.
func VolumesIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldVolumes))
}

// VolumesNotNil applies the NotNil predicate on the "volumes" field.
func VolumesNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldVolumes))
}

// SecurityContextIsNil applies the IsNil predicate on the "security_context" field.
func SecurityContextIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldSecurityContext))
}

// SecurityContextNotNil applies the NotNil predicate on the "security_context" field.
func SecurityContextNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldSecurityContext))
}

// HealthCheckIsNil applies the IsNil predicate on the "health_check" field.
func HealthCheckIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldHealthCheck))
}

// HealthCheckNotNil applies the NotNil predicate on the "health_check" field.
func HealthCheckNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldHealthCheck))
}

// VariableMountsIsNil applies the IsNil predicate on the "variable_mounts" field.
func VariableMountsIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldVariableMounts))
}

// VariableMountsNotNil applies the NotNil predicate on the "variable_mounts" field.
func VariableMountsNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldVariableMounts))
}

// ProtectedVariablesIsNil applies the IsNil predicate on the "protected_variables" field.
func ProtectedVariablesIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldProtectedVariables))
}

// ProtectedVariablesNotNil applies the NotNil predicate on the "protected_variables" field.
func ProtectedVariablesNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldProtectedVariables))
}

// InitContainersIsNil applies the IsNil predicate on the "init_containers" field.
func InitContainersIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldInitContainers))
}

// InitContainersNotNil applies the NotNil predicate on the "init_containers" field.
func InitContainersNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldInitContainers))
}

// ResourcesIsNil applies the IsNil predicate on the "resources" field.
func ResourcesIsNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldIsNull(FieldResources))
}

// ResourcesNotNil applies the NotNil predicate on the "resources" field.
func ResourcesNotNil() predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.FieldNotNull(FieldResources))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasS3BackupSources applies the HasEdge predicate on the "s3_backup_sources" edge.
func HasS3BackupSources() predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, S3BackupSourcesTable, S3BackupSourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasS3BackupSourcesWith applies the HasEdge predicate on the "s3_backup_sources" edge with a given conditions (other predicates).
func HasS3BackupSourcesWith(preds ...predicate.S3) predicate.ServiceConfig {
	return predicate.ServiceConfig(func(s *sql.Selector) {
		step := newS3BackupSourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceConfig) predicate.ServiceConfig {
	return predicate.ServiceConfig(sql.NotPredicates(p))
}
