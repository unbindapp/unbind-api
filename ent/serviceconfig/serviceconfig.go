// Code generated by ent, DO NOT EDIT.

package serviceconfig

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/schema"
	"github.com/unbindapp/unbind-api/internal/sourceanalyzer/enum"
)

const (
	// Label holds the string label denoting the serviceconfig type in the database.
	Label = "service_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldServiceID holds the string denoting the service_id field in the database.
	FieldServiceID = "service_id"
	// FieldBuilder holds the string denoting the builder field in the database.
	FieldBuilder = "builder"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldDockerfilePath holds the string denoting the dockerfile_path field in the database.
	FieldDockerfilePath = "dockerfile_path"
	// FieldDockerfileContext holds the string denoting the dockerfile_context field in the database.
	FieldDockerfileContext = "dockerfile_context"
	// FieldRailpackProvider holds the string denoting the railpack_provider field in the database.
	FieldRailpackProvider = "railpack_provider"
	// FieldRailpackFramework holds the string denoting the railpack_framework field in the database.
	FieldRailpackFramework = "railpack_framework"
	// FieldGitBranch holds the string denoting the git_branch field in the database.
	FieldGitBranch = "git_branch"
	// FieldGitTag holds the string denoting the git_tag field in the database.
	FieldGitTag = "git_tag"
	// FieldHosts holds the string denoting the hosts field in the database.
	FieldHosts = "hosts"
	// FieldPorts holds the string denoting the ports field in the database.
	FieldPorts = "ports"
	// FieldReplicas holds the string denoting the replicas field in the database.
	FieldReplicas = "replicas"
	// FieldAutoDeploy holds the string denoting the auto_deploy field in the database.
	FieldAutoDeploy = "auto_deploy"
	// FieldRunCommand holds the string denoting the run_command field in the database.
	FieldRunCommand = "run_command"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldDefinitionVersion holds the string denoting the definition_version field in the database.
	FieldDefinitionVersion = "definition_version"
	// FieldDatabaseConfig holds the string denoting the database_config field in the database.
	FieldDatabaseConfig = "database_config"
	// FieldS3BackupEndpointID holds the string denoting the s3_backup_endpoint_id field in the database.
	FieldS3BackupEndpointID = "s3_backup_endpoint_id"
	// FieldS3BackupBucket holds the string denoting the s3_backup_bucket field in the database.
	FieldS3BackupBucket = "s3_backup_bucket"
	// FieldBackupSchedule holds the string denoting the backup_schedule field in the database.
	FieldBackupSchedule = "backup_schedule"
	// FieldBackupRetentionCount holds the string denoting the backup_retention_count field in the database.
	FieldBackupRetentionCount = "backup_retention_count"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeS3BackupEndpoint holds the string denoting the s3_backup_endpoint edge name in mutations.
	EdgeS3BackupEndpoint = "s3_backup_endpoint"
	// Table holds the table name of the serviceconfig in the database.
	Table = "service_configs"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "service_configs"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_id"
	// S3BackupEndpointTable is the table that holds the s3_backup_endpoint relation/edge.
	S3BackupEndpointTable = "service_configs"
	// S3BackupEndpointInverseTable is the table name for the S3 entity.
	// It exists in this package in order to avoid circular dependency with the "s3" package.
	S3BackupEndpointInverseTable = "s3_endpoints"
	// S3BackupEndpointColumn is the table column denoting the s3_backup_endpoint relation/edge.
	S3BackupEndpointColumn = "s3_backup_endpoint_id"
)

// Columns holds all SQL columns for serviceconfig fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldServiceID,
	FieldBuilder,
	FieldIcon,
	FieldDockerfilePath,
	FieldDockerfileContext,
	FieldRailpackProvider,
	FieldRailpackFramework,
	FieldGitBranch,
	FieldGitTag,
	FieldHosts,
	FieldPorts,
	FieldReplicas,
	FieldAutoDeploy,
	FieldRunCommand,
	FieldIsPublic,
	FieldImage,
	FieldDefinitionVersion,
	FieldDatabaseConfig,
	FieldS3BackupEndpointID,
	FieldS3BackupBucket,
	FieldBackupSchedule,
	FieldBackupRetentionCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultReplicas holds the default value on creation for the "replicas" field.
	DefaultReplicas int32
	// DefaultAutoDeploy holds the default value on creation for the "auto_deploy" field.
	DefaultAutoDeploy bool
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultBackupSchedule holds the default value on creation for the "backup_schedule" field.
	DefaultBackupSchedule string
	// DefaultBackupRetentionCount holds the default value on creation for the "backup_retention_count" field.
	DefaultBackupRetentionCount int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BuilderValidator is a validator for the "builder" field enum values. It is called by the builders before save.
func BuilderValidator(b schema.ServiceBuilder) error {
	switch b {
	case "railpack", "docker", "database":
		return nil
	default:
		return fmt.Errorf("serviceconfig: invalid enum value for builder field: %q", b)
	}
}

// RailpackProviderValidator is a validator for the "railpack_provider" field enum values. It is called by the builders before save.
func RailpackProviderValidator(rp enum.Provider) error {
	switch rp {
	case "node", "deno", "go", "java", "php", "python", "ruby", "rust", "elixir", "staticfile", "unknown":
		return nil
	default:
		return fmt.Errorf("serviceconfig: invalid enum value for railpack_provider field: %q", rp)
	}
}

// RailpackFrameworkValidator is a validator for the "railpack_framework" field enum values. It is called by the builders before save.
func RailpackFrameworkValidator(rf enum.Framework) error {
	switch rf {
	case "next", "astro", "vite", "cra", "angular", "remix", "bun", "express", "sveltekit", "svelte", "solid", "hono", "python", "django", "flask", "fastapi", "fasthtml", "gin", "spring-boot", "laravel", "rails", "rocket", "unknown":
		return nil
	default:
		return fmt.Errorf("serviceconfig: invalid enum value for railpack_framework field: %q", rf)
	}
}

// OrderOption defines the ordering options for the ServiceConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByServiceID orders the results by the service_id field.
func ByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceID, opts...).ToFunc()
}

// ByBuilder orders the results by the builder field.
func ByBuilder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuilder, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByDockerfilePath orders the results by the dockerfile_path field.
func ByDockerfilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDockerfilePath, opts...).ToFunc()
}

// ByDockerfileContext orders the results by the dockerfile_context field.
func ByDockerfileContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDockerfileContext, opts...).ToFunc()
}

// ByRailpackProvider orders the results by the railpack_provider field.
func ByRailpackProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRailpackProvider, opts...).ToFunc()
}

// ByRailpackFramework orders the results by the railpack_framework field.
func ByRailpackFramework(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRailpackFramework, opts...).ToFunc()
}

// ByGitBranch orders the results by the git_branch field.
func ByGitBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitBranch, opts...).ToFunc()
}

// ByGitTag orders the results by the git_tag field.
func ByGitTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitTag, opts...).ToFunc()
}

// ByReplicas orders the results by the replicas field.
func ByReplicas(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplicas, opts...).ToFunc()
}

// ByAutoDeploy orders the results by the auto_deploy field.
func ByAutoDeploy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoDeploy, opts...).ToFunc()
}

// ByRunCommand orders the results by the run_command field.
func ByRunCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunCommand, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByDefinitionVersion orders the results by the definition_version field.
func ByDefinitionVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefinitionVersion, opts...).ToFunc()
}

// ByS3BackupEndpointID orders the results by the s3_backup_endpoint_id field.
func ByS3BackupEndpointID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldS3BackupEndpointID, opts...).ToFunc()
}

// ByS3BackupBucket orders the results by the s3_backup_bucket field.
func ByS3BackupBucket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldS3BackupBucket, opts...).ToFunc()
}

// ByBackupSchedule orders the results by the backup_schedule field.
func ByBackupSchedule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackupSchedule, opts...).ToFunc()
}

// ByBackupRetentionCount orders the results by the backup_retention_count field.
func ByBackupRetentionCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackupRetentionCount, opts...).ToFunc()
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByS3BackupEndpointField orders the results by s3_backup_endpoint field.
func ByS3BackupEndpointField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newS3BackupEndpointStep(), sql.OrderByField(field, opts...))
	}
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ServiceTable, ServiceColumn),
	)
}
func newS3BackupEndpointStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(S3BackupEndpointInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, S3BackupEndpointTable, S3BackupEndpointColumn),
	)
}
