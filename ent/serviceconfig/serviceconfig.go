// Code generated by ent, DO NOT EDIT.

package serviceconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the serviceconfig type in the database.
	Label = "service_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldServiceID holds the string denoting the service_id field in the database.
	FieldServiceID = "service_id"
	// FieldGitBranch holds the string denoting the git_branch field in the database.
	FieldGitBranch = "git_branch"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldReplicas holds the string denoting the replicas field in the database.
	FieldReplicas = "replicas"
	// FieldAutoDeploy holds the string denoting the auto_deploy field in the database.
	FieldAutoDeploy = "auto_deploy"
	// FieldRunCommand holds the string denoting the run_command field in the database.
	FieldRunCommand = "run_command"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// Table holds the table name of the serviceconfig in the database.
	Table = "service_configs"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "service_configs"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_id"
)

// Columns holds all SQL columns for serviceconfig fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldServiceID,
	FieldGitBranch,
	FieldHost,
	FieldPort,
	FieldReplicas,
	FieldAutoDeploy,
	FieldRunCommand,
	FieldPublic,
	FieldImage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultPort holds the default value on creation for the "port" field.
	DefaultPort int
	// DefaultReplicas holds the default value on creation for the "replicas" field.
	DefaultReplicas int32
	// DefaultAutoDeploy holds the default value on creation for the "auto_deploy" field.
	DefaultAutoDeploy bool
	// DefaultPublic holds the default value on creation for the "public" field.
	DefaultPublic bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ServiceConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByServiceID orders the results by the service_id field.
func ByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceID, opts...).ToFunc()
}

// ByGitBranch orders the results by the git_branch field.
func ByGitBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitBranch, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByReplicas orders the results by the replicas field.
func ByReplicas(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplicas, opts...).ToFunc()
}

// ByAutoDeploy orders the results by the auto_deploy field.
func ByAutoDeploy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoDeploy, opts...).ToFunc()
}

// ByRunCommand orders the results by the run_command field.
func ByRunCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunCommand, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ServiceTable, ServiceColumn),
	)
}
