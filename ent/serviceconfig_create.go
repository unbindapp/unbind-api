// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/service"
	"github.com/unbindapp/unbind-api/ent/serviceconfig"
)

// ServiceConfigCreate is the builder for creating a ServiceConfig entity.
type ServiceConfigCreate struct {
	config
	mutation *ServiceConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (scc *ServiceConfigCreate) SetCreatedAt(t time.Time) *ServiceConfigCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableCreatedAt(t *time.Time) *ServiceConfigCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ServiceConfigCreate) SetUpdatedAt(t time.Time) *ServiceConfigCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableUpdatedAt(t *time.Time) *ServiceConfigCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetServiceID sets the "service_id" field.
func (scc *ServiceConfigCreate) SetServiceID(u uuid.UUID) *ServiceConfigCreate {
	scc.mutation.SetServiceID(u)
	return scc
}

// SetGitBranch sets the "git_branch" field.
func (scc *ServiceConfigCreate) SetGitBranch(s string) *ServiceConfigCreate {
	scc.mutation.SetGitBranch(s)
	return scc
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableGitBranch(s *string) *ServiceConfigCreate {
	if s != nil {
		scc.SetGitBranch(*s)
	}
	return scc
}

// SetHost sets the "host" field.
func (scc *ServiceConfigCreate) SetHost(s string) *ServiceConfigCreate {
	scc.mutation.SetHost(s)
	return scc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableHost(s *string) *ServiceConfigCreate {
	if s != nil {
		scc.SetHost(*s)
	}
	return scc
}

// SetPort sets the "port" field.
func (scc *ServiceConfigCreate) SetPort(i int) *ServiceConfigCreate {
	scc.mutation.SetPort(i)
	return scc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillablePort(i *int) *ServiceConfigCreate {
	if i != nil {
		scc.SetPort(*i)
	}
	return scc
}

// SetReplicas sets the "replicas" field.
func (scc *ServiceConfigCreate) SetReplicas(i int32) *ServiceConfigCreate {
	scc.mutation.SetReplicas(i)
	return scc
}

// SetNillableReplicas sets the "replicas" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableReplicas(i *int32) *ServiceConfigCreate {
	if i != nil {
		scc.SetReplicas(*i)
	}
	return scc
}

// SetAutoDeploy sets the "auto_deploy" field.
func (scc *ServiceConfigCreate) SetAutoDeploy(b bool) *ServiceConfigCreate {
	scc.mutation.SetAutoDeploy(b)
	return scc
}

// SetNillableAutoDeploy sets the "auto_deploy" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableAutoDeploy(b *bool) *ServiceConfigCreate {
	if b != nil {
		scc.SetAutoDeploy(*b)
	}
	return scc
}

// SetRunCommand sets the "run_command" field.
func (scc *ServiceConfigCreate) SetRunCommand(s string) *ServiceConfigCreate {
	scc.mutation.SetRunCommand(s)
	return scc
}

// SetNillableRunCommand sets the "run_command" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableRunCommand(s *string) *ServiceConfigCreate {
	if s != nil {
		scc.SetRunCommand(*s)
	}
	return scc
}

// SetPublic sets the "public" field.
func (scc *ServiceConfigCreate) SetPublic(b bool) *ServiceConfigCreate {
	scc.mutation.SetPublic(b)
	return scc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillablePublic(b *bool) *ServiceConfigCreate {
	if b != nil {
		scc.SetPublic(*b)
	}
	return scc
}

// SetImage sets the "image" field.
func (scc *ServiceConfigCreate) SetImage(s string) *ServiceConfigCreate {
	scc.mutation.SetImage(s)
	return scc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableImage(s *string) *ServiceConfigCreate {
	if s != nil {
		scc.SetImage(*s)
	}
	return scc
}

// SetID sets the "id" field.
func (scc *ServiceConfigCreate) SetID(u uuid.UUID) *ServiceConfigCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scc *ServiceConfigCreate) SetNillableID(u *uuid.UUID) *ServiceConfigCreate {
	if u != nil {
		scc.SetID(*u)
	}
	return scc
}

// SetService sets the "service" edge to the Service entity.
func (scc *ServiceConfigCreate) SetService(s *Service) *ServiceConfigCreate {
	return scc.SetServiceID(s.ID)
}

// Mutation returns the ServiceConfigMutation object of the builder.
func (scc *ServiceConfigCreate) Mutation() *ServiceConfigMutation {
	return scc.mutation
}

// Save creates the ServiceConfig in the database.
func (scc *ServiceConfigCreate) Save(ctx context.Context) (*ServiceConfig, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ServiceConfigCreate) SaveX(ctx context.Context) *ServiceConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ServiceConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ServiceConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ServiceConfigCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := serviceconfig.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := serviceconfig.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.Port(); !ok {
		v := serviceconfig.DefaultPort
		scc.mutation.SetPort(v)
	}
	if _, ok := scc.mutation.Replicas(); !ok {
		v := serviceconfig.DefaultReplicas
		scc.mutation.SetReplicas(v)
	}
	if _, ok := scc.mutation.AutoDeploy(); !ok {
		v := serviceconfig.DefaultAutoDeploy
		scc.mutation.SetAutoDeploy(v)
	}
	if _, ok := scc.mutation.Public(); !ok {
		v := serviceconfig.DefaultPublic
		scc.mutation.SetPublic(v)
	}
	if _, ok := scc.mutation.ID(); !ok {
		v := serviceconfig.DefaultID()
		scc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ServiceConfigCreate) check() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceConfig.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceConfig.updated_at"`)}
	}
	if _, ok := scc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`ent: missing required field "ServiceConfig.service_id"`)}
	}
	if _, ok := scc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "ServiceConfig.port"`)}
	}
	if _, ok := scc.mutation.Replicas(); !ok {
		return &ValidationError{Name: "replicas", err: errors.New(`ent: missing required field "ServiceConfig.replicas"`)}
	}
	if _, ok := scc.mutation.AutoDeploy(); !ok {
		return &ValidationError{Name: "auto_deploy", err: errors.New(`ent: missing required field "ServiceConfig.auto_deploy"`)}
	}
	if _, ok := scc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "ServiceConfig.public"`)}
	}
	if len(scc.mutation.ServiceIDs()) == 0 {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "ServiceConfig.service"`)}
	}
	return nil
}

func (scc *ServiceConfigCreate) sqlSave(ctx context.Context) (*ServiceConfig, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ServiceConfigCreate) createSpec() (*ServiceConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceConfig{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(serviceconfig.Table, sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = scc.conflict
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(serviceconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(serviceconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.GitBranch(); ok {
		_spec.SetField(serviceconfig.FieldGitBranch, field.TypeString, value)
		_node.GitBranch = &value
	}
	if value, ok := scc.mutation.Host(); ok {
		_spec.SetField(serviceconfig.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := scc.mutation.Port(); ok {
		_spec.SetField(serviceconfig.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := scc.mutation.Replicas(); ok {
		_spec.SetField(serviceconfig.FieldReplicas, field.TypeInt32, value)
		_node.Replicas = value
	}
	if value, ok := scc.mutation.AutoDeploy(); ok {
		_spec.SetField(serviceconfig.FieldAutoDeploy, field.TypeBool, value)
		_node.AutoDeploy = value
	}
	if value, ok := scc.mutation.RunCommand(); ok {
		_spec.SetField(serviceconfig.FieldRunCommand, field.TypeString, value)
		_node.RunCommand = &value
	}
	if value, ok := scc.mutation.Public(); ok {
		_spec.SetField(serviceconfig.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := scc.mutation.Image(); ok {
		_spec.SetField(serviceconfig.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if nodes := scc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scc *ServiceConfigCreate) OnConflict(opts ...sql.ConflictOption) *ServiceConfigUpsertOne {
	scc.conflict = opts
	return &ServiceConfigUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scc *ServiceConfigCreate) OnConflictColumns(columns ...string) *ServiceConfigUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &ServiceConfigUpsertOne{
		create: scc,
	}
}

type (
	// ServiceConfigUpsertOne is the builder for "upsert"-ing
	//  one ServiceConfig node.
	ServiceConfigUpsertOne struct {
		create *ServiceConfigCreate
	}

	// ServiceConfigUpsert is the "OnConflict" setter.
	ServiceConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceConfigUpsert) SetUpdatedAt(v time.Time) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateUpdatedAt() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldUpdatedAt)
	return u
}

// SetServiceID sets the "service_id" field.
func (u *ServiceConfigUpsert) SetServiceID(v uuid.UUID) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldServiceID, v)
	return u
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateServiceID() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldServiceID)
	return u
}

// SetGitBranch sets the "git_branch" field.
func (u *ServiceConfigUpsert) SetGitBranch(v string) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldGitBranch, v)
	return u
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateGitBranch() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldGitBranch)
	return u
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ServiceConfigUpsert) ClearGitBranch() *ServiceConfigUpsert {
	u.SetNull(serviceconfig.FieldGitBranch)
	return u
}

// SetHost sets the "host" field.
func (u *ServiceConfigUpsert) SetHost(v string) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldHost, v)
	return u
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateHost() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldHost)
	return u
}

// ClearHost clears the value of the "host" field.
func (u *ServiceConfigUpsert) ClearHost() *ServiceConfigUpsert {
	u.SetNull(serviceconfig.FieldHost)
	return u
}

// SetPort sets the "port" field.
func (u *ServiceConfigUpsert) SetPort(v int) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdatePort() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldPort)
	return u
}

// AddPort adds v to the "port" field.
func (u *ServiceConfigUpsert) AddPort(v int) *ServiceConfigUpsert {
	u.Add(serviceconfig.FieldPort, v)
	return u
}

// SetReplicas sets the "replicas" field.
func (u *ServiceConfigUpsert) SetReplicas(v int32) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldReplicas, v)
	return u
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateReplicas() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldReplicas)
	return u
}

// AddReplicas adds v to the "replicas" field.
func (u *ServiceConfigUpsert) AddReplicas(v int32) *ServiceConfigUpsert {
	u.Add(serviceconfig.FieldReplicas, v)
	return u
}

// SetAutoDeploy sets the "auto_deploy" field.
func (u *ServiceConfigUpsert) SetAutoDeploy(v bool) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldAutoDeploy, v)
	return u
}

// UpdateAutoDeploy sets the "auto_deploy" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateAutoDeploy() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldAutoDeploy)
	return u
}

// SetRunCommand sets the "run_command" field.
func (u *ServiceConfigUpsert) SetRunCommand(v string) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldRunCommand, v)
	return u
}

// UpdateRunCommand sets the "run_command" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateRunCommand() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldRunCommand)
	return u
}

// ClearRunCommand clears the value of the "run_command" field.
func (u *ServiceConfigUpsert) ClearRunCommand() *ServiceConfigUpsert {
	u.SetNull(serviceconfig.FieldRunCommand)
	return u
}

// SetPublic sets the "public" field.
func (u *ServiceConfigUpsert) SetPublic(v bool) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldPublic, v)
	return u
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdatePublic() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldPublic)
	return u
}

// SetImage sets the "image" field.
func (u *ServiceConfigUpsert) SetImage(v string) *ServiceConfigUpsert {
	u.Set(serviceconfig.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ServiceConfigUpsert) UpdateImage() *ServiceConfigUpsert {
	u.SetExcluded(serviceconfig.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *ServiceConfigUpsert) ClearImage() *ServiceConfigUpsert {
	u.SetNull(serviceconfig.FieldImage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(serviceconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceConfigUpsertOne) UpdateNewValues() *ServiceConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(serviceconfig.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(serviceconfig.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceConfigUpsertOne) Ignore() *ServiceConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceConfigUpsertOne) DoNothing() *ServiceConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceConfigCreate.OnConflict
// documentation for more info.
func (u *ServiceConfigUpsertOne) Update(set func(*ServiceConfigUpsert)) *ServiceConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceConfigUpsertOne) SetUpdatedAt(v time.Time) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateUpdatedAt() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *ServiceConfigUpsertOne) SetServiceID(v uuid.UUID) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateServiceID() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateServiceID()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ServiceConfigUpsertOne) SetGitBranch(v string) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateGitBranch() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ServiceConfigUpsertOne) ClearGitBranch() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearGitBranch()
	})
}

// SetHost sets the "host" field.
func (u *ServiceConfigUpsertOne) SetHost(v string) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateHost() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *ServiceConfigUpsertOne) ClearHost() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearHost()
	})
}

// SetPort sets the "port" field.
func (u *ServiceConfigUpsertOne) SetPort(v int) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ServiceConfigUpsertOne) AddPort(v int) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdatePort() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdatePort()
	})
}

// SetReplicas sets the "replicas" field.
func (u *ServiceConfigUpsertOne) SetReplicas(v int32) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetReplicas(v)
	})
}

// AddReplicas adds v to the "replicas" field.
func (u *ServiceConfigUpsertOne) AddReplicas(v int32) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.AddReplicas(v)
	})
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateReplicas() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateReplicas()
	})
}

// SetAutoDeploy sets the "auto_deploy" field.
func (u *ServiceConfigUpsertOne) SetAutoDeploy(v bool) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetAutoDeploy(v)
	})
}

// UpdateAutoDeploy sets the "auto_deploy" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateAutoDeploy() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateAutoDeploy()
	})
}

// SetRunCommand sets the "run_command" field.
func (u *ServiceConfigUpsertOne) SetRunCommand(v string) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetRunCommand(v)
	})
}

// UpdateRunCommand sets the "run_command" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateRunCommand() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateRunCommand()
	})
}

// ClearRunCommand clears the value of the "run_command" field.
func (u *ServiceConfigUpsertOne) ClearRunCommand() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearRunCommand()
	})
}

// SetPublic sets the "public" field.
func (u *ServiceConfigUpsertOne) SetPublic(v bool) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdatePublic() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdatePublic()
	})
}

// SetImage sets the "image" field.
func (u *ServiceConfigUpsertOne) SetImage(v string) *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ServiceConfigUpsertOne) UpdateImage() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *ServiceConfigUpsertOne) ClearImage() *ServiceConfigUpsertOne {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *ServiceConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceConfigUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ServiceConfigUpsertOne.ID is not supported by MySQL driver. Use ServiceConfigUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceConfigUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceConfigCreateBulk is the builder for creating many ServiceConfig entities in bulk.
type ServiceConfigCreateBulk struct {
	config
	err      error
	builders []*ServiceConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the ServiceConfig entities in the database.
func (sccb *ServiceConfigCreateBulk) Save(ctx context.Context) ([]*ServiceConfig, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ServiceConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ServiceConfigCreateBulk) SaveX(ctx context.Context) []*ServiceConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ServiceConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ServiceConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sccb *ServiceConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceConfigUpsertBulk {
	sccb.conflict = opts
	return &ServiceConfigUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccb *ServiceConfigCreateBulk) OnConflictColumns(columns ...string) *ServiceConfigUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &ServiceConfigUpsertBulk{
		create: sccb,
	}
}

// ServiceConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of ServiceConfig nodes.
type ServiceConfigUpsertBulk struct {
	create *ServiceConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(serviceconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceConfigUpsertBulk) UpdateNewValues() *ServiceConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(serviceconfig.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(serviceconfig.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceConfigUpsertBulk) Ignore() *ServiceConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceConfigUpsertBulk) DoNothing() *ServiceConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceConfigCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceConfigUpsertBulk) Update(set func(*ServiceConfigUpsert)) *ServiceConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServiceConfigUpsertBulk) SetUpdatedAt(v time.Time) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateUpdatedAt() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetServiceID sets the "service_id" field.
func (u *ServiceConfigUpsertBulk) SetServiceID(v uuid.UUID) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetServiceID(v)
	})
}

// UpdateServiceID sets the "service_id" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateServiceID() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateServiceID()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ServiceConfigUpsertBulk) SetGitBranch(v string) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateGitBranch() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ServiceConfigUpsertBulk) ClearGitBranch() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearGitBranch()
	})
}

// SetHost sets the "host" field.
func (u *ServiceConfigUpsertBulk) SetHost(v string) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateHost() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *ServiceConfigUpsertBulk) ClearHost() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearHost()
	})
}

// SetPort sets the "port" field.
func (u *ServiceConfigUpsertBulk) SetPort(v int) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetPort(v)
	})
}

// AddPort adds v to the "port" field.
func (u *ServiceConfigUpsertBulk) AddPort(v int) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.AddPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdatePort() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdatePort()
	})
}

// SetReplicas sets the "replicas" field.
func (u *ServiceConfigUpsertBulk) SetReplicas(v int32) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetReplicas(v)
	})
}

// AddReplicas adds v to the "replicas" field.
func (u *ServiceConfigUpsertBulk) AddReplicas(v int32) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.AddReplicas(v)
	})
}

// UpdateReplicas sets the "replicas" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateReplicas() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateReplicas()
	})
}

// SetAutoDeploy sets the "auto_deploy" field.
func (u *ServiceConfigUpsertBulk) SetAutoDeploy(v bool) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetAutoDeploy(v)
	})
}

// UpdateAutoDeploy sets the "auto_deploy" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateAutoDeploy() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateAutoDeploy()
	})
}

// SetRunCommand sets the "run_command" field.
func (u *ServiceConfigUpsertBulk) SetRunCommand(v string) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetRunCommand(v)
	})
}

// UpdateRunCommand sets the "run_command" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateRunCommand() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateRunCommand()
	})
}

// ClearRunCommand clears the value of the "run_command" field.
func (u *ServiceConfigUpsertBulk) ClearRunCommand() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearRunCommand()
	})
}

// SetPublic sets the "public" field.
func (u *ServiceConfigUpsertBulk) SetPublic(v bool) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdatePublic() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdatePublic()
	})
}

// SetImage sets the "image" field.
func (u *ServiceConfigUpsertBulk) SetImage(v string) *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ServiceConfigUpsertBulk) UpdateImage() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *ServiceConfigUpsertBulk) ClearImage() *ServiceConfigUpsertBulk {
	return u.Update(func(s *ServiceConfigUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *ServiceConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ServiceConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServiceConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
