-- Create "bootstrap_flag" table
CREATE TABLE IF NOT EXISTS "bootstrap_flag" (
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "is_bootstrapped" boolean NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "deployments" table
CREATE TABLE IF NOT EXISTS "deployments" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "status" character varying NOT NULL,
  "source" character varying NOT NULL DEFAULT 'manual',
  "error" character varying NULL,
  "commit_sha" character varying NULL,
  "commit_message" character varying NULL,
  "commit_author" jsonb NULL,
  "started_at" timestamptz NULL,
  "completed_at" timestamptz NULL,
  "kubernetes_job_name" character varying NULL,
  "kubernetes_job_status" character varying NULL,
  "attempts" bigint NOT NULL DEFAULT 0,
  "image" character varying NULL,
  "resource_definition" jsonb NULL,
  "service_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "environments" table
CREATE TABLE IF NOT EXISTS "environments" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "kubernetes_name" character varying NOT NULL,
  "name" character varying NOT NULL,
  "description" character varying NULL,
  "active" boolean NOT NULL DEFAULT true,
  "kubernetes_secret" character varying NOT NULL,
  "project_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "environments_kubernetes_name_key" to table: "environments"
CREATE UNIQUE INDEX IF NOT EXISTS "environments_kubernetes_name_key" ON "environments" ("kubernetes_name");
-- Create "github_apps" table
CREATE TABLE IF NOT EXISTS "github_apps" (
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "name" character varying NOT NULL,
  "client_id" character varying NOT NULL,
  "client_secret" character varying NOT NULL,
  "webhook_secret" character varying NOT NULL,
  "private_key" text NOT NULL,
  "created_by" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "github_installations" table
CREATE TABLE IF NOT EXISTS "github_installations" (
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "account_id" bigint NOT NULL,
  "account_login" character varying NOT NULL,
  "account_type" character varying NOT NULL,
  "account_url" character varying NOT NULL,
  "repository_selection" character varying NOT NULL DEFAULT 'all',
  "suspended" boolean NOT NULL DEFAULT false,
  "active" boolean NOT NULL DEFAULT true,
  "permissions" jsonb NULL,
  "events" jsonb NULL,
  "github_app_id" bigint NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "githubinstallation_github_app_id" to table: "github_installations"
CREATE UNIQUE INDEX IF NOT EXISTS "githubinstallation_github_app_id" ON "github_installations" ("github_app_id");
-- Create "groups" table
CREATE TABLE IF NOT EXISTS "groups" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "name" character varying NOT NULL,
  "description" character varying NULL,
  "k8s_role_name" character varying NULL,
  PRIMARY KEY ("id")
);
-- Create "jwt_keys" table
CREATE TABLE IF NOT EXISTS "jwt_keys" (
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "label" character varying NOT NULL,
  "private_key" bytea NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "oauth2_codes" table
CREATE TABLE IF NOT EXISTS "oauth2_codes" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "auth_code" character varying NOT NULL,
  "client_id" character varying NOT NULL,
  "scope" character varying NOT NULL,
  "expires_at" timestamptz NOT NULL,
  "revoked" boolean NOT NULL DEFAULT false,
  "user_oauth2_codes" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "oauth2_codes_auth_code_key" to table: "oauth2_codes"
CREATE UNIQUE INDEX IF NOT EXISTS "oauth2_codes_auth_code_key" ON "oauth2_codes" ("auth_code");
-- Create "oauth2_tokens" table
CREATE TABLE IF NOT EXISTS "oauth2_tokens" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "access_token" character varying NOT NULL,
  "refresh_token" character varying NOT NULL,
  "client_id" character varying NOT NULL,
  "expires_at" timestamptz NOT NULL,
  "revoked" boolean NOT NULL DEFAULT false,
  "scope" character varying NOT NULL,
  "device_info" character varying NULL,
  "user_oauth2_tokens" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "oauth2_tokens_access_token_key" to table: "oauth2_tokens"
CREATE UNIQUE INDEX IF NOT EXISTS "oauth2_tokens_access_token_key" ON "oauth2_tokens" ("access_token");
-- Create index "oauth2_tokens_refresh_token_key" to table: "oauth2_tokens"
CREATE UNIQUE INDEX IF NOT EXISTS "oauth2_tokens_refresh_token_key" ON "oauth2_tokens" ("refresh_token");
-- Create "permissions" table
CREATE TABLE IF NOT EXISTS "permissions" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "action" character varying NOT NULL,
  "resource_type" character varying NOT NULL,
  "resource_selector" jsonb NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "projects" table
CREATE TABLE IF NOT EXISTS "projects" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "kubernetes_name" character varying NOT NULL,
  "name" character varying NOT NULL,
  "description" character varying NULL,
  "status" character varying NOT NULL DEFAULT 'active',
  "kubernetes_secret" character varying NOT NULL,
  "default_environment_id" uuid NULL,
  "team_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "projects_kubernetes_name_key" to table: "projects"
CREATE UNIQUE INDEX IF NOT EXISTS "projects_kubernetes_name_key" ON "projects" ("kubernetes_name");
-- Create "registries" table
CREATE TABLE IF NOT EXISTS "registries" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "host" character varying NOT NULL,
  "kubernetes_secret" character varying NULL,
  "is_default" boolean NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "s3_sources" table
CREATE TABLE IF NOT EXISTS "s3_sources" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "name" character varying NOT NULL,
  "endpoint" character varying NOT NULL,
  "region" character varying NOT NULL,
  "force_path_style" boolean NOT NULL DEFAULT true,
  "kubernetes_secret" character varying NOT NULL,
  "team_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "services" table
CREATE TABLE IF NOT EXISTS "services" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "type" character varying NOT NULL,
  "kubernetes_name" character varying NOT NULL,
  "name" character varying NOT NULL,
  "description" character varying NULL,
  "database" character varying NULL,
  "database_version" character varying NULL,
  "git_repository_owner" character varying NULL,
  "git_repository" character varying NULL,
  "kubernetes_secret" character varying NOT NULL,
  "environment_id" uuid NOT NULL,
  "github_installation_id" bigint NULL,
  "current_deployment_id" uuid NULL,
  PRIMARY KEY ("id")
);
-- Create index "services_kubernetes_name_key" to table: "services"
CREATE UNIQUE INDEX IF NOT EXISTS "services_kubernetes_name_key" ON "services" ("kubernetes_name");
-- Create "service_configs" table
CREATE TABLE IF NOT EXISTS "service_configs" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "builder" character varying NOT NULL,
  "icon" character varying NOT NULL,
  "dockerfile_path" character varying NULL,
  "dockerfile_context" character varying NULL,
  "railpack_provider" character varying NULL,
  "railpack_framework" character varying NULL,
  "git_branch" character varying NULL,
  "git_tag" character varying NULL,
  "hosts" jsonb NULL,
  "ports" jsonb NULL,
  "replicas" integer NOT NULL DEFAULT 2,
  "auto_deploy" boolean NOT NULL DEFAULT false,
  "run_command" character varying NULL,
  "is_public" boolean NOT NULL DEFAULT false,
  "image" character varying NULL,
  "definition_version" character varying NULL,
  "database_config" jsonb NULL,
  "s3_backup_bucket" character varying NULL,
  "s3_backup_source_id" uuid NULL,
  "service_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "service_configs_service_id_key" to table: "service_configs"
CREATE UNIQUE INDEX IF NOT EXISTS "service_configs_service_id_key" ON "service_configs" ("service_id");
-- Create "system_settings" table
CREATE TABLE IF NOT EXISTS "system_settings" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "wildcard_base_url" character varying NULL,
  "buildkit_settings" jsonb NULL,
  PRIMARY KEY ("id")
);
-- Create "teams" table
CREATE TABLE IF NOT EXISTS "teams" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "kubernetes_name" character varying NOT NULL,
  "name" character varying NOT NULL,
  "namespace" character varying NOT NULL,
  "kubernetes_secret" character varying NOT NULL,
  "description" character varying NULL,
  PRIMARY KEY ("id")
);
-- Create index "teams_kubernetes_name_key" to table: "teams"
CREATE UNIQUE INDEX IF NOT EXISTS "teams_kubernetes_name_key" ON "teams" ("kubernetes_name");
-- Create index "teams_namespace_key" to table: "teams"
CREATE UNIQUE INDEX IF NOT EXISTS "teams_namespace_key" ON "teams" ("namespace");
-- Create "users" table
CREATE TABLE IF NOT EXISTS "users" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "email" character varying NOT NULL,
  "password_hash" character varying NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "users_email_key" to table: "users"
CREATE UNIQUE INDEX IF NOT EXISTS "users_email_key" ON "users" ("email");
-- Create "variable_references" table
CREATE TABLE IF NOT EXISTS "variable_references" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "target_name" character varying NOT NULL,
  "sources" jsonb NOT NULL,
  "value_template" character varying NOT NULL,
  "error" character varying NULL,
  "target_service_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create index "variablereference_target_service_id_target_name" to table: "variable_references"
CREATE UNIQUE INDEX IF NOT EXISTS "variablereference_target_service_id_target_name" ON "variable_references" ("target_service_id", "target_name");
-- Create "webhooks" table
CREATE TABLE IF NOT EXISTS "webhooks" (
  "id" uuid NOT NULL,
  "created_at" timestamptz NOT NULL,
  "updated_at" timestamptz NOT NULL,
  "url" character varying NOT NULL,
  "type" character varying NOT NULL,
  "events" jsonb NOT NULL,
  "project_id" uuid NULL,
  "team_id" uuid NOT NULL,
  PRIMARY KEY ("id")
);
-- Create "group_permissions" table
CREATE TABLE IF NOT EXISTS "group_permissions" (
  "group_id" uuid NOT NULL,
  "permission_id" uuid NOT NULL,
  PRIMARY KEY ("group_id", "permission_id")
);
-- Create "user_groups" table
CREATE TABLE IF NOT EXISTS "user_groups" (
  "user_id" uuid NOT NULL,
  "group_id" uuid NOT NULL,
  PRIMARY KEY ("user_id", "group_id")
);
-- Create "user_teams" table
CREATE TABLE IF NOT EXISTS "user_teams" (
  "user_id" uuid NOT NULL,
  "team_id" uuid NOT NULL,
  PRIMARY KEY ("user_id", "team_id")
);
-- Modify "deployments" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'deployments_services_deployments'
    ) THEN
        ALTER TABLE "deployments" ADD
        CONSTRAINT "deployments_services_deployments" FOREIGN KEY ("service_id") REFERENCES "services" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "environments" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'environments_projects_environments'
    ) THEN
        ALTER TABLE "environments" ADD
        CONSTRAINT "environments_projects_environments" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "github_apps" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'github_apps_users_created_by'
    ) THEN
        ALTER TABLE "github_apps" ADD
        CONSTRAINT "github_apps_users_created_by" FOREIGN KEY ("created_by") REFERENCES "users" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "github_installations" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'github_installations_github_apps_installations'
    ) THEN
        ALTER TABLE "github_installations" ADD
        CONSTRAINT "github_installations_github_apps_installations" FOREIGN KEY ("github_app_id") REFERENCES "github_apps" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "oauth2_codes" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'oauth2_codes_users_oauth2_codes'
    ) THEN
        ALTER TABLE "oauth2_codes" ADD
        CONSTRAINT "oauth2_codes_users_oauth2_codes" FOREIGN KEY ("user_oauth2_codes") REFERENCES "users" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
    END IF;
END $$;
-- Modify "oauth2_tokens" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'oauth2_tokens_users_oauth2_tokens'
    ) THEN
        ALTER TABLE "oauth2_tokens" ADD
        CONSTRAINT "oauth2_tokens_users_oauth2_tokens" FOREIGN KEY ("user_oauth2_tokens") REFERENCES "users" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
    END IF;
END $$;
-- Modify "projects" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'projects_environments_project_default'
    ) THEN
        ALTER TABLE "projects" ADD
        CONSTRAINT "projects_environments_project_default" FOREIGN KEY ("default_environment_id") REFERENCES "environments" ("id") ON UPDATE NO ACTION ON DELETE SET NULL;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'projects_teams_projects'
    ) THEN
        ALTER TABLE "projects" ADD
        CONSTRAINT "projects_teams_projects" FOREIGN KEY ("team_id") REFERENCES "teams" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
    END IF;
END $$;
-- Modify "s3_sources" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 's3_sources_teams_s3_sources'
    ) THEN
        ALTER TABLE "s3_sources" ADD
        CONSTRAINT "s3_sources_teams_s3_sources" FOREIGN KEY ("team_id") REFERENCES "teams" ("id") ON UPDATE NO ACTION ON DELETE NO ACTION;
    END IF;
END $$;
-- Modify "services" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'services_deployments_current_deployment'
    ) THEN
        ALTER TABLE "services" ADD
        CONSTRAINT "services_deployments_current_deployment" FOREIGN KEY ("current_deployment_id") REFERENCES "deployments" ("id") ON UPDATE NO ACTION ON DELETE SET NULL;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'services_environments_services'
    ) THEN
        ALTER TABLE "services" ADD
        CONSTRAINT "services_environments_services" FOREIGN KEY ("environment_id") REFERENCES "environments" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'services_github_installations_services'
    ) THEN
        ALTER TABLE "services" ADD
        CONSTRAINT "services_github_installations_services" FOREIGN KEY ("github_installation_id") REFERENCES "github_installations" ("id") ON UPDATE NO ACTION ON DELETE SET NULL;
    END IF;
END $$;
-- Modify "service_configs" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'service_configs_s3_sources_service_backup_source'
    ) THEN
        ALTER TABLE "service_configs" ADD
        CONSTRAINT "service_configs_s3_sources_service_backup_source" FOREIGN KEY ("s3_backup_source_id") REFERENCES "s3_sources" ("id") ON UPDATE NO ACTION ON DELETE SET NULL;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'service_configs_services_service_config'
    ) THEN
        ALTER TABLE "service_configs" ADD
        CONSTRAINT "service_configs_services_service_config" FOREIGN KEY ("service_id") REFERENCES "services" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "variable_references" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'variable_references_services_variable_references'
    ) THEN
        ALTER TABLE "variable_references" ADD
        CONSTRAINT "variable_references_services_variable_references" FOREIGN KEY ("target_service_id") REFERENCES "services" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "webhooks" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'webhooks_projects_project_webhooks'
    ) THEN
        ALTER TABLE "webhooks" ADD
        CONSTRAINT "webhooks_projects_project_webhooks" FOREIGN KEY ("project_id") REFERENCES "projects" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'webhooks_teams_team_webhooks'
    ) THEN
        ALTER TABLE "webhooks" ADD
        CONSTRAINT "webhooks_teams_team_webhooks" FOREIGN KEY ("team_id") REFERENCES "teams" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "group_permissions" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'group_permissions_group_id'
    ) THEN
        ALTER TABLE "group_permissions" ADD
        CONSTRAINT "group_permissions_group_id" FOREIGN KEY ("group_id") REFERENCES "groups" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'group_permissions_permission_id'
    ) THEN
        ALTER TABLE "group_permissions" ADD
        CONSTRAINT "group_permissions_permission_id" FOREIGN KEY ("permission_id") REFERENCES "permissions" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "user_groups" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'user_groups_group_id'
    ) THEN
        ALTER TABLE "user_groups" ADD
        CONSTRAINT "user_groups_group_id" FOREIGN KEY ("group_id") REFERENCES "groups" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'user_groups_user_id'
    ) THEN
        ALTER TABLE "user_groups" ADD
        CONSTRAINT "user_groups_user_id" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;
-- Modify "user_teams" table
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'user_teams_team_id'
    ) THEN
        ALTER TABLE "user_teams" ADD
        CONSTRAINT "user_teams_team_id" FOREIGN KEY ("team_id") REFERENCES "teams" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint WHERE conname = 'user_teams_user_id'
    ) THEN
        ALTER TABLE "user_teams" ADD
        CONSTRAINT "user_teams_user_id" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON UPDATE NO ACTION ON DELETE CASCADE;
    END IF;
END $$;