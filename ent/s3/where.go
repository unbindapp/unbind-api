// Code generated by ent, DO NOT EDIT.

package s3

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/unbindapp/unbind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldName, v))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldEndpoint, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldRegion, v))
}

// ForcePathStyle applies equality check predicate on the "force_path_style" field. It's identical to ForcePathStyleEQ.
func ForcePathStyle(v bool) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldForcePathStyle, v))
}

// KubernetesSecret applies equality check predicate on the "kubernetes_secret" field. It's identical to KubernetesSecretEQ.
func KubernetesSecret(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldKubernetesSecret, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldTeamID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.S3 {
	return predicate.S3(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldContainsFold(FieldName, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.S3 {
	return predicate.S3(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldContainsFold(FieldEndpoint, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.S3 {
	return predicate.S3(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldContainsFold(FieldRegion, v))
}

// ForcePathStyleEQ applies the EQ predicate on the "force_path_style" field.
func ForcePathStyleEQ(v bool) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldForcePathStyle, v))
}

// ForcePathStyleNEQ applies the NEQ predicate on the "force_path_style" field.
func ForcePathStyleNEQ(v bool) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldForcePathStyle, v))
}

// KubernetesSecretEQ applies the EQ predicate on the "kubernetes_secret" field.
func KubernetesSecretEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretNEQ applies the NEQ predicate on the "kubernetes_secret" field.
func KubernetesSecretNEQ(v string) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldKubernetesSecret, v))
}

// KubernetesSecretIn applies the In predicate on the "kubernetes_secret" field.
func KubernetesSecretIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretNotIn applies the NotIn predicate on the "kubernetes_secret" field.
func KubernetesSecretNotIn(vs ...string) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldKubernetesSecret, vs...))
}

// KubernetesSecretGT applies the GT predicate on the "kubernetes_secret" field.
func KubernetesSecretGT(v string) predicate.S3 {
	return predicate.S3(sql.FieldGT(FieldKubernetesSecret, v))
}

// KubernetesSecretGTE applies the GTE predicate on the "kubernetes_secret" field.
func KubernetesSecretGTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldGTE(FieldKubernetesSecret, v))
}

// KubernetesSecretLT applies the LT predicate on the "kubernetes_secret" field.
func KubernetesSecretLT(v string) predicate.S3 {
	return predicate.S3(sql.FieldLT(FieldKubernetesSecret, v))
}

// KubernetesSecretLTE applies the LTE predicate on the "kubernetes_secret" field.
func KubernetesSecretLTE(v string) predicate.S3 {
	return predicate.S3(sql.FieldLTE(FieldKubernetesSecret, v))
}

// KubernetesSecretContains applies the Contains predicate on the "kubernetes_secret" field.
func KubernetesSecretContains(v string) predicate.S3 {
	return predicate.S3(sql.FieldContains(FieldKubernetesSecret, v))
}

// KubernetesSecretHasPrefix applies the HasPrefix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasPrefix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasPrefix(FieldKubernetesSecret, v))
}

// KubernetesSecretHasSuffix applies the HasSuffix predicate on the "kubernetes_secret" field.
func KubernetesSecretHasSuffix(v string) predicate.S3 {
	return predicate.S3(sql.FieldHasSuffix(FieldKubernetesSecret, v))
}

// KubernetesSecretEqualFold applies the EqualFold predicate on the "kubernetes_secret" field.
func KubernetesSecretEqualFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldEqualFold(FieldKubernetesSecret, v))
}

// KubernetesSecretContainsFold applies the ContainsFold predicate on the "kubernetes_secret" field.
func KubernetesSecretContainsFold(v string) predicate.S3 {
	return predicate.S3(sql.FieldContainsFold(FieldKubernetesSecret, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...uuid.UUID) predicate.S3 {
	return predicate.S3(sql.FieldNotIn(FieldTeamID, vs...))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.S3 {
	return predicate.S3(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.S3 {
	return predicate.S3(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceBackupSource applies the HasEdge predicate on the "service_backup_source" edge.
func HasServiceBackupSource() predicate.S3 {
	return predicate.S3(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceBackupSourceTable, ServiceBackupSourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceBackupSourceWith applies the HasEdge predicate on the "service_backup_source" edge with a given conditions (other predicates).
func HasServiceBackupSourceWith(preds ...predicate.ServiceConfig) predicate.S3 {
	return predicate.S3(func(s *sql.Selector) {
		step := newServiceBackupSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3) predicate.S3 {
	return predicate.S3(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3) predicate.S3 {
	return predicate.S3(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3) predicate.S3 {
	return predicate.S3(sql.NotPredicates(p))
}
