// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/unbindapp/unbind-api/ent/predicate"
	"github.com/unbindapp/unbind-api/ent/pvcmetadata"
)

// PVCMetadataUpdate is the builder for updating PVCMetadata entities.
type PVCMetadataUpdate struct {
	config
	hooks     []Hook
	mutation  *PVCMetadataMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PVCMetadataUpdate builder.
func (pmu *PVCMetadataUpdate) Where(ps ...predicate.PVCMetadata) *PVCMetadataUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *PVCMetadataUpdate) SetUpdatedAt(t time.Time) *PVCMetadataUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// SetPvcID sets the "pvc_id" field.
func (pmu *PVCMetadataUpdate) SetPvcID(s string) *PVCMetadataUpdate {
	pmu.mutation.SetPvcID(s)
	return pmu
}

// SetNillablePvcID sets the "pvc_id" field if the given value is not nil.
func (pmu *PVCMetadataUpdate) SetNillablePvcID(s *string) *PVCMetadataUpdate {
	if s != nil {
		pmu.SetPvcID(*s)
	}
	return pmu
}

// SetName sets the "name" field.
func (pmu *PVCMetadataUpdate) SetName(s string) *PVCMetadataUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmu *PVCMetadataUpdate) SetNillableName(s *string) *PVCMetadataUpdate {
	if s != nil {
		pmu.SetName(*s)
	}
	return pmu
}

// ClearName clears the value of the "name" field.
func (pmu *PVCMetadataUpdate) ClearName() *PVCMetadataUpdate {
	pmu.mutation.ClearName()
	return pmu
}

// SetDescription sets the "description" field.
func (pmu *PVCMetadataUpdate) SetDescription(s string) *PVCMetadataUpdate {
	pmu.mutation.SetDescription(s)
	return pmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmu *PVCMetadataUpdate) SetNillableDescription(s *string) *PVCMetadataUpdate {
	if s != nil {
		pmu.SetDescription(*s)
	}
	return pmu
}

// ClearDescription clears the value of the "description" field.
func (pmu *PVCMetadataUpdate) ClearDescription() *PVCMetadataUpdate {
	pmu.mutation.ClearDescription()
	return pmu
}

// Mutation returns the PVCMetadataMutation object of the builder.
func (pmu *PVCMetadataUpdate) Mutation() *PVCMetadataMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PVCMetadataUpdate) Save(ctx context.Context) (int, error) {
	pmu.defaults()
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PVCMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PVCMetadataUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PVCMetadataUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *PVCMetadataUpdate) defaults() {
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		v := pvcmetadata.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmu *PVCMetadataUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PVCMetadataUpdate {
	pmu.modifiers = append(pmu.modifiers, modifiers...)
	return pmu
}

func (pmu *PVCMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pvcmetadata.Table, pvcmetadata.Columns, sqlgraph.NewFieldSpec(pvcmetadata.FieldID, field.TypeUUID))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(pvcmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmu.mutation.PvcID(); ok {
		_spec.SetField(pvcmetadata.FieldPvcID, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(pvcmetadata.FieldName, field.TypeString, value)
	}
	if pmu.mutation.NameCleared() {
		_spec.ClearField(pvcmetadata.FieldName, field.TypeString)
	}
	if value, ok := pmu.mutation.Description(); ok {
		_spec.SetField(pvcmetadata.FieldDescription, field.TypeString, value)
	}
	if pmu.mutation.DescriptionCleared() {
		_spec.ClearField(pvcmetadata.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(pmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pvcmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PVCMetadataUpdateOne is the builder for updating a single PVCMetadata entity.
type PVCMetadataUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PVCMetadataMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *PVCMetadataUpdateOne) SetUpdatedAt(t time.Time) *PVCMetadataUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// SetPvcID sets the "pvc_id" field.
func (pmuo *PVCMetadataUpdateOne) SetPvcID(s string) *PVCMetadataUpdateOne {
	pmuo.mutation.SetPvcID(s)
	return pmuo
}

// SetNillablePvcID sets the "pvc_id" field if the given value is not nil.
func (pmuo *PVCMetadataUpdateOne) SetNillablePvcID(s *string) *PVCMetadataUpdateOne {
	if s != nil {
		pmuo.SetPvcID(*s)
	}
	return pmuo
}

// SetName sets the "name" field.
func (pmuo *PVCMetadataUpdateOne) SetName(s string) *PVCMetadataUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmuo *PVCMetadataUpdateOne) SetNillableName(s *string) *PVCMetadataUpdateOne {
	if s != nil {
		pmuo.SetName(*s)
	}
	return pmuo
}

// ClearName clears the value of the "name" field.
func (pmuo *PVCMetadataUpdateOne) ClearName() *PVCMetadataUpdateOne {
	pmuo.mutation.ClearName()
	return pmuo
}

// SetDescription sets the "description" field.
func (pmuo *PVCMetadataUpdateOne) SetDescription(s string) *PVCMetadataUpdateOne {
	pmuo.mutation.SetDescription(s)
	return pmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmuo *PVCMetadataUpdateOne) SetNillableDescription(s *string) *PVCMetadataUpdateOne {
	if s != nil {
		pmuo.SetDescription(*s)
	}
	return pmuo
}

// ClearDescription clears the value of the "description" field.
func (pmuo *PVCMetadataUpdateOne) ClearDescription() *PVCMetadataUpdateOne {
	pmuo.mutation.ClearDescription()
	return pmuo
}

// Mutation returns the PVCMetadataMutation object of the builder.
func (pmuo *PVCMetadataUpdateOne) Mutation() *PVCMetadataMutation {
	return pmuo.mutation
}

// Where appends a list predicates to the PVCMetadataUpdate builder.
func (pmuo *PVCMetadataUpdateOne) Where(ps ...predicate.PVCMetadata) *PVCMetadataUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PVCMetadataUpdateOne) Select(field string, fields ...string) *PVCMetadataUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PVCMetadata entity.
func (pmuo *PVCMetadataUpdateOne) Save(ctx context.Context) (*PVCMetadata, error) {
	pmuo.defaults()
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PVCMetadataUpdateOne) SaveX(ctx context.Context) *PVCMetadata {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PVCMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PVCMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *PVCMetadataUpdateOne) defaults() {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		v := pvcmetadata.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmuo *PVCMetadataUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PVCMetadataUpdateOne {
	pmuo.modifiers = append(pmuo.modifiers, modifiers...)
	return pmuo
}

func (pmuo *PVCMetadataUpdateOne) sqlSave(ctx context.Context) (_node *PVCMetadata, err error) {
	_spec := sqlgraph.NewUpdateSpec(pvcmetadata.Table, pvcmetadata.Columns, sqlgraph.NewFieldSpec(pvcmetadata.FieldID, field.TypeUUID))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PVCMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pvcmetadata.FieldID)
		for _, f := range fields {
			if !pvcmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pvcmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pvcmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmuo.mutation.PvcID(); ok {
		_spec.SetField(pvcmetadata.FieldPvcID, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(pvcmetadata.FieldName, field.TypeString, value)
	}
	if pmuo.mutation.NameCleared() {
		_spec.ClearField(pvcmetadata.FieldName, field.TypeString)
	}
	if value, ok := pmuo.mutation.Description(); ok {
		_spec.SetField(pvcmetadata.FieldDescription, field.TypeString, value)
	}
	if pmuo.mutation.DescriptionCleared() {
		_spec.ClearField(pvcmetadata.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(pmuo.modifiers...)
	_node = &PVCMetadata{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pvcmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
