// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_promapi

import (
	context "context"

	model "github.com/prometheus/common/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
)

// PromAPIInterfaceMock is an autogenerated mock type for the PromAPIInterface type
type PromAPIInterfaceMock struct {
	mock.Mock
}

type PromAPIInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PromAPIInterfaceMock) EXPECT() *PromAPIInterfaceMock_Expecter {
	return &PromAPIInterfaceMock_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, query, ts, opts
func (_m *PromAPIInterfaceMock) Query(ctx context.Context, query string, ts time.Time, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query, ts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 model.Value
	var r1 v1.Warnings
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...v1.Option) (model.Value, v1.Warnings, error)); ok {
		return rf(ctx, query, ts, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...v1.Option) model.Value); ok {
		r0 = rf(ctx, query, ts, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, ...v1.Option) v1.Warnings); ok {
		r1 = rf(ctx, query, ts, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(v1.Warnings)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time, ...v1.Option) error); ok {
		r2 = rf(ctx, query, ts, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PromAPIInterfaceMock_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type PromAPIInterfaceMock_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - ts time.Time
//   - opts ...v1.Option
func (_e *PromAPIInterfaceMock_Expecter) Query(ctx interface{}, query interface{}, ts interface{}, opts ...interface{}) *PromAPIInterfaceMock_Query_Call {
	return &PromAPIInterfaceMock_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query, ts}, opts...)...)}
}

func (_c *PromAPIInterfaceMock_Query_Call) Run(run func(ctx context.Context, query string, ts time.Time, opts ...v1.Option)) *PromAPIInterfaceMock_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v1.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v1.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *PromAPIInterfaceMock_Query_Call) Return(_a0 model.Value, _a1 v1.Warnings, _a2 error) *PromAPIInterfaceMock_Query_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PromAPIInterfaceMock_Query_Call) RunAndReturn(run func(context.Context, string, time.Time, ...v1.Option) (model.Value, v1.Warnings, error)) *PromAPIInterfaceMock_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRange provides a mock function with given fields: ctx, query, r, opts
func (_m *PromAPIInterfaceMock) QueryRange(ctx context.Context, query string, r v1.Range, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRange")
	}

	var r0 model.Value
	var r1 v1.Warnings
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.Range, ...v1.Option) (model.Value, v1.Warnings, error)); ok {
		return rf(ctx, query, r, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.Range, ...v1.Option) model.Value); ok {
		r0 = rf(ctx, query, r, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.Range, ...v1.Option) v1.Warnings); ok {
		r1 = rf(ctx, query, r, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(v1.Warnings)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, v1.Range, ...v1.Option) error); ok {
		r2 = rf(ctx, query, r, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PromAPIInterfaceMock_QueryRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRange'
type PromAPIInterfaceMock_QueryRange_Call struct {
	*mock.Call
}

// QueryRange is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - r v1.Range
//   - opts ...v1.Option
func (_e *PromAPIInterfaceMock_Expecter) QueryRange(ctx interface{}, query interface{}, r interface{}, opts ...interface{}) *PromAPIInterfaceMock_QueryRange_Call {
	return &PromAPIInterfaceMock_QueryRange_Call{Call: _e.mock.On("QueryRange",
		append([]interface{}{ctx, query, r}, opts...)...)}
}

func (_c *PromAPIInterfaceMock_QueryRange_Call) Run(run func(ctx context.Context, query string, r v1.Range, opts ...v1.Option)) *PromAPIInterfaceMock_QueryRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v1.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v1.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(v1.Range), variadicArgs...)
	})
	return _c
}

func (_c *PromAPIInterfaceMock_QueryRange_Call) Return(_a0 model.Value, _a1 v1.Warnings, _a2 error) *PromAPIInterfaceMock_QueryRange_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PromAPIInterfaceMock_QueryRange_Call) RunAndReturn(run func(context.Context, string, v1.Range, ...v1.Option) (model.Value, v1.Warnings, error)) *PromAPIInterfaceMock_QueryRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewPromAPIInterfaceMock creates a new instance of PromAPIInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPromAPIInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PromAPIInterfaceMock {
	mock := &PromAPIInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
