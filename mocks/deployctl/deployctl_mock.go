// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_deployctl

import (
	context "context"

	ent "github.com/unbindapp/unbind-api/ent"
	deployctl "github.com/unbindapp/unbind-api/internal/deployctl"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DeploymentControllerMock is an autogenerated mock type for the DeploymentControllerInterface type
type DeploymentControllerMock struct {
	mock.Mock
}

type DeploymentControllerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DeploymentControllerMock) EXPECT() *DeploymentControllerMock_Expecter {
	return &DeploymentControllerMock_Expecter{mock: &_m.Mock}
}

// AreDependenciesReady provides a mock function with given fields: ctx, req
func (_m *DeploymentControllerMock) AreDependenciesReady(ctx context.Context, req deployctl.DeploymentJobRequest) bool {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AreDependenciesReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, deployctl.DeploymentJobRequest) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeploymentControllerMock_AreDependenciesReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreDependenciesReady'
type DeploymentControllerMock_AreDependenciesReady_Call struct {
	*mock.Call
}

// AreDependenciesReady is a helper method to define mock.On call
//   - ctx context.Context
//   - req deployctl.DeploymentJobRequest
func (_e *DeploymentControllerMock_Expecter) AreDependenciesReady(ctx interface{}, req interface{}) *DeploymentControllerMock_AreDependenciesReady_Call {
	return &DeploymentControllerMock_AreDependenciesReady_Call{Call: _e.mock.On("AreDependenciesReady", ctx, req)}
}

func (_c *DeploymentControllerMock_AreDependenciesReady_Call) Run(run func(ctx context.Context, req deployctl.DeploymentJobRequest)) *DeploymentControllerMock_AreDependenciesReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(deployctl.DeploymentJobRequest))
	})
	return _c
}

func (_c *DeploymentControllerMock_AreDependenciesReady_Call) Return(_a0 bool) *DeploymentControllerMock_AreDependenciesReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentControllerMock_AreDependenciesReady_Call) RunAndReturn(run func(context.Context, deployctl.DeploymentJobRequest) bool) *DeploymentControllerMock_AreDependenciesReady_Call {
	_c.Call.Return(run)
	return _c
}

// CancelExistingJobs provides a mock function with given fields: ctx, serviceID
func (_m *DeploymentControllerMock) CancelExistingJobs(ctx context.Context, serviceID uuid.UUID) error {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for CancelExistingJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeploymentControllerMock_CancelExistingJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExistingJobs'
type DeploymentControllerMock_CancelExistingJobs_Call struct {
	*mock.Call
}

// CancelExistingJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID uuid.UUID
func (_e *DeploymentControllerMock_Expecter) CancelExistingJobs(ctx interface{}, serviceID interface{}) *DeploymentControllerMock_CancelExistingJobs_Call {
	return &DeploymentControllerMock_CancelExistingJobs_Call{Call: _e.mock.On("CancelExistingJobs", ctx, serviceID)}
}

func (_c *DeploymentControllerMock_CancelExistingJobs_Call) Run(run func(ctx context.Context, serviceID uuid.UUID)) *DeploymentControllerMock_CancelExistingJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DeploymentControllerMock_CancelExistingJobs_Call) Return(_a0 error) *DeploymentControllerMock_CancelExistingJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentControllerMock_CancelExistingJobs_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *DeploymentControllerMock_CancelExistingJobs_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueDependentDeployment provides a mock function with given fields: ctx, req
func (_m *DeploymentControllerMock) EnqueueDependentDeployment(ctx context.Context, req deployctl.DeploymentJobRequest) (*ent.Deployment, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueDependentDeployment")
	}

	var r0 *ent.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, deployctl.DeploymentJobRequest) (*ent.Deployment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, deployctl.DeploymentJobRequest) *ent.Deployment); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, deployctl.DeploymentJobRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentControllerMock_EnqueueDependentDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDependentDeployment'
type DeploymentControllerMock_EnqueueDependentDeployment_Call struct {
	*mock.Call
}

// EnqueueDependentDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - req deployctl.DeploymentJobRequest
func (_e *DeploymentControllerMock_Expecter) EnqueueDependentDeployment(ctx interface{}, req interface{}) *DeploymentControllerMock_EnqueueDependentDeployment_Call {
	return &DeploymentControllerMock_EnqueueDependentDeployment_Call{Call: _e.mock.On("EnqueueDependentDeployment", ctx, req)}
}

func (_c *DeploymentControllerMock_EnqueueDependentDeployment_Call) Run(run func(ctx context.Context, req deployctl.DeploymentJobRequest)) *DeploymentControllerMock_EnqueueDependentDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(deployctl.DeploymentJobRequest))
	})
	return _c
}

func (_c *DeploymentControllerMock_EnqueueDependentDeployment_Call) Return(_a0 *ent.Deployment, _a1 error) *DeploymentControllerMock_EnqueueDependentDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentControllerMock_EnqueueDependentDeployment_Call) RunAndReturn(run func(context.Context, deployctl.DeploymentJobRequest) (*ent.Deployment, error)) *DeploymentControllerMock_EnqueueDependentDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueDeploymentJob provides a mock function with given fields: ctx, req
func (_m *DeploymentControllerMock) EnqueueDeploymentJob(ctx context.Context, req deployctl.DeploymentJobRequest) (*ent.Deployment, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueDeploymentJob")
	}

	var r0 *ent.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, deployctl.DeploymentJobRequest) (*ent.Deployment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, deployctl.DeploymentJobRequest) *ent.Deployment); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, deployctl.DeploymentJobRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentControllerMock_EnqueueDeploymentJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeploymentJob'
type DeploymentControllerMock_EnqueueDeploymentJob_Call struct {
	*mock.Call
}

// EnqueueDeploymentJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req deployctl.DeploymentJobRequest
func (_e *DeploymentControllerMock_Expecter) EnqueueDeploymentJob(ctx interface{}, req interface{}) *DeploymentControllerMock_EnqueueDeploymentJob_Call {
	return &DeploymentControllerMock_EnqueueDeploymentJob_Call{Call: _e.mock.On("EnqueueDeploymentJob", ctx, req)}
}

func (_c *DeploymentControllerMock_EnqueueDeploymentJob_Call) Run(run func(ctx context.Context, req deployctl.DeploymentJobRequest)) *DeploymentControllerMock_EnqueueDeploymentJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(deployctl.DeploymentJobRequest))
	})
	return _c
}

func (_c *DeploymentControllerMock_EnqueueDeploymentJob_Call) Return(job *ent.Deployment, err error) *DeploymentControllerMock_EnqueueDeploymentJob_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *DeploymentControllerMock_EnqueueDeploymentJob_Call) RunAndReturn(run func(context.Context, deployctl.DeploymentJobRequest) (*ent.Deployment, error)) *DeploymentControllerMock_EnqueueDeploymentJob_Call {
	_c.Call.Return(run)
	return _c
}

// PopulateBuildEnvironment provides a mock function with given fields: ctx, serviceID, gitTag
func (_m *DeploymentControllerMock) PopulateBuildEnvironment(ctx context.Context, serviceID uuid.UUID, gitTag *string) (map[string]string, error) {
	ret := _m.Called(ctx, serviceID, gitTag)

	if len(ret) == 0 {
		panic("no return value specified for PopulateBuildEnvironment")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string) (map[string]string, error)); ok {
		return rf(ctx, serviceID, gitTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string) map[string]string); ok {
		r0 = rf(ctx, serviceID, gitTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *string) error); ok {
		r1 = rf(ctx, serviceID, gitTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentControllerMock_PopulateBuildEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopulateBuildEnvironment'
type DeploymentControllerMock_PopulateBuildEnvironment_Call struct {
	*mock.Call
}

// PopulateBuildEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID uuid.UUID
//   - gitTag *string
func (_e *DeploymentControllerMock_Expecter) PopulateBuildEnvironment(ctx interface{}, serviceID interface{}, gitTag interface{}) *DeploymentControllerMock_PopulateBuildEnvironment_Call {
	return &DeploymentControllerMock_PopulateBuildEnvironment_Call{Call: _e.mock.On("PopulateBuildEnvironment", ctx, serviceID, gitTag)}
}

func (_c *DeploymentControllerMock_PopulateBuildEnvironment_Call) Run(run func(ctx context.Context, serviceID uuid.UUID, gitTag *string)) *DeploymentControllerMock_PopulateBuildEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*string))
	})
	return _c
}

func (_c *DeploymentControllerMock_PopulateBuildEnvironment_Call) Return(_a0 map[string]string, _a1 error) *DeploymentControllerMock_PopulateBuildEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeploymentControllerMock_PopulateBuildEnvironment_Call) RunAndReturn(run func(context.Context, uuid.UUID, *string) (map[string]string, error)) *DeploymentControllerMock_PopulateBuildEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// StartAsync provides a mock function with no fields
func (_m *DeploymentControllerMock) StartAsync() {
	_m.Called()
}

// DeploymentControllerMock_StartAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAsync'
type DeploymentControllerMock_StartAsync_Call struct {
	*mock.Call
}

// StartAsync is a helper method to define mock.On call
func (_e *DeploymentControllerMock_Expecter) StartAsync() *DeploymentControllerMock_StartAsync_Call {
	return &DeploymentControllerMock_StartAsync_Call{Call: _e.mock.On("StartAsync")}
}

func (_c *DeploymentControllerMock_StartAsync_Call) Run(run func()) *DeploymentControllerMock_StartAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentControllerMock_StartAsync_Call) Return() *DeploymentControllerMock_StartAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeploymentControllerMock_StartAsync_Call) RunAndReturn(run func()) *DeploymentControllerMock_StartAsync_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *DeploymentControllerMock) Stop() {
	_m.Called()
}

// DeploymentControllerMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type DeploymentControllerMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *DeploymentControllerMock_Expecter) Stop() *DeploymentControllerMock_Stop_Call {
	return &DeploymentControllerMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *DeploymentControllerMock_Stop_Call) Run(run func()) *DeploymentControllerMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentControllerMock_Stop_Call) Return() *DeploymentControllerMock_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *DeploymentControllerMock_Stop_Call) RunAndReturn(run func()) *DeploymentControllerMock_Stop_Call {
	_c.Run(run)
	return _c
}

// SyncJobStatuses provides a mock function with given fields: ctx
func (_m *DeploymentControllerMock) SyncJobStatuses(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncJobStatuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeploymentControllerMock_SyncJobStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncJobStatuses'
type DeploymentControllerMock_SyncJobStatuses_Call struct {
	*mock.Call
}

// SyncJobStatuses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DeploymentControllerMock_Expecter) SyncJobStatuses(ctx interface{}) *DeploymentControllerMock_SyncJobStatuses_Call {
	return &DeploymentControllerMock_SyncJobStatuses_Call{Call: _e.mock.On("SyncJobStatuses", ctx)}
}

func (_c *DeploymentControllerMock_SyncJobStatuses_Call) Run(run func(ctx context.Context)) *DeploymentControllerMock_SyncJobStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DeploymentControllerMock_SyncJobStatuses_Call) Return(_a0 error) *DeploymentControllerMock_SyncJobStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentControllerMock_SyncJobStatuses_Call) RunAndReturn(run func(context.Context) error) *DeploymentControllerMock_SyncJobStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeploymentControllerMock creates a new instance of DeploymentControllerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentControllerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentControllerMock {
	mock := &DeploymentControllerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
