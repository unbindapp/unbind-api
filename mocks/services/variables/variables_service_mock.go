// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_services_variables

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/unbindapp/unbind-api/internal/models"

	uuid "github.com/google/uuid"
)

// VariablesServiceMock is an autogenerated mock type for the VariablesServiceInterface type
type VariablesServiceMock struct {
	mock.Mock
}

type VariablesServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VariablesServiceMock) EXPECT() *VariablesServiceMock_Expecter {
	return &VariablesServiceMock_Expecter{mock: &_m.Mock}
}

// DeleteVariablesByKey provides a mock function with given fields: ctx, userID, bearerToken, input, keys, referenceIDs
func (_m *VariablesServiceMock) DeleteVariablesByKey(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesJSONInput, keys []models.VariableDeleteInput, referenceIDs []uuid.UUID) (*models.VariableResponse, error) {
	ret := _m.Called(ctx, userID, bearerToken, input, keys, referenceIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVariablesByKey")
	}

	var r0 *models.VariableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.BaseVariablesJSONInput, []models.VariableDeleteInput, []uuid.UUID) (*models.VariableResponse, error)); ok {
		return rf(ctx, userID, bearerToken, input, keys, referenceIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.BaseVariablesJSONInput, []models.VariableDeleteInput, []uuid.UUID) *models.VariableResponse); ok {
		r0 = rf(ctx, userID, bearerToken, input, keys, referenceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VariableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.BaseVariablesJSONInput, []models.VariableDeleteInput, []uuid.UUID) error); ok {
		r1 = rf(ctx, userID, bearerToken, input, keys, referenceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_DeleteVariablesByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVariablesByKey'
type VariablesServiceMock_DeleteVariablesByKey_Call struct {
	*mock.Call
}

// DeleteVariablesByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - bearerToken string
//   - input models.BaseVariablesJSONInput
//   - keys []models.VariableDeleteInput
//   - referenceIDs []uuid.UUID
func (_e *VariablesServiceMock_Expecter) DeleteVariablesByKey(ctx interface{}, userID interface{}, bearerToken interface{}, input interface{}, keys interface{}, referenceIDs interface{}) *VariablesServiceMock_DeleteVariablesByKey_Call {
	return &VariablesServiceMock_DeleteVariablesByKey_Call{Call: _e.mock.On("DeleteVariablesByKey", ctx, userID, bearerToken, input, keys, referenceIDs)}
}

func (_c *VariablesServiceMock_DeleteVariablesByKey_Call) Run(run func(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesJSONInput, keys []models.VariableDeleteInput, referenceIDs []uuid.UUID)) *VariablesServiceMock_DeleteVariablesByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.BaseVariablesJSONInput), args[4].([]models.VariableDeleteInput), args[5].([]uuid.UUID))
	})
	return _c
}

func (_c *VariablesServiceMock_DeleteVariablesByKey_Call) Return(_a0 *models.VariableResponse, _a1 error) *VariablesServiceMock_DeleteVariablesByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_DeleteVariablesByKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.BaseVariablesJSONInput, []models.VariableDeleteInput, []uuid.UUID) (*models.VariableResponse, error)) *VariablesServiceMock_DeleteVariablesByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableVariableReferences provides a mock function with given fields: ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID
func (_m *VariablesServiceMock) GetAvailableVariableReferences(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, teamID uuid.UUID, projectID uuid.UUID, environmentID uuid.UUID, serviceID uuid.UUID) ([]models.AvailableVariableReference, error) {
	ret := _m.Called(ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableVariableReferences")
	}

	var r0 []models.AvailableVariableReference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID, uuid.UUID, uuid.UUID) ([]models.AvailableVariableReference, error)); ok {
		return rf(ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID, uuid.UUID, uuid.UUID) []models.AvailableVariableReference); ok {
		r0 = rf(ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AvailableVariableReference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_GetAvailableVariableReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableVariableReferences'
type VariablesServiceMock_GetAvailableVariableReferences_Call struct {
	*mock.Call
}

// GetAvailableVariableReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - bearerToken string
//   - teamID uuid.UUID
//   - projectID uuid.UUID
//   - environmentID uuid.UUID
//   - serviceID uuid.UUID
func (_e *VariablesServiceMock_Expecter) GetAvailableVariableReferences(ctx interface{}, requesterUserID interface{}, bearerToken interface{}, teamID interface{}, projectID interface{}, environmentID interface{}, serviceID interface{}) *VariablesServiceMock_GetAvailableVariableReferences_Call {
	return &VariablesServiceMock_GetAvailableVariableReferences_Call{Call: _e.mock.On("GetAvailableVariableReferences", ctx, requesterUserID, bearerToken, teamID, projectID, environmentID, serviceID)}
}

func (_c *VariablesServiceMock_GetAvailableVariableReferences_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, teamID uuid.UUID, projectID uuid.UUID, environmentID uuid.UUID, serviceID uuid.UUID)) *VariablesServiceMock_GetAvailableVariableReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(uuid.UUID), args[4].(uuid.UUID), args[5].(uuid.UUID), args[6].(uuid.UUID))
	})
	return _c
}

func (_c *VariablesServiceMock_GetAvailableVariableReferences_Call) Return(_a0 []models.AvailableVariableReference, _a1 error) *VariablesServiceMock_GetAvailableVariableReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_GetAvailableVariableReferences_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID, uuid.UUID, uuid.UUID) ([]models.AvailableVariableReference, error)) *VariablesServiceMock_GetAvailableVariableReferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariables provides a mock function with given fields: ctx, userID, bearerToken, input
func (_m *VariablesServiceMock) GetVariables(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesInput) (*models.VariableResponse, error) {
	ret := _m.Called(ctx, userID, bearerToken, input)

	if len(ret) == 0 {
		panic("no return value specified for GetVariables")
	}

	var r0 *models.VariableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.BaseVariablesInput) (*models.VariableResponse, error)); ok {
		return rf(ctx, userID, bearerToken, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, models.BaseVariablesInput) *models.VariableResponse); ok {
		r0 = rf(ctx, userID, bearerToken, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VariableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, models.BaseVariablesInput) error); ok {
		r1 = rf(ctx, userID, bearerToken, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_GetVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariables'
type VariablesServiceMock_GetVariables_Call struct {
	*mock.Call
}

// GetVariables is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - bearerToken string
//   - input models.BaseVariablesInput
func (_e *VariablesServiceMock_Expecter) GetVariables(ctx interface{}, userID interface{}, bearerToken interface{}, input interface{}) *VariablesServiceMock_GetVariables_Call {
	return &VariablesServiceMock_GetVariables_Call{Call: _e.mock.On("GetVariables", ctx, userID, bearerToken, input)}
}

func (_c *VariablesServiceMock_GetVariables_Call) Run(run func(ctx context.Context, userID uuid.UUID, bearerToken string, input models.BaseVariablesInput)) *VariablesServiceMock_GetVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(models.BaseVariablesInput))
	})
	return _c
}

func (_c *VariablesServiceMock_GetVariables_Call) Return(_a0 *models.VariableResponse, _a1 error) *VariablesServiceMock_GetVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_GetVariables_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, models.BaseVariablesInput) (*models.VariableResponse, error)) *VariablesServiceMock_GetVariables_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveAllReferences provides a mock function with given fields: ctx, serviceID
func (_m *VariablesServiceMock) ResolveAllReferences(ctx context.Context, serviceID uuid.UUID) (map[string]string, error) {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAllReferences")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (map[string]string, error)); ok {
		return rf(ctx, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) map[string]string); ok {
		r0 = rf(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_ResolveAllReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveAllReferences'
type VariablesServiceMock_ResolveAllReferences_Call struct {
	*mock.Call
}

// ResolveAllReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID uuid.UUID
func (_e *VariablesServiceMock_Expecter) ResolveAllReferences(ctx interface{}, serviceID interface{}) *VariablesServiceMock_ResolveAllReferences_Call {
	return &VariablesServiceMock_ResolveAllReferences_Call{Call: _e.mock.On("ResolveAllReferences", ctx, serviceID)}
}

func (_c *VariablesServiceMock_ResolveAllReferences_Call) Run(run func(ctx context.Context, serviceID uuid.UUID)) *VariablesServiceMock_ResolveAllReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *VariablesServiceMock_ResolveAllReferences_Call) Return(_a0 map[string]string, _a1 error) *VariablesServiceMock_ResolveAllReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_ResolveAllReferences_Call) RunAndReturn(run func(context.Context, uuid.UUID) (map[string]string, error)) *VariablesServiceMock_ResolveAllReferences_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveAvailableReferenceValue provides a mock function with given fields: ctx, requesterUserID, bearerToken, input
func (_m *VariablesServiceMock) ResolveAvailableReferenceValue(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, input *models.ResolveVariableReferenceInput) (string, error) {
	ret := _m.Called(ctx, requesterUserID, bearerToken, input)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAvailableReferenceValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *models.ResolveVariableReferenceInput) (string, error)); ok {
		return rf(ctx, requesterUserID, bearerToken, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *models.ResolveVariableReferenceInput) string); ok {
		r0 = rf(ctx, requesterUserID, bearerToken, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *models.ResolveVariableReferenceInput) error); ok {
		r1 = rf(ctx, requesterUserID, bearerToken, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_ResolveAvailableReferenceValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveAvailableReferenceValue'
type VariablesServiceMock_ResolveAvailableReferenceValue_Call struct {
	*mock.Call
}

// ResolveAvailableReferenceValue is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - bearerToken string
//   - input *models.ResolveVariableReferenceInput
func (_e *VariablesServiceMock_Expecter) ResolveAvailableReferenceValue(ctx interface{}, requesterUserID interface{}, bearerToken interface{}, input interface{}) *VariablesServiceMock_ResolveAvailableReferenceValue_Call {
	return &VariablesServiceMock_ResolveAvailableReferenceValue_Call{Call: _e.mock.On("ResolveAvailableReferenceValue", ctx, requesterUserID, bearerToken, input)}
}

func (_c *VariablesServiceMock_ResolveAvailableReferenceValue_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, input *models.ResolveVariableReferenceInput)) *VariablesServiceMock_ResolveAvailableReferenceValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*models.ResolveVariableReferenceInput))
	})
	return _c
}

func (_c *VariablesServiceMock_ResolveAvailableReferenceValue_Call) Return(_a0 string, _a1 error) *VariablesServiceMock_ResolveAvailableReferenceValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_ResolveAvailableReferenceValue_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, *models.ResolveVariableReferenceInput) (string, error)) *VariablesServiceMock_ResolveAvailableReferenceValue_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveSingleReference provides a mock function with given fields: ctx, requesterUserID, bearerToken, serviceID, referenceID
func (_m *VariablesServiceMock) ResolveSingleReference(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, serviceID uuid.UUID, referenceID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, requesterUserID, bearerToken, serviceID, referenceID)

	if len(ret) == 0 {
		panic("no return value specified for ResolveSingleReference")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID) (string, error)); ok {
		return rf(ctx, requesterUserID, bearerToken, serviceID, referenceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID) string); ok {
		r0 = rf(ctx, requesterUserID, bearerToken, serviceID, referenceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, requesterUserID, bearerToken, serviceID, referenceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_ResolveSingleReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveSingleReference'
type VariablesServiceMock_ResolveSingleReference_Call struct {
	*mock.Call
}

// ResolveSingleReference is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - bearerToken string
//   - serviceID uuid.UUID
//   - referenceID uuid.UUID
func (_e *VariablesServiceMock_Expecter) ResolveSingleReference(ctx interface{}, requesterUserID interface{}, bearerToken interface{}, serviceID interface{}, referenceID interface{}) *VariablesServiceMock_ResolveSingleReference_Call {
	return &VariablesServiceMock_ResolveSingleReference_Call{Call: _e.mock.On("ResolveSingleReference", ctx, requesterUserID, bearerToken, serviceID, referenceID)}
}

func (_c *VariablesServiceMock_ResolveSingleReference_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, bearerToken string, serviceID uuid.UUID, referenceID uuid.UUID)) *VariablesServiceMock_ResolveSingleReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(uuid.UUID), args[4].(uuid.UUID))
	})
	return _c
}

func (_c *VariablesServiceMock_ResolveSingleReference_Call) Return(_a0 string, _a1 error) *VariablesServiceMock_ResolveSingleReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_ResolveSingleReference_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, uuid.UUID, uuid.UUID) (string, error)) *VariablesServiceMock_ResolveSingleReference_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVariables provides a mock function with given fields: ctx, userID, bearerToken, referenceInput, input, behavior, newVariables
func (_m *VariablesServiceMock) UpdateVariables(ctx context.Context, userID uuid.UUID, bearerToken string, referenceInput []*models.VariableReferenceInputItem, input models.BaseVariablesJSONInput, behavior models.VariableUpdateBehavior, newVariables map[string][]byte) (*models.VariableResponse, error) {
	ret := _m.Called(ctx, userID, bearerToken, referenceInput, input, behavior, newVariables)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVariables")
	}

	var r0 *models.VariableResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []*models.VariableReferenceInputItem, models.BaseVariablesJSONInput, models.VariableUpdateBehavior, map[string][]byte) (*models.VariableResponse, error)); ok {
		return rf(ctx, userID, bearerToken, referenceInput, input, behavior, newVariables)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []*models.VariableReferenceInputItem, models.BaseVariablesJSONInput, models.VariableUpdateBehavior, map[string][]byte) *models.VariableResponse); ok {
		r0 = rf(ctx, userID, bearerToken, referenceInput, input, behavior, newVariables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VariableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, []*models.VariableReferenceInputItem, models.BaseVariablesJSONInput, models.VariableUpdateBehavior, map[string][]byte) error); ok {
		r1 = rf(ctx, userID, bearerToken, referenceInput, input, behavior, newVariables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VariablesServiceMock_UpdateVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVariables'
type VariablesServiceMock_UpdateVariables_Call struct {
	*mock.Call
}

// UpdateVariables is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - bearerToken string
//   - referenceInput []*models.VariableReferenceInputItem
//   - input models.BaseVariablesJSONInput
//   - behavior models.VariableUpdateBehavior
//   - newVariables map[string][]byte
func (_e *VariablesServiceMock_Expecter) UpdateVariables(ctx interface{}, userID interface{}, bearerToken interface{}, referenceInput interface{}, input interface{}, behavior interface{}, newVariables interface{}) *VariablesServiceMock_UpdateVariables_Call {
	return &VariablesServiceMock_UpdateVariables_Call{Call: _e.mock.On("UpdateVariables", ctx, userID, bearerToken, referenceInput, input, behavior, newVariables)}
}

func (_c *VariablesServiceMock_UpdateVariables_Call) Run(run func(ctx context.Context, userID uuid.UUID, bearerToken string, referenceInput []*models.VariableReferenceInputItem, input models.BaseVariablesJSONInput, behavior models.VariableUpdateBehavior, newVariables map[string][]byte)) *VariablesServiceMock_UpdateVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].([]*models.VariableReferenceInputItem), args[4].(models.BaseVariablesJSONInput), args[5].(models.VariableUpdateBehavior), args[6].(map[string][]byte))
	})
	return _c
}

func (_c *VariablesServiceMock_UpdateVariables_Call) Return(_a0 *models.VariableResponse, _a1 error) *VariablesServiceMock_UpdateVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VariablesServiceMock_UpdateVariables_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, []*models.VariableReferenceInputItem, models.BaseVariablesJSONInput, models.VariableUpdateBehavior, map[string][]byte) (*models.VariableResponse, error)) *VariablesServiceMock_UpdateVariables_Call {
	_c.Call.Return(run)
	return _c
}

// NewVariablesServiceMock creates a new instance of VariablesServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariablesServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VariablesServiceMock {
	mock := &VariablesServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
