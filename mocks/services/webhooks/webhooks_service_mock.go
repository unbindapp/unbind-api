// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_services_webhooks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/unbindapp/unbind-api/internal/models"

	schema "github.com/unbindapp/unbind-api/ent/schema"

	uuid "github.com/google/uuid"

	webhooks_service "github.com/unbindapp/unbind-api/internal/services/webooks"
)

// WebhooksServiceMock is an autogenerated mock type for the WebhooksServiceInterface type
type WebhooksServiceMock struct {
	mock.Mock
}

type WebhooksServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhooksServiceMock) EXPECT() *WebhooksServiceMock_Expecter {
	return &WebhooksServiceMock_Expecter{mock: &_m.Mock}
}

// CreateWebhook provides a mock function with given fields: ctx, requesterUserID, input
func (_m *WebhooksServiceMock) CreateWebhook(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookCreateInput) (*models.WebhookResponse, error) {
	ret := _m.Called(ctx, requesterUserID, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebhook")
	}

	var r0 *models.WebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookCreateInput) (*models.WebhookResponse, error)); ok {
		return rf(ctx, requesterUserID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookCreateInput) *models.WebhookResponse); ok {
		r0 = rf(ctx, requesterUserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.WebhookCreateInput) error); ok {
		r1 = rf(ctx, requesterUserID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhooksServiceMock_CreateWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWebhook'
type WebhooksServiceMock_CreateWebhook_Call struct {
	*mock.Call
}

// CreateWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - input *models.WebhookCreateInput
func (_e *WebhooksServiceMock_Expecter) CreateWebhook(ctx interface{}, requesterUserID interface{}, input interface{}) *WebhooksServiceMock_CreateWebhook_Call {
	return &WebhooksServiceMock_CreateWebhook_Call{Call: _e.mock.On("CreateWebhook", ctx, requesterUserID, input)}
}

func (_c *WebhooksServiceMock_CreateWebhook_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookCreateInput)) *WebhooksServiceMock_CreateWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.WebhookCreateInput))
	})
	return _c
}

func (_c *WebhooksServiceMock_CreateWebhook_Call) Return(_a0 *models.WebhookResponse, _a1 error) *WebhooksServiceMock_CreateWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhooksServiceMock_CreateWebhook_Call) RunAndReturn(run func(context.Context, uuid.UUID, *models.WebhookCreateInput) (*models.WebhookResponse, error)) *WebhooksServiceMock_CreateWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWebhook provides a mock function with given fields: ctx, requesterUserID, webhookType, id, teamID, projectID
func (_m *WebhooksServiceMock) DeleteWebhook(ctx context.Context, requesterUserID uuid.UUID, webhookType schema.WebhookType, id uuid.UUID, teamID uuid.UUID, projectID *uuid.UUID) error {
	ret := _m.Called(ctx, requesterUserID, webhookType, id, teamID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, schema.WebhookType, uuid.UUID, uuid.UUID, *uuid.UUID) error); ok {
		r0 = rf(ctx, requesterUserID, webhookType, id, teamID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhooksServiceMock_DeleteWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWebhook'
type WebhooksServiceMock_DeleteWebhook_Call struct {
	*mock.Call
}

// DeleteWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - webhookType schema.WebhookType
//   - id uuid.UUID
//   - teamID uuid.UUID
//   - projectID *uuid.UUID
func (_e *WebhooksServiceMock_Expecter) DeleteWebhook(ctx interface{}, requesterUserID interface{}, webhookType interface{}, id interface{}, teamID interface{}, projectID interface{}) *WebhooksServiceMock_DeleteWebhook_Call {
	return &WebhooksServiceMock_DeleteWebhook_Call{Call: _e.mock.On("DeleteWebhook", ctx, requesterUserID, webhookType, id, teamID, projectID)}
}

func (_c *WebhooksServiceMock_DeleteWebhook_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, webhookType schema.WebhookType, id uuid.UUID, teamID uuid.UUID, projectID *uuid.UUID)) *WebhooksServiceMock_DeleteWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(schema.WebhookType), args[3].(uuid.UUID), args[4].(uuid.UUID), args[5].(*uuid.UUID))
	})
	return _c
}

func (_c *WebhooksServiceMock_DeleteWebhook_Call) Return(_a0 error) *WebhooksServiceMock_DeleteWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhooksServiceMock_DeleteWebhook_Call) RunAndReturn(run func(context.Context, uuid.UUID, schema.WebhookType, uuid.UUID, uuid.UUID, *uuid.UUID) error) *WebhooksServiceMock_DeleteWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// DetectTargetFromURL provides a mock function with given fields: urlStr
func (_m *WebhooksServiceMock) DetectTargetFromURL(urlStr string) (schema.WebhookTarget, error) {
	ret := _m.Called(urlStr)

	if len(ret) == 0 {
		panic("no return value specified for DetectTargetFromURL")
	}

	var r0 schema.WebhookTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (schema.WebhookTarget, error)); ok {
		return rf(urlStr)
	}
	if rf, ok := ret.Get(0).(func(string) schema.WebhookTarget); ok {
		r0 = rf(urlStr)
	} else {
		r0 = ret.Get(0).(schema.WebhookTarget)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(urlStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhooksServiceMock_DetectTargetFromURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectTargetFromURL'
type WebhooksServiceMock_DetectTargetFromURL_Call struct {
	*mock.Call
}

// DetectTargetFromURL is a helper method to define mock.On call
//   - urlStr string
func (_e *WebhooksServiceMock_Expecter) DetectTargetFromURL(urlStr interface{}) *WebhooksServiceMock_DetectTargetFromURL_Call {
	return &WebhooksServiceMock_DetectTargetFromURL_Call{Call: _e.mock.On("DetectTargetFromURL", urlStr)}
}

func (_c *WebhooksServiceMock_DetectTargetFromURL_Call) Run(run func(urlStr string)) *WebhooksServiceMock_DetectTargetFromURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WebhooksServiceMock_DetectTargetFromURL_Call) Return(_a0 schema.WebhookTarget, _a1 error) *WebhooksServiceMock_DetectTargetFromURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhooksServiceMock_DetectTargetFromURL_Call) RunAndReturn(run func(string) (schema.WebhookTarget, error)) *WebhooksServiceMock_DetectTargetFromURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetWebhookByID provides a mock function with given fields: ctx, requesterUserID, input
func (_m *WebhooksServiceMock) GetWebhookByID(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookGetInput) (*models.WebhookResponse, error) {
	ret := _m.Called(ctx, requesterUserID, input)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhookByID")
	}

	var r0 *models.WebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookGetInput) (*models.WebhookResponse, error)); ok {
		return rf(ctx, requesterUserID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookGetInput) *models.WebhookResponse); ok {
		r0 = rf(ctx, requesterUserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.WebhookGetInput) error); ok {
		r1 = rf(ctx, requesterUserID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhooksServiceMock_GetWebhookByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWebhookByID'
type WebhooksServiceMock_GetWebhookByID_Call struct {
	*mock.Call
}

// GetWebhookByID is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - input *models.WebhookGetInput
func (_e *WebhooksServiceMock_Expecter) GetWebhookByID(ctx interface{}, requesterUserID interface{}, input interface{}) *WebhooksServiceMock_GetWebhookByID_Call {
	return &WebhooksServiceMock_GetWebhookByID_Call{Call: _e.mock.On("GetWebhookByID", ctx, requesterUserID, input)}
}

func (_c *WebhooksServiceMock_GetWebhookByID_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookGetInput)) *WebhooksServiceMock_GetWebhookByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.WebhookGetInput))
	})
	return _c
}

func (_c *WebhooksServiceMock_GetWebhookByID_Call) Return(_a0 *models.WebhookResponse, _a1 error) *WebhooksServiceMock_GetWebhookByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhooksServiceMock_GetWebhookByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, *models.WebhookGetInput) (*models.WebhookResponse, error)) *WebhooksServiceMock_GetWebhookByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListWebhooks provides a mock function with given fields: ctx, requesterUserID, input
func (_m *WebhooksServiceMock) ListWebhooks(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookListInput) ([]*models.WebhookResponse, error) {
	ret := _m.Called(ctx, requesterUserID, input)

	if len(ret) == 0 {
		panic("no return value specified for ListWebhooks")
	}

	var r0 []*models.WebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookListInput) ([]*models.WebhookResponse, error)); ok {
		return rf(ctx, requesterUserID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookListInput) []*models.WebhookResponse); ok {
		r0 = rf(ctx, requesterUserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.WebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.WebhookListInput) error); ok {
		r1 = rf(ctx, requesterUserID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhooksServiceMock_ListWebhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWebhooks'
type WebhooksServiceMock_ListWebhooks_Call struct {
	*mock.Call
}

// ListWebhooks is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - input *models.WebhookListInput
func (_e *WebhooksServiceMock_Expecter) ListWebhooks(ctx interface{}, requesterUserID interface{}, input interface{}) *WebhooksServiceMock_ListWebhooks_Call {
	return &WebhooksServiceMock_ListWebhooks_Call{Call: _e.mock.On("ListWebhooks", ctx, requesterUserID, input)}
}

func (_c *WebhooksServiceMock_ListWebhooks_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookListInput)) *WebhooksServiceMock_ListWebhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.WebhookListInput))
	})
	return _c
}

func (_c *WebhooksServiceMock_ListWebhooks_Call) Return(_a0 []*models.WebhookResponse, _a1 error) *WebhooksServiceMock_ListWebhooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhooksServiceMock_ListWebhooks_Call) RunAndReturn(run func(context.Context, uuid.UUID, *models.WebhookListInput) ([]*models.WebhookResponse, error)) *WebhooksServiceMock_ListWebhooks_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerWebhooks provides a mock function with given fields: ctx, level, event, message
func (_m *WebhooksServiceMock) TriggerWebhooks(ctx context.Context, level webhooks_service.WebhookLevel, event schema.WebhookEvent, message webhooks_service.WebhookData) error {
	ret := _m.Called(ctx, level, event, message)

	if len(ret) == 0 {
		panic("no return value specified for TriggerWebhooks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks_service.WebhookLevel, schema.WebhookEvent, webhooks_service.WebhookData) error); ok {
		r0 = rf(ctx, level, event, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhooksServiceMock_TriggerWebhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerWebhooks'
type WebhooksServiceMock_TriggerWebhooks_Call struct {
	*mock.Call
}

// TriggerWebhooks is a helper method to define mock.On call
//   - ctx context.Context
//   - level webhooks_service.WebhookLevel
//   - event schema.WebhookEvent
//   - message webhooks_service.WebhookData
func (_e *WebhooksServiceMock_Expecter) TriggerWebhooks(ctx interface{}, level interface{}, event interface{}, message interface{}) *WebhooksServiceMock_TriggerWebhooks_Call {
	return &WebhooksServiceMock_TriggerWebhooks_Call{Call: _e.mock.On("TriggerWebhooks", ctx, level, event, message)}
}

func (_c *WebhooksServiceMock_TriggerWebhooks_Call) Run(run func(ctx context.Context, level webhooks_service.WebhookLevel, event schema.WebhookEvent, message webhooks_service.WebhookData)) *WebhooksServiceMock_TriggerWebhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webhooks_service.WebhookLevel), args[2].(schema.WebhookEvent), args[3].(webhooks_service.WebhookData))
	})
	return _c
}

func (_c *WebhooksServiceMock_TriggerWebhooks_Call) Return(_a0 error) *WebhooksServiceMock_TriggerWebhooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhooksServiceMock_TriggerWebhooks_Call) RunAndReturn(run func(context.Context, webhooks_service.WebhookLevel, schema.WebhookEvent, webhooks_service.WebhookData) error) *WebhooksServiceMock_TriggerWebhooks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWebhook provides a mock function with given fields: ctx, requesterUserID, input
func (_m *WebhooksServiceMock) UpdateWebhook(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookUpdateInput) (*models.WebhookResponse, error) {
	ret := _m.Called(ctx, requesterUserID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebhook")
	}

	var r0 *models.WebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookUpdateInput) (*models.WebhookResponse, error)); ok {
		return rf(ctx, requesterUserID, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.WebhookUpdateInput) *models.WebhookResponse); ok {
		r0 = rf(ctx, requesterUserID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.WebhookUpdateInput) error); ok {
		r1 = rf(ctx, requesterUserID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhooksServiceMock_UpdateWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWebhook'
type WebhooksServiceMock_UpdateWebhook_Call struct {
	*mock.Call
}

// UpdateWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - requesterUserID uuid.UUID
//   - input *models.WebhookUpdateInput
func (_e *WebhooksServiceMock_Expecter) UpdateWebhook(ctx interface{}, requesterUserID interface{}, input interface{}) *WebhooksServiceMock_UpdateWebhook_Call {
	return &WebhooksServiceMock_UpdateWebhook_Call{Call: _e.mock.On("UpdateWebhook", ctx, requesterUserID, input)}
}

func (_c *WebhooksServiceMock_UpdateWebhook_Call) Run(run func(ctx context.Context, requesterUserID uuid.UUID, input *models.WebhookUpdateInput)) *WebhooksServiceMock_UpdateWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.WebhookUpdateInput))
	})
	return _c
}

func (_c *WebhooksServiceMock_UpdateWebhook_Call) Return(_a0 *models.WebhookResponse, _a1 error) *WebhooksServiceMock_UpdateWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhooksServiceMock_UpdateWebhook_Call) RunAndReturn(run func(context.Context, uuid.UUID, *models.WebhookUpdateInput) (*models.WebhookResponse, error)) *WebhooksServiceMock_UpdateWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhooksServiceMock creates a new instance of WebhooksServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhooksServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhooksServiceMock {
	mock := &WebhooksServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
