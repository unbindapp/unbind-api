// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_repository_oauth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	rsa "crypto/rsa"

	time "time"
)

// OauthRepositoryMock is an autogenerated mock type for the OauthRepositoryInterface type
type OauthRepositoryMock struct {
	mock.Mock
}

type OauthRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OauthRepositoryMock) EXPECT() *OauthRepositoryMock_Expecter {
	return &OauthRepositoryMock_Expecter{mock: &_m.Mock}
}

// CleanTokenStore provides a mock function with given fields: ctx
func (_m *OauthRepositoryMock) CleanTokenStore(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanTokenStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OauthRepositoryMock_CleanTokenStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanTokenStore'
type OauthRepositoryMock_CleanTokenStore_Call struct {
	*mock.Call
}

// CleanTokenStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OauthRepositoryMock_Expecter) CleanTokenStore(ctx interface{}) *OauthRepositoryMock_CleanTokenStore_Call {
	return &OauthRepositoryMock_CleanTokenStore_Call{Call: _e.mock.On("CleanTokenStore", ctx)}
}

func (_c *OauthRepositoryMock_CleanTokenStore_Call) Run(run func(ctx context.Context)) *OauthRepositoryMock_CleanTokenStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OauthRepositoryMock_CleanTokenStore_Call) Return(result error) *OauthRepositoryMock_CleanTokenStore_Call {
	_c.Call.Return(result)
	return _c
}

func (_c *OauthRepositoryMock_CleanTokenStore_Call) RunAndReturn(run func(context.Context) error) *OauthRepositoryMock_CleanTokenStore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthCode provides a mock function with given fields: ctx, code, clientID, scope, user, expiresAt
func (_m *OauthRepositoryMock) CreateAuthCode(ctx context.Context, code string, clientID string, scope string, user *ent.User, expiresAt time.Time) (*ent.Oauth2Code, error) {
	ret := _m.Called(ctx, code, clientID, scope, user, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthCode")
	}

	var r0 *ent.Oauth2Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *ent.User, time.Time) (*ent.Oauth2Code, error)); ok {
		return rf(ctx, code, clientID, scope, user, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *ent.User, time.Time) *ent.Oauth2Code); ok {
		r0 = rf(ctx, code, clientID, scope, user, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Oauth2Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *ent.User, time.Time) error); ok {
		r1 = rf(ctx, code, clientID, scope, user, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthRepositoryMock_CreateAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthCode'
type OauthRepositoryMock_CreateAuthCode_Call struct {
	*mock.Call
}

// CreateAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - clientID string
//   - scope string
//   - user *ent.User
//   - expiresAt time.Time
func (_e *OauthRepositoryMock_Expecter) CreateAuthCode(ctx interface{}, code interface{}, clientID interface{}, scope interface{}, user interface{}, expiresAt interface{}) *OauthRepositoryMock_CreateAuthCode_Call {
	return &OauthRepositoryMock_CreateAuthCode_Call{Call: _e.mock.On("CreateAuthCode", ctx, code, clientID, scope, user, expiresAt)}
}

func (_c *OauthRepositoryMock_CreateAuthCode_Call) Run(run func(ctx context.Context, code string, clientID string, scope string, user *ent.User, expiresAt time.Time)) *OauthRepositoryMock_CreateAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*ent.User), args[5].(time.Time))
	})
	return _c
}

func (_c *OauthRepositoryMock_CreateAuthCode_Call) Return(_a0 *ent.Oauth2Code, _a1 error) *OauthRepositoryMock_CreateAuthCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthRepositoryMock_CreateAuthCode_Call) RunAndReturn(run func(context.Context, string, string, string, *ent.User, time.Time) (*ent.Oauth2Code, error)) *OauthRepositoryMock_CreateAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateToken provides a mock function with given fields: ctx, accessToken, refreshToken, clientID, scope, expiresAt, user
func (_m *OauthRepositoryMock) CreateToken(ctx context.Context, accessToken string, refreshToken string, clientID string, scope string, expiresAt time.Time, user *ent.User) (*ent.Oauth2Token, error) {
	ret := _m.Called(ctx, accessToken, refreshToken, clientID, scope, expiresAt, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *ent.Oauth2Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Time, *ent.User) (*ent.Oauth2Token, error)); ok {
		return rf(ctx, accessToken, refreshToken, clientID, scope, expiresAt, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Time, *ent.User) *ent.Oauth2Token); ok {
		r0 = rf(ctx, accessToken, refreshToken, clientID, scope, expiresAt, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Oauth2Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, time.Time, *ent.User) error); ok {
		r1 = rf(ctx, accessToken, refreshToken, clientID, scope, expiresAt, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthRepositoryMock_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type OauthRepositoryMock_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - refreshToken string
//   - clientID string
//   - scope string
//   - expiresAt time.Time
//   - user *ent.User
func (_e *OauthRepositoryMock_Expecter) CreateToken(ctx interface{}, accessToken interface{}, refreshToken interface{}, clientID interface{}, scope interface{}, expiresAt interface{}, user interface{}) *OauthRepositoryMock_CreateToken_Call {
	return &OauthRepositoryMock_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, accessToken, refreshToken, clientID, scope, expiresAt, user)}
}

func (_c *OauthRepositoryMock_CreateToken_Call) Run(run func(ctx context.Context, accessToken string, refreshToken string, clientID string, scope string, expiresAt time.Time, user *ent.User)) *OauthRepositoryMock_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(time.Time), args[6].(*ent.User))
	})
	return _c
}

func (_c *OauthRepositoryMock_CreateToken_Call) Return(_a0 *ent.Oauth2Token, _a1 error) *OauthRepositoryMock_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthRepositoryMock_CreateToken_Call) RunAndReturn(run func(context.Context, string, string, string, string, time.Time, *ent.User) (*ent.Oauth2Token, error)) *OauthRepositoryMock_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthCode provides a mock function with given fields: ctx, code
func (_m *OauthRepositoryMock) DeleteAuthCode(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OauthRepositoryMock_DeleteAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthCode'
type OauthRepositoryMock_DeleteAuthCode_Call struct {
	*mock.Call
}

// DeleteAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *OauthRepositoryMock_Expecter) DeleteAuthCode(ctx interface{}, code interface{}) *OauthRepositoryMock_DeleteAuthCode_Call {
	return &OauthRepositoryMock_DeleteAuthCode_Call{Call: _e.mock.On("DeleteAuthCode", ctx, code)}
}

func (_c *OauthRepositoryMock_DeleteAuthCode_Call) Run(run func(ctx context.Context, code string)) *OauthRepositoryMock_DeleteAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_DeleteAuthCode_Call) Return(_a0 error) *OauthRepositoryMock_DeleteAuthCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OauthRepositoryMock_DeleteAuthCode_Call) RunAndReturn(run func(context.Context, string) error) *OauthRepositoryMock_DeleteAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthCode provides a mock function with given fields: ctx, code
func (_m *OauthRepositoryMock) GetAuthCode(ctx context.Context, code string) (*ent.Oauth2Code, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCode")
	}

	var r0 *ent.Oauth2Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Oauth2Code, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Oauth2Code); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Oauth2Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthRepositoryMock_GetAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthCode'
type OauthRepositoryMock_GetAuthCode_Call struct {
	*mock.Call
}

// GetAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *OauthRepositoryMock_Expecter) GetAuthCode(ctx interface{}, code interface{}) *OauthRepositoryMock_GetAuthCode_Call {
	return &OauthRepositoryMock_GetAuthCode_Call{Call: _e.mock.On("GetAuthCode", ctx, code)}
}

func (_c *OauthRepositoryMock_GetAuthCode_Call) Run(run func(ctx context.Context, code string)) *OauthRepositoryMock_GetAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_GetAuthCode_Call) Return(_a0 *ent.Oauth2Code, _a1 error) *OauthRepositoryMock_GetAuthCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthRepositoryMock_GetAuthCode_Call) RunAndReturn(run func(context.Context, string) (*ent.Oauth2Code, error)) *OauthRepositoryMock_GetAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAccessToken provides a mock function with given fields: ctx, accessToken
func (_m *OauthRepositoryMock) GetByAccessToken(ctx context.Context, accessToken string) (*ent.Oauth2Token, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccessToken")
	}

	var r0 *ent.Oauth2Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Oauth2Token, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Oauth2Token); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Oauth2Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthRepositoryMock_GetByAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccessToken'
type OauthRepositoryMock_GetByAccessToken_Call struct {
	*mock.Call
}

// GetByAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *OauthRepositoryMock_Expecter) GetByAccessToken(ctx interface{}, accessToken interface{}) *OauthRepositoryMock_GetByAccessToken_Call {
	return &OauthRepositoryMock_GetByAccessToken_Call{Call: _e.mock.On("GetByAccessToken", ctx, accessToken)}
}

func (_c *OauthRepositoryMock_GetByAccessToken_Call) Run(run func(ctx context.Context, accessToken string)) *OauthRepositoryMock_GetByAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_GetByAccessToken_Call) Return(_a0 *ent.Oauth2Token, _a1 error) *OauthRepositoryMock_GetByAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthRepositoryMock_GetByAccessToken_Call) RunAndReturn(run func(context.Context, string) (*ent.Oauth2Token, error)) *OauthRepositoryMock_GetByAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *OauthRepositoryMock) GetByRefreshToken(ctx context.Context, refreshToken string) (*ent.Oauth2Token, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *ent.Oauth2Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Oauth2Token, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Oauth2Token); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Oauth2Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthRepositoryMock_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type OauthRepositoryMock_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *OauthRepositoryMock_Expecter) GetByRefreshToken(ctx interface{}, refreshToken interface{}) *OauthRepositoryMock_GetByRefreshToken_Call {
	return &OauthRepositoryMock_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", ctx, refreshToken)}
}

func (_c *OauthRepositoryMock_GetByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *OauthRepositoryMock_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_GetByRefreshToken_Call) Return(_a0 *ent.Oauth2Token, _a1 error) *OauthRepositoryMock_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthRepositoryMock_GetByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*ent.Oauth2Token, error)) *OauthRepositoryMock_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrGenerateJWTPrivateKey provides a mock function with given fields: ctx
func (_m *OauthRepositoryMock) GetOrGenerateJWTPrivateKey(ctx context.Context) (*rsa.PrivateKey, []byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrGenerateJWTPrivateKey")
	}

	var r0 *rsa.PrivateKey
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rsa.PrivateKey, []byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rsa.PrivateKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) []byte); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrGenerateJWTPrivateKey'
type OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call struct {
	*mock.Call
}

// GetOrGenerateJWTPrivateKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OauthRepositoryMock_Expecter) GetOrGenerateJWTPrivateKey(ctx interface{}) *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call {
	return &OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call{Call: _e.mock.On("GetOrGenerateJWTPrivateKey", ctx)}
}

func (_c *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call) Run(run func(ctx context.Context)) *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call) Return(_a0 *rsa.PrivateKey, _a1 []byte, _a2 error) *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call) RunAndReturn(run func(context.Context) (*rsa.PrivateKey, []byte, error)) *OauthRepositoryMock_GetOrGenerateJWTPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccessToken provides a mock function with given fields: ctx, accessToken
func (_m *OauthRepositoryMock) RevokeAccessToken(ctx context.Context, accessToken string) error {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccessToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OauthRepositoryMock_RevokeAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccessToken'
type OauthRepositoryMock_RevokeAccessToken_Call struct {
	*mock.Call
}

// RevokeAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *OauthRepositoryMock_Expecter) RevokeAccessToken(ctx interface{}, accessToken interface{}) *OauthRepositoryMock_RevokeAccessToken_Call {
	return &OauthRepositoryMock_RevokeAccessToken_Call{Call: _e.mock.On("RevokeAccessToken", ctx, accessToken)}
}

func (_c *OauthRepositoryMock_RevokeAccessToken_Call) Run(run func(ctx context.Context, accessToken string)) *OauthRepositoryMock_RevokeAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_RevokeAccessToken_Call) Return(_a0 error) *OauthRepositoryMock_RevokeAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OauthRepositoryMock_RevokeAccessToken_Call) RunAndReturn(run func(context.Context, string) error) *OauthRepositoryMock_RevokeAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *OauthRepositoryMock) RevokeRefreshToken(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OauthRepositoryMock_RevokeRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRefreshToken'
type OauthRepositoryMock_RevokeRefreshToken_Call struct {
	*mock.Call
}

// RevokeRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *OauthRepositoryMock_Expecter) RevokeRefreshToken(ctx interface{}, refreshToken interface{}) *OauthRepositoryMock_RevokeRefreshToken_Call {
	return &OauthRepositoryMock_RevokeRefreshToken_Call{Call: _e.mock.On("RevokeRefreshToken", ctx, refreshToken)}
}

func (_c *OauthRepositoryMock_RevokeRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *OauthRepositoryMock_RevokeRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthRepositoryMock_RevokeRefreshToken_Call) Return(_a0 error) *OauthRepositoryMock_RevokeRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OauthRepositoryMock_RevokeRefreshToken_Call) RunAndReturn(run func(context.Context, string) error) *OauthRepositoryMock_RevokeRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewOauthRepositoryMock creates a new instance of OauthRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOauthRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OauthRepositoryMock {
	mock := &OauthRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
