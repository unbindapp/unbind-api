// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_webhook

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	models "github.com/unbindapp/unbind-api/internal/models"

	schema "github.com/unbindapp/unbind-api/ent/schema"

	uuid "github.com/google/uuid"
)

// WebhookRepositoryMock is an autogenerated mock type for the WebhookRepositoryInterface type
type WebhookRepositoryMock struct {
	mock.Mock
}

type WebhookRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookRepositoryMock) EXPECT() *WebhookRepositoryMock_Expecter {
	return &WebhookRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *WebhookRepositoryMock) Create(ctx context.Context, input *models.WebhookCreateInput) (*ent.Webhook, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WebhookCreateInput) (*ent.Webhook, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WebhookCreateInput) *ent.Webhook); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WebhookCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type WebhookRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.WebhookCreateInput
func (_e *WebhookRepositoryMock_Expecter) Create(ctx interface{}, input interface{}) *WebhookRepositoryMock_Create_Call {
	return &WebhookRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *WebhookRepositoryMock_Create_Call) Run(run func(ctx context.Context, input *models.WebhookCreateInput)) *WebhookRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WebhookCreateInput))
	})
	return _c
}

func (_c *WebhookRepositoryMock_Create_Call) Return(_a0 *ent.Webhook, _a1 error) *WebhookRepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *models.WebhookCreateInput) (*ent.Webhook, error)) *WebhookRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WebhookRepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type WebhookRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *WebhookRepositoryMock_Expecter) Delete(ctx interface{}, id interface{}) *WebhookRepositoryMock_Delete_Call {
	return &WebhookRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *WebhookRepositoryMock_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *WebhookRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookRepositoryMock_Delete_Call) Return(_a0 error) *WebhookRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhookRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *WebhookRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *WebhookRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.Webhook, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Webhook, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Webhook); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type WebhookRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *WebhookRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *WebhookRepositoryMock_GetByID_Call {
	return &WebhookRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *WebhookRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *WebhookRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookRepositoryMock_GetByID_Call) Return(_a0 *ent.Webhook, _a1 error) *WebhookRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Webhook, error)) *WebhookRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProject provides a mock function with given fields: ctx, projectID
func (_m *WebhookRepositoryMock) GetByProject(ctx context.Context, projectID uuid.UUID) ([]*ent.Webhook, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProject")
	}

	var r0 []*ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.Webhook, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.Webhook); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_GetByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProject'
type WebhookRepositoryMock_GetByProject_Call struct {
	*mock.Call
}

// GetByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *WebhookRepositoryMock_Expecter) GetByProject(ctx interface{}, projectID interface{}) *WebhookRepositoryMock_GetByProject_Call {
	return &WebhookRepositoryMock_GetByProject_Call{Call: _e.mock.On("GetByProject", ctx, projectID)}
}

func (_c *WebhookRepositoryMock_GetByProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *WebhookRepositoryMock_GetByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookRepositoryMock_GetByProject_Call) Return(_a0 []*ent.Webhook, _a1 error) *WebhookRepositoryMock_GetByProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_GetByProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.Webhook, error)) *WebhookRepositoryMock_GetByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTeam provides a mock function with given fields: ctx, teamID
func (_m *WebhookRepositoryMock) GetByTeam(ctx context.Context, teamID uuid.UUID) ([]*ent.Webhook, error) {
	ret := _m.Called(ctx, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeam")
	}

	var r0 []*ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.Webhook, error)); ok {
		return rf(ctx, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.Webhook); ok {
		r0 = rf(ctx, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_GetByTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeam'
type WebhookRepositoryMock_GetByTeam_Call struct {
	*mock.Call
}

// GetByTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID uuid.UUID
func (_e *WebhookRepositoryMock_Expecter) GetByTeam(ctx interface{}, teamID interface{}) *WebhookRepositoryMock_GetByTeam_Call {
	return &WebhookRepositoryMock_GetByTeam_Call{Call: _e.mock.On("GetByTeam", ctx, teamID)}
}

func (_c *WebhookRepositoryMock_GetByTeam_Call) Run(run func(ctx context.Context, teamID uuid.UUID)) *WebhookRepositoryMock_GetByTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookRepositoryMock_GetByTeam_Call) Return(_a0 []*ent.Webhook, _a1 error) *WebhookRepositoryMock_GetByTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_GetByTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.Webhook, error)) *WebhookRepositoryMock_GetByTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetWebhooksForEvent provides a mock function with given fields: ctx, event
func (_m *WebhookRepositoryMock) GetWebhooksForEvent(ctx context.Context, event schema.WebhookEvent) ([]*ent.Webhook, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhooksForEvent")
	}

	var r0 []*ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.WebhookEvent) ([]*ent.Webhook, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.WebhookEvent) []*ent.Webhook); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.WebhookEvent) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_GetWebhooksForEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWebhooksForEvent'
type WebhookRepositoryMock_GetWebhooksForEvent_Call struct {
	*mock.Call
}

// GetWebhooksForEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event schema.WebhookEvent
func (_e *WebhookRepositoryMock_Expecter) GetWebhooksForEvent(ctx interface{}, event interface{}) *WebhookRepositoryMock_GetWebhooksForEvent_Call {
	return &WebhookRepositoryMock_GetWebhooksForEvent_Call{Call: _e.mock.On("GetWebhooksForEvent", ctx, event)}
}

func (_c *WebhookRepositoryMock_GetWebhooksForEvent_Call) Run(run func(ctx context.Context, event schema.WebhookEvent)) *WebhookRepositoryMock_GetWebhooksForEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(schema.WebhookEvent))
	})
	return _c
}

func (_c *WebhookRepositoryMock_GetWebhooksForEvent_Call) Return(_a0 []*ent.Webhook, _a1 error) *WebhookRepositoryMock_GetWebhooksForEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_GetWebhooksForEvent_Call) RunAndReturn(run func(context.Context, schema.WebhookEvent) ([]*ent.Webhook, error)) *WebhookRepositoryMock_GetWebhooksForEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *WebhookRepositoryMock) Update(ctx context.Context, input *models.WebhookUpdateInput) (*ent.Webhook, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WebhookUpdateInput) (*ent.Webhook, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WebhookUpdateInput) *ent.Webhook); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WebhookUpdateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type WebhookRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.WebhookUpdateInput
func (_e *WebhookRepositoryMock_Expecter) Update(ctx interface{}, input interface{}) *WebhookRepositoryMock_Update_Call {
	return &WebhookRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *WebhookRepositoryMock_Update_Call) Run(run func(ctx context.Context, input *models.WebhookUpdateInput)) *WebhookRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.WebhookUpdateInput))
	})
	return _c
}

func (_c *WebhookRepositoryMock_Update_Call) Return(_a0 *ent.Webhook, _a1 error) *WebhookRepositoryMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, *models.WebhookUpdateInput) (*ent.Webhook, error)) *WebhookRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhookRepositoryMock creates a new instance of WebhookRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookRepositoryMock {
	mock := &WebhookRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
