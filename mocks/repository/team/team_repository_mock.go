// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_team

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	predicate "github.com/unbindapp/unbind-api/ent/predicate"

	uuid "github.com/google/uuid"
)

// TeamRepositoryMock is an autogenerated mock type for the TeamRepositoryInterface type
type TeamRepositoryMock struct {
	mock.Mock
}

type TeamRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamRepositoryMock) EXPECT() *TeamRepositoryMock_Expecter {
	return &TeamRepositoryMock_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx, authPredicate
func (_m *TeamRepositoryMock) GetAll(ctx context.Context, authPredicate predicate.Team) ([]*ent.Team, error) {
	ret := _m.Called(ctx, authPredicate)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*ent.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, predicate.Team) ([]*ent.Team, error)); ok {
		return rf(ctx, authPredicate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, predicate.Team) []*ent.Team); ok {
		r0 = rf(ctx, authPredicate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, predicate.Team) error); ok {
		r1 = rf(ctx, authPredicate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRepositoryMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TeamRepositoryMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - authPredicate predicate.Team
func (_e *TeamRepositoryMock_Expecter) GetAll(ctx interface{}, authPredicate interface{}) *TeamRepositoryMock_GetAll_Call {
	return &TeamRepositoryMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, authPredicate)}
}

func (_c *TeamRepositoryMock_GetAll_Call) Run(run func(ctx context.Context, authPredicate predicate.Team)) *TeamRepositoryMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(predicate.Team))
	})
	return _c
}

func (_c *TeamRepositoryMock_GetAll_Call) Return(_a0 []*ent.Team, _a1 error) *TeamRepositoryMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRepositoryMock_GetAll_Call) RunAndReturn(run func(context.Context, predicate.Team) ([]*ent.Team, error)) *TeamRepositoryMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TeamRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.Team, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Team, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Team); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TeamRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TeamRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *TeamRepositoryMock_GetByID_Call {
	return &TeamRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *TeamRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TeamRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TeamRepositoryMock_GetByID_Call) Return(_a0 *ent.Team, _a1 error) *TeamRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Team, error)) *TeamRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: ctx, id
func (_m *TeamRepositoryMock) GetNamespace(ctx context.Context, id uuid.UUID) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRepositoryMock_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type TeamRepositoryMock_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TeamRepositoryMock_Expecter) GetNamespace(ctx interface{}, id interface{}) *TeamRepositoryMock_GetNamespace_Call {
	return &TeamRepositoryMock_GetNamespace_Call{Call: _e.mock.On("GetNamespace", ctx, id)}
}

func (_c *TeamRepositoryMock_GetNamespace_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TeamRepositoryMock_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TeamRepositoryMock_GetNamespace_Call) Return(_a0 string, _a1 error) *TeamRepositoryMock_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRepositoryMock_GetNamespace_Call) RunAndReturn(run func(context.Context, uuid.UUID) (string, error)) *TeamRepositoryMock_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// HasUserWithID provides a mock function with given fields: ctx, teamID, userID
func (_m *TeamRepositoryMock) HasUserWithID(ctx context.Context, teamID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, teamID, userID)

	if len(ret) == 0 {
		panic("no return value specified for HasUserWithID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, teamID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, teamID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, teamID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRepositoryMock_HasUserWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUserWithID'
type TeamRepositoryMock_HasUserWithID_Call struct {
	*mock.Call
}

// HasUserWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID uuid.UUID
//   - userID uuid.UUID
func (_e *TeamRepositoryMock_Expecter) HasUserWithID(ctx interface{}, teamID interface{}, userID interface{}) *TeamRepositoryMock_HasUserWithID_Call {
	return &TeamRepositoryMock_HasUserWithID_Call{Call: _e.mock.On("HasUserWithID", ctx, teamID, userID)}
}

func (_c *TeamRepositoryMock_HasUserWithID_Call) Run(run func(ctx context.Context, teamID uuid.UUID, userID uuid.UUID)) *TeamRepositoryMock_HasUserWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *TeamRepositoryMock_HasUserWithID_Call) Return(_a0 bool, _a1 error) *TeamRepositoryMock_HasUserWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRepositoryMock_HasUserWithID_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *TeamRepositoryMock_HasUserWithID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, teamID, name, description
func (_m *TeamRepositoryMock) Update(ctx context.Context, teamID uuid.UUID, name string, description *string) (*ent.Team, error) {
	ret := _m.Called(ctx, teamID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *string) (*ent.Team, error)); ok {
		return rf(ctx, teamID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, *string) *ent.Team); ok {
		r0 = rf(ctx, teamID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, *string) error); ok {
		r1 = rf(ctx, teamID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TeamRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID uuid.UUID
//   - name string
//   - description *string
func (_e *TeamRepositoryMock_Expecter) Update(ctx interface{}, teamID interface{}, name interface{}, description interface{}) *TeamRepositoryMock_Update_Call {
	return &TeamRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, teamID, name, description)}
}

func (_c *TeamRepositoryMock_Update_Call) Run(run func(ctx context.Context, teamID uuid.UUID, name string, description *string)) *TeamRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *TeamRepositoryMock_Update_Call) Return(_a0 *ent.Team, _a1 error) *TeamRepositoryMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, *string) (*ent.Team, error)) *TeamRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeamRepositoryMock creates a new instance of TeamRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamRepositoryMock {
	mock := &TeamRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
