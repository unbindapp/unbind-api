// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_system

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	repository "github.com/unbindapp/unbind-api/internal/repositories"

	system_repo "github.com/unbindapp/unbind-api/internal/repositories/system"

	uuid "github.com/google/uuid"
)

// SystemRepositoryMock is an autogenerated mock type for the SystemRepositoryInterface type
type SystemRepositoryMock struct {
	mock.Mock
}

type SystemRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemRepositoryMock) EXPECT() *SystemRepositoryMock_Expecter {
	return &SystemRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateRegistry provides a mock function with given fields: ctx, tx, host, kubernetesSecret, isDefault
func (_m *SystemRepositoryMock) CreateRegistry(ctx context.Context, tx repository.TxInterface, host string, kubernetesSecret string, isDefault bool) (*ent.Registry, error) {
	ret := _m.Called(ctx, tx, host, kubernetesSecret, isDefault)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistry")
	}

	var r0 *ent.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string, string, bool) (*ent.Registry, error)); ok {
		return rf(ctx, tx, host, kubernetesSecret, isDefault)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string, string, bool) *ent.Registry); ok {
		r0 = rf(ctx, tx, host, kubernetesSecret, isDefault)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, string, string, bool) error); ok {
		r1 = rf(ctx, tx, host, kubernetesSecret, isDefault)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_CreateRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRegistry'
type SystemRepositoryMock_CreateRegistry_Call struct {
	*mock.Call
}

// CreateRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - host string
//   - kubernetesSecret string
//   - isDefault bool
func (_e *SystemRepositoryMock_Expecter) CreateRegistry(ctx interface{}, tx interface{}, host interface{}, kubernetesSecret interface{}, isDefault interface{}) *SystemRepositoryMock_CreateRegistry_Call {
	return &SystemRepositoryMock_CreateRegistry_Call{Call: _e.mock.On("CreateRegistry", ctx, tx, host, kubernetesSecret, isDefault)}
}

func (_c *SystemRepositoryMock_CreateRegistry_Call) Run(run func(ctx context.Context, tx repository.TxInterface, host string, kubernetesSecret string, isDefault bool)) *SystemRepositoryMock_CreateRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *SystemRepositoryMock_CreateRegistry_Call) Return(_a0 *ent.Registry, _a1 error) *SystemRepositoryMock_CreateRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_CreateRegistry_Call) RunAndReturn(run func(context.Context, repository.TxInterface, string, string, bool) (*ent.Registry, error)) *SystemRepositoryMock_CreateRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePVCMetadata provides a mock function with given fields: ctx, tx, pvcID
func (_m *SystemRepositoryMock) DeletePVCMetadata(ctx context.Context, tx repository.TxInterface, pvcID string) error {
	ret := _m.Called(ctx, tx, pvcID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePVCMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string) error); ok {
		r0 = rf(ctx, tx, pvcID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemRepositoryMock_DeletePVCMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePVCMetadata'
type SystemRepositoryMock_DeletePVCMetadata_Call struct {
	*mock.Call
}

// DeletePVCMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - pvcID string
func (_e *SystemRepositoryMock_Expecter) DeletePVCMetadata(ctx interface{}, tx interface{}, pvcID interface{}) *SystemRepositoryMock_DeletePVCMetadata_Call {
	return &SystemRepositoryMock_DeletePVCMetadata_Call{Call: _e.mock.On("DeletePVCMetadata", ctx, tx, pvcID)}
}

func (_c *SystemRepositoryMock_DeletePVCMetadata_Call) Run(run func(ctx context.Context, tx repository.TxInterface, pvcID string)) *SystemRepositoryMock_DeletePVCMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(string))
	})
	return _c
}

func (_c *SystemRepositoryMock_DeletePVCMetadata_Call) Return(_a0 error) *SystemRepositoryMock_DeletePVCMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemRepositoryMock_DeletePVCMetadata_Call) RunAndReturn(run func(context.Context, repository.TxInterface, string) error) *SystemRepositoryMock_DeletePVCMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRegistry provides a mock function with given fields: ctx, id
func (_m *SystemRepositoryMock) DeleteRegistry(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemRepositoryMock_DeleteRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRegistry'
type SystemRepositoryMock_DeleteRegistry_Call struct {
	*mock.Call
}

// DeleteRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *SystemRepositoryMock_Expecter) DeleteRegistry(ctx interface{}, id interface{}) *SystemRepositoryMock_DeleteRegistry_Call {
	return &SystemRepositoryMock_DeleteRegistry_Call{Call: _e.mock.On("DeleteRegistry", ctx, id)}
}

func (_c *SystemRepositoryMock_DeleteRegistry_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SystemRepositoryMock_DeleteRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SystemRepositoryMock_DeleteRegistry_Call) Return(_a0 error) *SystemRepositoryMock_DeleteRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemRepositoryMock_DeleteRegistry_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SystemRepositoryMock_DeleteRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRegistries provides a mock function with given fields: ctx
func (_m *SystemRepositoryMock) GetAllRegistries(ctx context.Context) ([]*ent.Registry, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRegistries")
	}

	var r0 []*ent.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Registry, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Registry); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetAllRegistries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRegistries'
type SystemRepositoryMock_GetAllRegistries_Call struct {
	*mock.Call
}

// GetAllRegistries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SystemRepositoryMock_Expecter) GetAllRegistries(ctx interface{}) *SystemRepositoryMock_GetAllRegistries_Call {
	return &SystemRepositoryMock_GetAllRegistries_Call{Call: _e.mock.On("GetAllRegistries", ctx)}
}

func (_c *SystemRepositoryMock_GetAllRegistries_Call) Run(run func(ctx context.Context)) *SystemRepositoryMock_GetAllRegistries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetAllRegistries_Call) Return(_a0 []*ent.Registry, _a1 error) *SystemRepositoryMock_GetAllRegistries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetAllRegistries_Call) RunAndReturn(run func(context.Context) ([]*ent.Registry, error)) *SystemRepositoryMock_GetAllRegistries_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultRegistry provides a mock function with given fields: ctx
func (_m *SystemRepositoryMock) GetDefaultRegistry(ctx context.Context) (*ent.Registry, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultRegistry")
	}

	var r0 *ent.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*ent.Registry, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *ent.Registry); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetDefaultRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultRegistry'
type SystemRepositoryMock_GetDefaultRegistry_Call struct {
	*mock.Call
}

// GetDefaultRegistry is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SystemRepositoryMock_Expecter) GetDefaultRegistry(ctx interface{}) *SystemRepositoryMock_GetDefaultRegistry_Call {
	return &SystemRepositoryMock_GetDefaultRegistry_Call{Call: _e.mock.On("GetDefaultRegistry", ctx)}
}

func (_c *SystemRepositoryMock_GetDefaultRegistry_Call) Run(run func(ctx context.Context)) *SystemRepositoryMock_GetDefaultRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetDefaultRegistry_Call) Return(_a0 *ent.Registry, _a1 error) *SystemRepositoryMock_GetDefaultRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetDefaultRegistry_Call) RunAndReturn(run func(context.Context) (*ent.Registry, error)) *SystemRepositoryMock_GetDefaultRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetImagePullSecrets provides a mock function with given fields: ctx
func (_m *SystemRepositoryMock) GetImagePullSecrets(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetImagePullSecrets")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetImagePullSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImagePullSecrets'
type SystemRepositoryMock_GetImagePullSecrets_Call struct {
	*mock.Call
}

// GetImagePullSecrets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SystemRepositoryMock_Expecter) GetImagePullSecrets(ctx interface{}) *SystemRepositoryMock_GetImagePullSecrets_Call {
	return &SystemRepositoryMock_GetImagePullSecrets_Call{Call: _e.mock.On("GetImagePullSecrets", ctx)}
}

func (_c *SystemRepositoryMock_GetImagePullSecrets_Call) Run(run func(ctx context.Context)) *SystemRepositoryMock_GetImagePullSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetImagePullSecrets_Call) Return(_a0 []string, _a1 error) *SystemRepositoryMock_GetImagePullSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetImagePullSecrets_Call) RunAndReturn(run func(context.Context) ([]string, error)) *SystemRepositoryMock_GetImagePullSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetPVCMetadata provides a mock function with given fields: ctx, tx, pvcIDs
func (_m *SystemRepositoryMock) GetPVCMetadata(ctx context.Context, tx repository.TxInterface, pvcIDs []string) (map[string]*ent.PVCMetadata, error) {
	ret := _m.Called(ctx, tx, pvcIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetPVCMetadata")
	}

	var r0 map[string]*ent.PVCMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, []string) (map[string]*ent.PVCMetadata, error)); ok {
		return rf(ctx, tx, pvcIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, []string) map[string]*ent.PVCMetadata); ok {
		r0 = rf(ctx, tx, pvcIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ent.PVCMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, []string) error); ok {
		r1 = rf(ctx, tx, pvcIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetPVCMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPVCMetadata'
type SystemRepositoryMock_GetPVCMetadata_Call struct {
	*mock.Call
}

// GetPVCMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - pvcIDs []string
func (_e *SystemRepositoryMock_Expecter) GetPVCMetadata(ctx interface{}, tx interface{}, pvcIDs interface{}) *SystemRepositoryMock_GetPVCMetadata_Call {
	return &SystemRepositoryMock_GetPVCMetadata_Call{Call: _e.mock.On("GetPVCMetadata", ctx, tx, pvcIDs)}
}

func (_c *SystemRepositoryMock_GetPVCMetadata_Call) Run(run func(ctx context.Context, tx repository.TxInterface, pvcIDs []string)) *SystemRepositoryMock_GetPVCMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].([]string))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetPVCMetadata_Call) Return(_a0 map[string]*ent.PVCMetadata, _a1 error) *SystemRepositoryMock_GetPVCMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetPVCMetadata_Call) RunAndReturn(run func(context.Context, repository.TxInterface, []string) (map[string]*ent.PVCMetadata, error)) *SystemRepositoryMock_GetPVCMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistry provides a mock function with given fields: ctx, id
func (_m *SystemRepositoryMock) GetRegistry(ctx context.Context, id uuid.UUID) (*ent.Registry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistry")
	}

	var r0 *ent.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Registry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Registry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistry'
type SystemRepositoryMock_GetRegistry_Call struct {
	*mock.Call
}

// GetRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *SystemRepositoryMock_Expecter) GetRegistry(ctx interface{}, id interface{}) *SystemRepositoryMock_GetRegistry_Call {
	return &SystemRepositoryMock_GetRegistry_Call{Call: _e.mock.On("GetRegistry", ctx, id)}
}

func (_c *SystemRepositoryMock_GetRegistry_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SystemRepositoryMock_GetRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetRegistry_Call) Return(_a0 *ent.Registry, _a1 error) *SystemRepositoryMock_GetRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetRegistry_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Registry, error)) *SystemRepositoryMock_GetRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemSettings provides a mock function with given fields: ctx, tx
func (_m *SystemRepositoryMock) GetSystemSettings(ctx context.Context, tx repository.TxInterface) (*ent.SystemSetting, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemSettings")
	}

	var r0 *ent.SystemSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface) (*ent.SystemSetting, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface) *ent.SystemSetting); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.SystemSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_GetSystemSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemSettings'
type SystemRepositoryMock_GetSystemSettings_Call struct {
	*mock.Call
}

// GetSystemSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
func (_e *SystemRepositoryMock_Expecter) GetSystemSettings(ctx interface{}, tx interface{}) *SystemRepositoryMock_GetSystemSettings_Call {
	return &SystemRepositoryMock_GetSystemSettings_Call{Call: _e.mock.On("GetSystemSettings", ctx, tx)}
}

func (_c *SystemRepositoryMock_GetSystemSettings_Call) Run(run func(ctx context.Context, tx repository.TxInterface)) *SystemRepositoryMock_GetSystemSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface))
	})
	return _c
}

func (_c *SystemRepositoryMock_GetSystemSettings_Call) Return(_a0 *ent.SystemSetting, _a1 error) *SystemRepositoryMock_GetSystemSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_GetSystemSettings_Call) RunAndReturn(run func(context.Context, repository.TxInterface) (*ent.SystemSetting, error)) *SystemRepositoryMock_GetSystemSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultRegistry provides a mock function with given fields: ctx, id
func (_m *SystemRepositoryMock) SetDefaultRegistry(ctx context.Context, id uuid.UUID) (*ent.Registry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultRegistry")
	}

	var r0 *ent.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Registry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Registry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_SetDefaultRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultRegistry'
type SystemRepositoryMock_SetDefaultRegistry_Call struct {
	*mock.Call
}

// SetDefaultRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *SystemRepositoryMock_Expecter) SetDefaultRegistry(ctx interface{}, id interface{}) *SystemRepositoryMock_SetDefaultRegistry_Call {
	return &SystemRepositoryMock_SetDefaultRegistry_Call{Call: _e.mock.On("SetDefaultRegistry", ctx, id)}
}

func (_c *SystemRepositoryMock_SetDefaultRegistry_Call) Run(run func(ctx context.Context, id uuid.UUID)) *SystemRepositoryMock_SetDefaultRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SystemRepositoryMock_SetDefaultRegistry_Call) Return(_a0 *ent.Registry, _a1 error) *SystemRepositoryMock_SetDefaultRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemRepositoryMock_SetDefaultRegistry_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Registry, error)) *SystemRepositoryMock_SetDefaultRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSystemSettings provides a mock function with given fields: ctx, input
func (_m *SystemRepositoryMock) UpdateSystemSettings(ctx context.Context, input *system_repo.SystemSettingUpdateInput) (*ent.SystemSetting, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSystemSettings")
	}

	var r0 *ent.SystemSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *system_repo.SystemSettingUpdateInput) (*ent.SystemSetting, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *system_repo.SystemSettingUpdateInput) *ent.SystemSetting); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.SystemSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *system_repo.SystemSettingUpdateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemRepositoryMock_UpdateSystemSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSystemSettings'
type SystemRepositoryMock_UpdateSystemSettings_Call struct {
	*mock.Call
}

// UpdateSystemSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - input *system_repo.SystemSettingUpdateInput
func (_e *SystemRepositoryMock_Expecter) UpdateSystemSettings(ctx interface{}, input interface{}) *SystemRepositoryMock_UpdateSystemSettings_Call {
	return &SystemRepositoryMock_UpdateSystemSettings_Call{Call: _e.mock.On("UpdateSystemSettings", ctx, input)}
}

func (_c *SystemRepositoryMock_UpdateSystemSettings_Call) Run(run func(ctx context.Context, input *system_repo.SystemSettingUpdateInput)) *SystemRepositoryMock_UpdateSystemSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*system_repo.SystemSettingUpdateInput))
	})
	return _c
}

func (_c *SystemRepositoryMock_UpdateSystemSettings_Call) Return(settings *ent.SystemSetting, err error) *SystemRepositoryMock_UpdateSystemSettings_Call {
	_c.Call.Return(settings, err)
	return _c
}

func (_c *SystemRepositoryMock_UpdateSystemSettings_Call) RunAndReturn(run func(context.Context, *system_repo.SystemSettingUpdateInput) (*ent.SystemSetting, error)) *SystemRepositoryMock_UpdateSystemSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPVCMetadata provides a mock function with given fields: ctx, tx, pvcID, name, description
func (_m *SystemRepositoryMock) UpsertPVCMetadata(ctx context.Context, tx repository.TxInterface, pvcID string, name *string, description *string) error {
	ret := _m.Called(ctx, tx, pvcID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPVCMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string, *string, *string) error); ok {
		r0 = rf(ctx, tx, pvcID, name, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemRepositoryMock_UpsertPVCMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPVCMetadata'
type SystemRepositoryMock_UpsertPVCMetadata_Call struct {
	*mock.Call
}

// UpsertPVCMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - pvcID string
//   - name *string
//   - description *string
func (_e *SystemRepositoryMock_Expecter) UpsertPVCMetadata(ctx interface{}, tx interface{}, pvcID interface{}, name interface{}, description interface{}) *SystemRepositoryMock_UpsertPVCMetadata_Call {
	return &SystemRepositoryMock_UpsertPVCMetadata_Call{Call: _e.mock.On("UpsertPVCMetadata", ctx, tx, pvcID, name, description)}
}

func (_c *SystemRepositoryMock_UpsertPVCMetadata_Call) Run(run func(ctx context.Context, tx repository.TxInterface, pvcID string, name *string, description *string)) *SystemRepositoryMock_UpsertPVCMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(string), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *SystemRepositoryMock_UpsertPVCMetadata_Call) Return(_a0 error) *SystemRepositoryMock_UpsertPVCMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemRepositoryMock_UpsertPVCMetadata_Call) RunAndReturn(run func(context.Context, repository.TxInterface, string, *string, *string) error) *SystemRepositoryMock_UpsertPVCMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystemRepositoryMock creates a new instance of SystemRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemRepositoryMock {
	mock := &SystemRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
