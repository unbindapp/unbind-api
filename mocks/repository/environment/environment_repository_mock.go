// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_environment

import (
	context "context"

	ent "github.com/unbindapp/unbind-api/ent"

	mock "github.com/stretchr/testify/mock"

	predicate "github.com/unbindapp/unbind-api/ent/predicate"

	repository "github.com/unbindapp/unbind-api/internal/repositories"

	uuid "github.com/google/uuid"
)

// EnvironmentRepositoryMock is an autogenerated mock type for the EnvironmentRepositoryInterface type
type EnvironmentRepositoryMock struct {
	mock.Mock
}

type EnvironmentRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EnvironmentRepositoryMock) EXPECT() *EnvironmentRepositoryMock_Expecter {
	return &EnvironmentRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID
func (_m *EnvironmentRepositoryMock) Create(ctx context.Context, tx repository.TxInterface, kubernetesName string, name string, kuberneteSecret string, description *string, projectID uuid.UUID) (*ent.Environment, error) {
	ret := _m.Called(ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string, string, string, *string, uuid.UUID) (*ent.Environment, error)); ok {
		return rf(ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, string, string, string, *string, uuid.UUID) *ent.Environment); ok {
		r0 = rf(ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, string, string, string, *string, uuid.UUID) error); ok {
		r1 = rf(ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type EnvironmentRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - kubernetesName string
//   - name string
//   - kuberneteSecret string
//   - description *string
//   - projectID uuid.UUID
func (_e *EnvironmentRepositoryMock_Expecter) Create(ctx interface{}, tx interface{}, kubernetesName interface{}, name interface{}, kuberneteSecret interface{}, description interface{}, projectID interface{}) *EnvironmentRepositoryMock_Create_Call {
	return &EnvironmentRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, tx, kubernetesName, name, kuberneteSecret, description, projectID)}
}

func (_c *EnvironmentRepositoryMock_Create_Call) Run(run func(ctx context.Context, tx repository.TxInterface, kubernetesName string, name string, kuberneteSecret string, description *string, projectID uuid.UUID)) *EnvironmentRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(string), args[3].(string), args[4].(string), args[5].(*string), args[6].(uuid.UUID))
	})
	return _c
}

func (_c *EnvironmentRepositoryMock_Create_Call) Return(_a0 *ent.Environment, _a1 error) *EnvironmentRepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnvironmentRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, repository.TxInterface, string, string, string, *string, uuid.UUID) (*ent.Environment, error)) *EnvironmentRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, tx, environmentID
func (_m *EnvironmentRepositoryMock) Delete(ctx context.Context, tx repository.TxInterface, environmentID uuid.UUID) error {
	ret := _m.Called(ctx, tx, environmentID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, environmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnvironmentRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EnvironmentRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - environmentID uuid.UUID
func (_e *EnvironmentRepositoryMock_Expecter) Delete(ctx interface{}, tx interface{}, environmentID interface{}) *EnvironmentRepositoryMock_Delete_Call {
	return &EnvironmentRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, tx, environmentID)}
}

func (_c *EnvironmentRepositoryMock_Delete_Call) Run(run func(ctx context.Context, tx repository.TxInterface, environmentID uuid.UUID)) *EnvironmentRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *EnvironmentRepositoryMock_Delete_Call) Return(_a0 error) *EnvironmentRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnvironmentRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID) error) *EnvironmentRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *EnvironmentRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.Environment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Environment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Environment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type EnvironmentRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *EnvironmentRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *EnvironmentRepositoryMock_GetByID_Call {
	return &EnvironmentRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *EnvironmentRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *EnvironmentRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *EnvironmentRepositoryMock_GetByID_Call) Return(_a0 *ent.Environment, _a1 error) *EnvironmentRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnvironmentRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Environment, error)) *EnvironmentRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetForProject provides a mock function with given fields: ctx, tx, projectID, authPredicate
func (_m *EnvironmentRepositoryMock) GetForProject(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID, authPredicate predicate.Environment) ([]*ent.Environment, error) {
	ret := _m.Called(ctx, tx, projectID, authPredicate)

	if len(ret) == 0 {
		panic("no return value specified for GetForProject")
	}

	var r0 []*ent.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, predicate.Environment) ([]*ent.Environment, error)); ok {
		return rf(ctx, tx, projectID, authPredicate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, predicate.Environment) []*ent.Environment); ok {
		r0 = rf(ctx, tx, projectID, authPredicate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, uuid.UUID, predicate.Environment) error); ok {
		r1 = rf(ctx, tx, projectID, authPredicate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentRepositoryMock_GetForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForProject'
type EnvironmentRepositoryMock_GetForProject_Call struct {
	*mock.Call
}

// GetForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - projectID uuid.UUID
//   - authPredicate predicate.Environment
func (_e *EnvironmentRepositoryMock_Expecter) GetForProject(ctx interface{}, tx interface{}, projectID interface{}, authPredicate interface{}) *EnvironmentRepositoryMock_GetForProject_Call {
	return &EnvironmentRepositoryMock_GetForProject_Call{Call: _e.mock.On("GetForProject", ctx, tx, projectID, authPredicate)}
}

func (_c *EnvironmentRepositoryMock_GetForProject_Call) Run(run func(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID, authPredicate predicate.Environment)) *EnvironmentRepositoryMock_GetForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID), args[3].(predicate.Environment))
	})
	return _c
}

func (_c *EnvironmentRepositoryMock_GetForProject_Call) Return(_a0 []*ent.Environment, _a1 error) *EnvironmentRepositoryMock_GetForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnvironmentRepositoryMock_GetForProject_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID, predicate.Environment) ([]*ent.Environment, error)) *EnvironmentRepositoryMock_GetForProject_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, environmentID, name, description
func (_m *EnvironmentRepositoryMock) Update(ctx context.Context, environmentID uuid.UUID, name *string, description *string) (*ent.Environment, error) {
	ret := _m.Called(ctx, environmentID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string, *string) (*ent.Environment, error)); ok {
		return rf(ctx, environmentID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *string, *string) *ent.Environment); ok {
		r0 = rf(ctx, environmentID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *string, *string) error); ok {
		r1 = rf(ctx, environmentID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type EnvironmentRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - environmentID uuid.UUID
//   - name *string
//   - description *string
func (_e *EnvironmentRepositoryMock_Expecter) Update(ctx interface{}, environmentID interface{}, name interface{}, description interface{}) *EnvironmentRepositoryMock_Update_Call {
	return &EnvironmentRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, environmentID, name, description)}
}

func (_c *EnvironmentRepositoryMock_Update_Call) Run(run func(ctx context.Context, environmentID uuid.UUID, name *string, description *string)) *EnvironmentRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *EnvironmentRepositoryMock_Update_Call) Return(_a0 *ent.Environment, _a1 error) *EnvironmentRepositoryMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnvironmentRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, *string, *string) (*ent.Environment, error)) *EnvironmentRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnvironmentRepositoryMock creates a new instance of EnvironmentRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironmentRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnvironmentRepositoryMock {
	mock := &EnvironmentRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
