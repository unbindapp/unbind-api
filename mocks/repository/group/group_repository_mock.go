// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_repository_group

import (
	context "context"

	ent "github.com/unbindapp/unbind-api/ent"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GroupRepositoryMock is an autogenerated mock type for the GroupRepositoryInterface type
type GroupRepositoryMock struct {
	mock.Mock
}

type GroupRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupRepositoryMock) EXPECT() *GroupRepositoryMock_Expecter {
	return &GroupRepositoryMock_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepositoryMock) AddUser(ctx context.Context, groupID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupRepositoryMock_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type GroupRepositoryMock_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uuid.UUID
//   - userID uuid.UUID
func (_e *GroupRepositoryMock_Expecter) AddUser(ctx interface{}, groupID interface{}, userID interface{}) *GroupRepositoryMock_AddUser_Call {
	return &GroupRepositoryMock_AddUser_Call{Call: _e.mock.On("AddUser", ctx, groupID, userID)}
}

func (_c *GroupRepositoryMock_AddUser_Call) Run(run func(ctx context.Context, groupID uuid.UUID, userID uuid.UUID)) *GroupRepositoryMock_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_AddUser_Call) Return(_a0 error) *GroupRepositoryMock_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupRepositoryMock_AddUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *GroupRepositoryMock_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// ClearK8sRoleName provides a mock function with given fields: ctx, g
func (_m *GroupRepositoryMock) ClearK8sRoleName(ctx context.Context, g *ent.Group) error {
	ret := _m.Called(ctx, g)

	if len(ret) == 0 {
		panic("no return value specified for ClearK8sRoleName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Group) error); ok {
		r0 = rf(ctx, g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupRepositoryMock_ClearK8sRoleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearK8sRoleName'
type GroupRepositoryMock_ClearK8sRoleName_Call struct {
	*mock.Call
}

// ClearK8sRoleName is a helper method to define mock.On call
//   - ctx context.Context
//   - g *ent.Group
func (_e *GroupRepositoryMock_Expecter) ClearK8sRoleName(ctx interface{}, g interface{}) *GroupRepositoryMock_ClearK8sRoleName_Call {
	return &GroupRepositoryMock_ClearK8sRoleName_Call{Call: _e.mock.On("ClearK8sRoleName", ctx, g)}
}

func (_c *GroupRepositoryMock_ClearK8sRoleName_Call) Run(run func(ctx context.Context, g *ent.Group)) *GroupRepositoryMock_ClearK8sRoleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Group))
	})
	return _c
}

func (_c *GroupRepositoryMock_ClearK8sRoleName_Call) Return(_a0 error) *GroupRepositoryMock_ClearK8sRoleName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupRepositoryMock_ClearK8sRoleName_Call) RunAndReturn(run func(context.Context, *ent.Group) error) *GroupRepositoryMock_ClearK8sRoleName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithK8sRole provides a mock function with given fields: ctx
func (_m *GroupRepositoryMock) GetAllWithK8sRole(ctx context.Context) ([]*ent.Group, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithK8sRole")
	}

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Group, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_GetAllWithK8sRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithK8sRole'
type GroupRepositoryMock_GetAllWithK8sRole_Call struct {
	*mock.Call
}

// GetAllWithK8sRole is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GroupRepositoryMock_Expecter) GetAllWithK8sRole(ctx interface{}) *GroupRepositoryMock_GetAllWithK8sRole_Call {
	return &GroupRepositoryMock_GetAllWithK8sRole_Call{Call: _e.mock.On("GetAllWithK8sRole", ctx)}
}

func (_c *GroupRepositoryMock_GetAllWithK8sRole_Call) Run(run func(ctx context.Context)) *GroupRepositoryMock_GetAllWithK8sRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GroupRepositoryMock_GetAllWithK8sRole_Call) Return(_a0 []*ent.Group, _a1 error) *GroupRepositoryMock_GetAllWithK8sRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_GetAllWithK8sRole_Call) RunAndReturn(run func(context.Context) ([]*ent.Group, error)) *GroupRepositoryMock_GetAllWithK8sRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithPermissions provides a mock function with given fields: ctx
func (_m *GroupRepositoryMock) GetAllWithPermissions(ctx context.Context) ([]*ent.Group, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithPermissions")
	}

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Group, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_GetAllWithPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithPermissions'
type GroupRepositoryMock_GetAllWithPermissions_Call struct {
	*mock.Call
}

// GetAllWithPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GroupRepositoryMock_Expecter) GetAllWithPermissions(ctx interface{}) *GroupRepositoryMock_GetAllWithPermissions_Call {
	return &GroupRepositoryMock_GetAllWithPermissions_Call{Call: _e.mock.On("GetAllWithPermissions", ctx)}
}

func (_c *GroupRepositoryMock_GetAllWithPermissions_Call) Run(run func(ctx context.Context)) *GroupRepositoryMock_GetAllWithPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GroupRepositoryMock_GetAllWithPermissions_Call) Return(_a0 []*ent.Group, _a1 error) *GroupRepositoryMock_GetAllWithPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_GetAllWithPermissions_Call) RunAndReturn(run func(context.Context) ([]*ent.Group, error)) *GroupRepositoryMock_GetAllWithPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *GroupRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Group); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type GroupRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *GroupRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *GroupRepositoryMock_GetByID_Call {
	return &GroupRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *GroupRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *GroupRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_GetByID_Call) Return(_a0 *ent.Group, _a1 error) *GroupRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Group, error)) *GroupRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMembers provides a mock function with given fields: ctx, groupID
func (_m *GroupRepositoryMock) GetMembers(ctx context.Context, groupID uuid.UUID) ([]*ent.User, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 []*ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.User, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.User); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_GetMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembers'
type GroupRepositoryMock_GetMembers_Call struct {
	*mock.Call
}

// GetMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uuid.UUID
func (_e *GroupRepositoryMock_Expecter) GetMembers(ctx interface{}, groupID interface{}) *GroupRepositoryMock_GetMembers_Call {
	return &GroupRepositoryMock_GetMembers_Call{Call: _e.mock.On("GetMembers", ctx, groupID)}
}

func (_c *GroupRepositoryMock_GetMembers_Call) Run(run func(ctx context.Context, groupID uuid.UUID)) *GroupRepositoryMock_GetMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_GetMembers_Call) Return(_a0 []*ent.User, _a1 error) *GroupRepositoryMock_GetMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_GetMembers_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.User, error)) *GroupRepositoryMock_GetMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, groupID
func (_m *GroupRepositoryMock) GetPermissions(ctx context.Context, groupID uuid.UUID) ([]*ent.Permission, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []*ent.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.Permission, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.Permission); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type GroupRepositoryMock_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uuid.UUID
func (_e *GroupRepositoryMock_Expecter) GetPermissions(ctx interface{}, groupID interface{}) *GroupRepositoryMock_GetPermissions_Call {
	return &GroupRepositoryMock_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, groupID)}
}

func (_c *GroupRepositoryMock_GetPermissions_Call) Run(run func(ctx context.Context, groupID uuid.UUID)) *GroupRepositoryMock_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_GetPermissions_Call) Return(_a0 []*ent.Permission, _a1 error) *GroupRepositoryMock_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_GetPermissions_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.Permission, error)) *GroupRepositoryMock_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// HasUserWithID provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepositoryMock) HasUserWithID(ctx context.Context, groupID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for HasUserWithID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepositoryMock_HasUserWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUserWithID'
type GroupRepositoryMock_HasUserWithID_Call struct {
	*mock.Call
}

// HasUserWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uuid.UUID
//   - userID uuid.UUID
func (_e *GroupRepositoryMock_Expecter) HasUserWithID(ctx interface{}, groupID interface{}, userID interface{}) *GroupRepositoryMock_HasUserWithID_Call {
	return &GroupRepositoryMock_HasUserWithID_Call{Call: _e.mock.On("HasUserWithID", ctx, groupID, userID)}
}

func (_c *GroupRepositoryMock_HasUserWithID_Call) Run(run func(ctx context.Context, groupID uuid.UUID, userID uuid.UUID)) *GroupRepositoryMock_HasUserWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_HasUserWithID_Call) Return(_a0 bool, _a1 error) *GroupRepositoryMock_HasUserWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepositoryMock_HasUserWithID_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *GroupRepositoryMock_HasUserWithID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUser provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepositoryMock) RemoveUser(ctx context.Context, groupID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupRepositoryMock_RemoveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUser'
type GroupRepositoryMock_RemoveUser_Call struct {
	*mock.Call
}

// RemoveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID uuid.UUID
//   - userID uuid.UUID
func (_e *GroupRepositoryMock_Expecter) RemoveUser(ctx interface{}, groupID interface{}, userID interface{}) *GroupRepositoryMock_RemoveUser_Call {
	return &GroupRepositoryMock_RemoveUser_Call{Call: _e.mock.On("RemoveUser", ctx, groupID, userID)}
}

func (_c *GroupRepositoryMock_RemoveUser_Call) Run(run func(ctx context.Context, groupID uuid.UUID, userID uuid.UUID)) *GroupRepositoryMock_RemoveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *GroupRepositoryMock_RemoveUser_Call) Return(_a0 error) *GroupRepositoryMock_RemoveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupRepositoryMock_RemoveUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *GroupRepositoryMock_RemoveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateK8sRoleName provides a mock function with given fields: ctx, g, k8sGroupName
func (_m *GroupRepositoryMock) UpdateK8sRoleName(ctx context.Context, g *ent.Group, k8sGroupName string) error {
	ret := _m.Called(ctx, g, k8sGroupName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateK8sRoleName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Group, string) error); ok {
		r0 = rf(ctx, g, k8sGroupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupRepositoryMock_UpdateK8sRoleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateK8sRoleName'
type GroupRepositoryMock_UpdateK8sRoleName_Call struct {
	*mock.Call
}

// UpdateK8sRoleName is a helper method to define mock.On call
//   - ctx context.Context
//   - g *ent.Group
//   - k8sGroupName string
func (_e *GroupRepositoryMock_Expecter) UpdateK8sRoleName(ctx interface{}, g interface{}, k8sGroupName interface{}) *GroupRepositoryMock_UpdateK8sRoleName_Call {
	return &GroupRepositoryMock_UpdateK8sRoleName_Call{Call: _e.mock.On("UpdateK8sRoleName", ctx, g, k8sGroupName)}
}

func (_c *GroupRepositoryMock_UpdateK8sRoleName_Call) Run(run func(ctx context.Context, g *ent.Group, k8sGroupName string)) *GroupRepositoryMock_UpdateK8sRoleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Group), args[2].(string))
	})
	return _c
}

func (_c *GroupRepositoryMock_UpdateK8sRoleName_Call) Return(_a0 error) *GroupRepositoryMock_UpdateK8sRoleName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupRepositoryMock_UpdateK8sRoleName_Call) RunAndReturn(run func(context.Context, *ent.Group, string) error) *GroupRepositoryMock_UpdateK8sRoleName_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupRepositoryMock creates a new instance of GroupRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepositoryMock {
	mock := &GroupRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
