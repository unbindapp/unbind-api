// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_repository_user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	uuid "github.com/google/uuid"
)

// UserRepositoryMock is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryMock struct {
	mock.Mock
}

type UserRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryMock) EXPECT() *UserRepositoryMock_Expecter {
	return &UserRepositoryMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, email, password
func (_m *UserRepositoryMock) Authenticate(ctx context.Context, email string, password string) (*ent.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ent.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ent.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type UserRepositoryMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *UserRepositoryMock_Expecter) Authenticate(ctx interface{}, email interface{}, password interface{}) *UserRepositoryMock_Authenticate_Call {
	return &UserRepositoryMock_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, email, password)}
}

func (_c *UserRepositoryMock_Authenticate_Call) Run(run func(ctx context.Context, email string, password string)) *UserRepositoryMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_Authenticate_Call) Return(_a0 *ent.User, _a1 error) *UserRepositoryMock_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_Authenticate_Call) RunAndReturn(run func(context.Context, string, string) (*ent.User, error)) *UserRepositoryMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepositoryMock) GetByEmail(ctx context.Context, email string) (*ent.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepositoryMock_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepositoryMock_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepositoryMock_GetByEmail_Call {
	return &UserRepositoryMock_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepositoryMock_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepositoryMock_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetByEmail_Call) Return(_a0 *ent.User, _a1 error) *UserRepositoryMock_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*ent.User, error)) *UserRepositoryMock_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx, userID
func (_m *UserRepositoryMock) GetGroups(ctx context.Context, userID uuid.UUID) ([]*ent.Group, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.Group, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.Group); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type UserRepositoryMock_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *UserRepositoryMock_Expecter) GetGroups(ctx interface{}, userID interface{}) *UserRepositoryMock_GetGroups_Call {
	return &UserRepositoryMock_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, userID)}
}

func (_c *UserRepositoryMock_GetGroups_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *UserRepositoryMock_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepositoryMock_GetGroups_Call) Return(_a0 []*ent.Group, _a1 error) *UserRepositoryMock_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetGroups_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.Group, error)) *UserRepositoryMock_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: ctx, email
func (_m *UserRepositoryMock) GetOrCreate(ctx context.Context, email string) (*ent.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type UserRepositoryMock_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepositoryMock_Expecter) GetOrCreate(ctx interface{}, email interface{}) *UserRepositoryMock_GetOrCreate_Call {
	return &UserRepositoryMock_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", ctx, email)}
}

func (_c *UserRepositoryMock_GetOrCreate_Call) Run(run func(ctx context.Context, email string)) *UserRepositoryMock_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetOrCreate_Call) Return(_a0 *ent.User, _a1 error) *UserRepositoryMock_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetOrCreate_Call) RunAndReturn(run func(context.Context, string) (*ent.User, error)) *UserRepositoryMock_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// IsSuperUser provides a mock function with given fields: ctx, userID
func (_m *UserRepositoryMock) IsSuperUser(ctx context.Context, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsSuperUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_IsSuperUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSuperUser'
type UserRepositoryMock_IsSuperUser_Call struct {
	*mock.Call
}

// IsSuperUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *UserRepositoryMock_Expecter) IsSuperUser(ctx interface{}, userID interface{}) *UserRepositoryMock_IsSuperUser_Call {
	return &UserRepositoryMock_IsSuperUser_Call{Call: _e.mock.On("IsSuperUser", ctx, userID)}
}

func (_c *UserRepositoryMock_IsSuperUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *UserRepositoryMock_IsSuperUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepositoryMock_IsSuperUser_Call) Return(_a0 bool, _a1 error) *UserRepositoryMock_IsSuperUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_IsSuperUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *UserRepositoryMock_IsSuperUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepositoryMock creates a new instance of UserRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryMock {
	mock := &UserRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
