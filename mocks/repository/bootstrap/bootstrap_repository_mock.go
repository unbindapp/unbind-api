// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_repository_bootstrap

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	repository "github.com/unbindapp/unbind-api/internal/repositories"
)

// BootstrapRepositoryMock is an autogenerated mock type for the BootstrapRepositoryInterface type
type BootstrapRepositoryMock struct {
	mock.Mock
}

type BootstrapRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BootstrapRepositoryMock) EXPECT() *BootstrapRepositoryMock_Expecter {
	return &BootstrapRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, email, password
func (_m *BootstrapRepositoryMock) CreateUser(ctx context.Context, email string, password string) (*ent.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ent.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ent.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BootstrapRepositoryMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type BootstrapRepositoryMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *BootstrapRepositoryMock_Expecter) CreateUser(ctx interface{}, email interface{}, password interface{}) *BootstrapRepositoryMock_CreateUser_Call {
	return &BootstrapRepositoryMock_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, email, password)}
}

func (_c *BootstrapRepositoryMock_CreateUser_Call) Run(run func(ctx context.Context, email string, password string)) *BootstrapRepositoryMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BootstrapRepositoryMock_CreateUser_Call) Return(user *ent.User, err error) *BootstrapRepositoryMock_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *BootstrapRepositoryMock_CreateUser_Call) RunAndReturn(run func(context.Context, string, string) (*ent.User, error)) *BootstrapRepositoryMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsBootstrapped provides a mock function with given fields: ctx, tx
func (_m *BootstrapRepositoryMock) IsBootstrapped(ctx context.Context, tx repository.TxInterface) (bool, bool, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for IsBootstrapped")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface) (bool, bool, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface) bool); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface) bool); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, repository.TxInterface) error); ok {
		r2 = rf(ctx, tx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BootstrapRepositoryMock_IsBootstrapped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBootstrapped'
type BootstrapRepositoryMock_IsBootstrapped_Call struct {
	*mock.Call
}

// IsBootstrapped is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
func (_e *BootstrapRepositoryMock_Expecter) IsBootstrapped(ctx interface{}, tx interface{}) *BootstrapRepositoryMock_IsBootstrapped_Call {
	return &BootstrapRepositoryMock_IsBootstrapped_Call{Call: _e.mock.On("IsBootstrapped", ctx, tx)}
}

func (_c *BootstrapRepositoryMock_IsBootstrapped_Call) Run(run func(ctx context.Context, tx repository.TxInterface)) *BootstrapRepositoryMock_IsBootstrapped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface))
	})
	return _c
}

func (_c *BootstrapRepositoryMock_IsBootstrapped_Call) Return(userExists bool, isBootstrapped bool, err error) *BootstrapRepositoryMock_IsBootstrapped_Call {
	_c.Call.Return(userExists, isBootstrapped, err)
	return _c
}

func (_c *BootstrapRepositoryMock_IsBootstrapped_Call) RunAndReturn(run func(context.Context, repository.TxInterface) (bool, bool, error)) *BootstrapRepositoryMock_IsBootstrapped_Call {
	_c.Call.Return(run)
	return _c
}

// NewBootstrapRepositoryMock creates a new instance of BootstrapRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBootstrapRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BootstrapRepositoryMock {
	mock := &BootstrapRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
