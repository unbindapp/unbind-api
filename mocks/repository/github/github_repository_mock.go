// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks_repository_github

import (
	context "context"

	github "github.com/google/go-github/v69/github"
	ent "github.com/unbindapp/unbind-api/ent"

	githubinstallation "github.com/unbindapp/unbind-api/ent/githubinstallation"
	"github.com/unbindapp/unbind-api/ent/schema"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GithubRepositoryMock is an autogenerated mock type for the GithubRepositoryInterface type
type GithubRepositoryMock struct {
	mock.Mock
}

type GithubRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GithubRepositoryMock) EXPECT() *GithubRepositoryMock_Expecter {
	return &GithubRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateApp provides a mock function with given fields: ctx, app, createdBy
func (_m *GithubRepositoryMock) CreateApp(ctx context.Context, app *github.AppConfig, createdBy uuid.UUID) (*ent.GithubApp, error) {
	ret := _m.Called(ctx, app, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *ent.GithubApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *github.AppConfig, uuid.UUID) (*ent.GithubApp, error)); ok {
		return rf(ctx, app, createdBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *github.AppConfig, uuid.UUID) *ent.GithubApp); ok {
		r0 = rf(ctx, app, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *github.AppConfig, uuid.UUID) error); ok {
		r1 = rf(ctx, app, createdBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type GithubRepositoryMock_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - ctx context.Context
//   - app *github.AppConfig
//   - createdBy uuid.UUID
func (_e *GithubRepositoryMock_Expecter) CreateApp(ctx interface{}, app interface{}, createdBy interface{}) *GithubRepositoryMock_CreateApp_Call {
	return &GithubRepositoryMock_CreateApp_Call{Call: _e.mock.On("CreateApp", ctx, app, createdBy)}
}

func (_c *GithubRepositoryMock_CreateApp_Call) Run(run func(ctx context.Context, app *github.AppConfig, createdBy uuid.UUID)) *GithubRepositoryMock_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*github.AppConfig), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *GithubRepositoryMock_CreateApp_Call) Return(_a0 *ent.GithubApp, _a1 error) *GithubRepositoryMock_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_CreateApp_Call) RunAndReturn(run func(context.Context, *github.AppConfig, uuid.UUID) (*ent.GithubApp, error)) *GithubRepositoryMock_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function with given fields: ctx
func (_m *GithubRepositoryMock) GetApp(ctx context.Context) (*ent.GithubApp, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *ent.GithubApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*ent.GithubApp, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *ent.GithubApp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type GithubRepositoryMock_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GithubRepositoryMock_Expecter) GetApp(ctx interface{}) *GithubRepositoryMock_GetApp_Call {
	return &GithubRepositoryMock_GetApp_Call{Call: _e.mock.On("GetApp", ctx)}
}

func (_c *GithubRepositoryMock_GetApp_Call) Run(run func(ctx context.Context)) *GithubRepositoryMock_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetApp_Call) Return(_a0 *ent.GithubApp, _a1 error) *GithubRepositoryMock_GetApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetApp_Call) RunAndReturn(run func(context.Context) (*ent.GithubApp, error)) *GithubRepositoryMock_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetApps provides a mock function with given fields: ctx, withInstallations
func (_m *GithubRepositoryMock) GetApps(ctx context.Context, withInstallations bool) ([]*ent.GithubApp, error) {
	ret := _m.Called(ctx, withInstallations)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 []*ent.GithubApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]*ent.GithubApp, error)); ok {
		return rf(ctx, withInstallations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []*ent.GithubApp); ok {
		r0 = rf(ctx, withInstallations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.GithubApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, withInstallations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApps'
type GithubRepositoryMock_GetApps_Call struct {
	*mock.Call
}

// GetApps is a helper method to define mock.On call
//   - ctx context.Context
//   - withInstallations bool
func (_e *GithubRepositoryMock_Expecter) GetApps(ctx interface{}, withInstallations interface{}) *GithubRepositoryMock_GetApps_Call {
	return &GithubRepositoryMock_GetApps_Call{Call: _e.mock.On("GetApps", ctx, withInstallations)}
}

func (_c *GithubRepositoryMock_GetApps_Call) Run(run func(ctx context.Context, withInstallations bool)) *GithubRepositoryMock_GetApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetApps_Call) Return(_a0 []*ent.GithubApp, _a1 error) *GithubRepositoryMock_GetApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetApps_Call) RunAndReturn(run func(context.Context, bool) ([]*ent.GithubApp, error)) *GithubRepositoryMock_GetApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetGithubAppByID provides a mock function with given fields: ctx, ID
func (_m *GithubRepositoryMock) GetGithubAppByID(ctx context.Context, ID int64) (*ent.GithubApp, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetGithubAppByID")
	}

	var r0 *ent.GithubApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ent.GithubApp, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ent.GithubApp); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetGithubAppByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGithubAppByID'
type GithubRepositoryMock_GetGithubAppByID_Call struct {
	*mock.Call
}

// GetGithubAppByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *GithubRepositoryMock_Expecter) GetGithubAppByID(ctx interface{}, ID interface{}) *GithubRepositoryMock_GetGithubAppByID_Call {
	return &GithubRepositoryMock_GetGithubAppByID_Call{Call: _e.mock.On("GetGithubAppByID", ctx, ID)}
}

func (_c *GithubRepositoryMock_GetGithubAppByID_Call) Run(run func(ctx context.Context, ID int64)) *GithubRepositoryMock_GetGithubAppByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetGithubAppByID_Call) Return(_a0 *ent.GithubApp, _a1 error) *GithubRepositoryMock_GetGithubAppByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetGithubAppByID_Call) RunAndReturn(run func(context.Context, int64) (*ent.GithubApp, error)) *GithubRepositoryMock_GetGithubAppByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallationByID provides a mock function with given fields: ctx, ID
func (_m *GithubRepositoryMock) GetInstallationByID(ctx context.Context, ID int64) (*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallationByID")
	}

	var r0 *ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ent.GithubInstallation, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ent.GithubInstallation); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetInstallationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallationByID'
type GithubRepositoryMock_GetInstallationByID_Call struct {
	*mock.Call
}

// GetInstallationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *GithubRepositoryMock_Expecter) GetInstallationByID(ctx interface{}, ID interface{}) *GithubRepositoryMock_GetInstallationByID_Call {
	return &GithubRepositoryMock_GetInstallationByID_Call{Call: _e.mock.On("GetInstallationByID", ctx, ID)}
}

func (_c *GithubRepositoryMock_GetInstallationByID_Call) Run(run func(ctx context.Context, ID int64)) *GithubRepositoryMock_GetInstallationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationByID_Call) Return(_a0 *ent.GithubInstallation, _a1 error) *GithubRepositoryMock_GetInstallationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationByID_Call) RunAndReturn(run func(context.Context, int64) (*ent.GithubInstallation, error)) *GithubRepositoryMock_GetInstallationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallationsByAppID provides a mock function with given fields: ctx, appID
func (_m *GithubRepositoryMock) GetInstallationsByAppID(ctx context.Context, appID int64) ([]*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallationsByAppID")
	}

	var r0 []*ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*ent.GithubInstallation, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*ent.GithubInstallation); ok {
		r0 = rf(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetInstallationsByAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallationsByAppID'
type GithubRepositoryMock_GetInstallationsByAppID_Call struct {
	*mock.Call
}

// GetInstallationsByAppID is a helper method to define mock.On call
//   - ctx context.Context
//   - appID int64
func (_e *GithubRepositoryMock_Expecter) GetInstallationsByAppID(ctx interface{}, appID interface{}) *GithubRepositoryMock_GetInstallationsByAppID_Call {
	return &GithubRepositoryMock_GetInstallationsByAppID_Call{Call: _e.mock.On("GetInstallationsByAppID", ctx, appID)}
}

func (_c *GithubRepositoryMock_GetInstallationsByAppID_Call) Run(run func(ctx context.Context, appID int64)) *GithubRepositoryMock_GetInstallationsByAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationsByAppID_Call) Return(_a0 []*ent.GithubInstallation, _a1 error) *GithubRepositoryMock_GetInstallationsByAppID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationsByAppID_Call) RunAndReturn(run func(context.Context, int64) ([]*ent.GithubInstallation, error)) *GithubRepositoryMock_GetInstallationsByAppID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallationsByCreator provides a mock function with given fields: ctx, createdBy
func (_m *GithubRepositoryMock) GetInstallationsByCreator(ctx context.Context, createdBy uuid.UUID) ([]*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallationsByCreator")
	}

	var r0 []*ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.GithubInstallation, error)); ok {
		return rf(ctx, createdBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.GithubInstallation); ok {
		r0 = rf(ctx, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, createdBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_GetInstallationsByCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallationsByCreator'
type GithubRepositoryMock_GetInstallationsByCreator_Call struct {
	*mock.Call
}

// GetInstallationsByCreator is a helper method to define mock.On call
//   - ctx context.Context
//   - createdBy uuid.UUID
func (_e *GithubRepositoryMock_Expecter) GetInstallationsByCreator(ctx interface{}, createdBy interface{}) *GithubRepositoryMock_GetInstallationsByCreator_Call {
	return &GithubRepositoryMock_GetInstallationsByCreator_Call{Call: _e.mock.On("GetInstallationsByCreator", ctx, createdBy)}
}

func (_c *GithubRepositoryMock_GetInstallationsByCreator_Call) Run(run func(ctx context.Context, createdBy uuid.UUID)) *GithubRepositoryMock_GetInstallationsByCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationsByCreator_Call) Return(_a0 []*ent.GithubInstallation, _a1 error) *GithubRepositoryMock_GetInstallationsByCreator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_GetInstallationsByCreator_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.GithubInstallation, error)) *GithubRepositoryMock_GetInstallationsByCreator_Call {
	_c.Call.Return(run)
	return _c
}

// SetInstallationActive provides a mock function with given fields: ctx, id, active
func (_m *GithubRepositoryMock) SetInstallationActive(ctx context.Context, id int64, active bool) (*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, id, active)

	if len(ret) == 0 {
		panic("no return value specified for SetInstallationActive")
	}

	var r0 *ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (*ent.GithubInstallation, error)); ok {
		return rf(ctx, id, active)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) *ent.GithubInstallation); ok {
		r0 = rf(ctx, id, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, id, active)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_SetInstallationActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInstallationActive'
type GithubRepositoryMock_SetInstallationActive_Call struct {
	*mock.Call
}

// SetInstallationActive is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - active bool
func (_e *GithubRepositoryMock_Expecter) SetInstallationActive(ctx interface{}, id interface{}, active interface{}) *GithubRepositoryMock_SetInstallationActive_Call {
	return &GithubRepositoryMock_SetInstallationActive_Call{Call: _e.mock.On("SetInstallationActive", ctx, id, active)}
}

func (_c *GithubRepositoryMock_SetInstallationActive_Call) Run(run func(ctx context.Context, id int64, active bool)) *GithubRepositoryMock_SetInstallationActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *GithubRepositoryMock_SetInstallationActive_Call) Return(_a0 *ent.GithubInstallation, _a1 error) *GithubRepositoryMock_SetInstallationActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_SetInstallationActive_Call) RunAndReturn(run func(context.Context, int64, bool) (*ent.GithubInstallation, error)) *GithubRepositoryMock_SetInstallationActive_Call {
	_c.Call.Return(run)
	return _c
}

// SetInstallationSuspended provides a mock function with given fields: ctx, id, suspended
func (_m *GithubRepositoryMock) SetInstallationSuspended(ctx context.Context, id int64, suspended bool) (*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, id, suspended)

	if len(ret) == 0 {
		panic("no return value specified for SetInstallationSuspended")
	}

	var r0 *ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (*ent.GithubInstallation, error)); ok {
		return rf(ctx, id, suspended)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) *ent.GithubInstallation); ok {
		r0 = rf(ctx, id, suspended)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, id, suspended)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_SetInstallationSuspended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInstallationSuspended'
type GithubRepositoryMock_SetInstallationSuspended_Call struct {
	*mock.Call
}

// SetInstallationSuspended is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - suspended bool
func (_e *GithubRepositoryMock_Expecter) SetInstallationSuspended(ctx interface{}, id interface{}, suspended interface{}) *GithubRepositoryMock_SetInstallationSuspended_Call {
	return &GithubRepositoryMock_SetInstallationSuspended_Call{Call: _e.mock.On("SetInstallationSuspended", ctx, id, suspended)}
}

func (_c *GithubRepositoryMock_SetInstallationSuspended_Call) Run(run func(ctx context.Context, id int64, suspended bool)) *GithubRepositoryMock_SetInstallationSuspended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *GithubRepositoryMock_SetInstallationSuspended_Call) Return(_a0 *ent.GithubInstallation, _a1 error) *GithubRepositoryMock_SetInstallationSuspended_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_SetInstallationSuspended_Call) RunAndReturn(run func(context.Context, int64, bool) (*ent.GithubInstallation, error)) *GithubRepositoryMock_SetInstallationSuspended_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertInstallation provides a mock function with given fields: ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events
func (_m *GithubRepositoryMock) UpsertInstallation(ctx context.Context, id int64, appID int64, accountID int64, accountLogin string, accountType githubinstallation.AccountType, accountURL string, repositorySelection githubinstallation.RepositorySelection, suspended bool, active bool, permissions schema.GithubInstallationPermissions, events []string) (*ent.GithubInstallation, error) {
	ret := _m.Called(ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events)

	if len(ret) == 0 {
		panic("no return value specified for UpsertInstallation")
	}

	var r0 *ent.GithubInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, string, githubinstallation.AccountType, string, githubinstallation.RepositorySelection, bool, bool, schema.GithubInstallationPermissions, []string) (*ent.GithubInstallation, error)); ok {
		return rf(ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, string, githubinstallation.AccountType, string, githubinstallation.RepositorySelection, bool, bool, schema.GithubInstallationPermissions, []string) *ent.GithubInstallation); ok {
		r0 = rf(ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GithubInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, string, githubinstallation.AccountType, string, githubinstallation.RepositorySelection, bool, bool, schema.GithubInstallationPermissions, []string) error); ok {
		r1 = rf(ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubRepositoryMock_UpsertInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertInstallation'
type GithubRepositoryMock_UpsertInstallation_Call struct {
	*mock.Call
}

// UpsertInstallation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - appID int64
//   - accountID int64
//   - accountLogin string
//   - accountType githubinstallation.AccountType
//   - accountURL string
//   - repositorySelection githubinstallation.RepositorySelection
//   - suspended bool
//   - active bool
//   - permissions models.GithubInstallationPermissions
//   - events []string
func (_e *GithubRepositoryMock_Expecter) UpsertInstallation(ctx interface{}, id interface{}, appID interface{}, accountID interface{}, accountLogin interface{}, accountType interface{}, accountURL interface{}, repositorySelection interface{}, suspended interface{}, active interface{}, permissions interface{}, events interface{}) *GithubRepositoryMock_UpsertInstallation_Call {
	return &GithubRepositoryMock_UpsertInstallation_Call{Call: _e.mock.On("UpsertInstallation", ctx, id, appID, accountID, accountLogin, accountType, accountURL, repositorySelection, suspended, active, permissions, events)}
}

func (_c *GithubRepositoryMock_UpsertInstallation_Call) Run(run func(ctx context.Context, id int64, appID int64, accountID int64, accountLogin string, accountType githubinstallation.AccountType, accountURL string, repositorySelection githubinstallation.RepositorySelection, suspended bool, active bool, permissions schema.GithubInstallationPermissions, events []string)) *GithubRepositoryMock_UpsertInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(string), args[5].(githubinstallation.AccountType), args[6].(string), args[7].(githubinstallation.RepositorySelection), args[8].(bool), args[9].(bool), args[10].(schema.GithubInstallationPermissions), args[11].([]string))
	})
	return _c
}

func (_c *GithubRepositoryMock_UpsertInstallation_Call) Return(_a0 *ent.GithubInstallation, _a1 error) *GithubRepositoryMock_UpsertInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubRepositoryMock_UpsertInstallation_Call) RunAndReturn(run func(context.Context, int64, int64, int64, string, githubinstallation.AccountType, string, githubinstallation.RepositorySelection, bool, bool, schema.GithubInstallationPermissions, []string) (*ent.GithubInstallation, error)) *GithubRepositoryMock_UpsertInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// NewGithubRepositoryMock creates a new instance of GithubRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGithubRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GithubRepositoryMock {
	mock := &GithubRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
