// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_project

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	models "github.com/unbindapp/unbind-api/internal/models"

	predicate "github.com/unbindapp/unbind-api/ent/predicate"

	repository "github.com/unbindapp/unbind-api/internal/repositories"

	uuid "github.com/google/uuid"
)

// ProjectRepositoryMock is an autogenerated mock type for the ProjectRepositoryInterface type
type ProjectRepositoryMock struct {
	mock.Mock
}

type ProjectRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectRepositoryMock) EXPECT() *ProjectRepositoryMock_Expecter {
	return &ProjectRepositoryMock_Expecter{mock: &_m.Mock}
}

// ClearDefaultEnvironment provides a mock function with given fields: ctx, tx, projectID
func (_m *ProjectRepositoryMock) ClearDefaultEnvironment(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID) error {
	ret := _m.Called(ctx, tx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ClearDefaultEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepositoryMock_ClearDefaultEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDefaultEnvironment'
type ProjectRepositoryMock_ClearDefaultEnvironment_Call struct {
	*mock.Call
}

// ClearDefaultEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - projectID uuid.UUID
func (_e *ProjectRepositoryMock_Expecter) ClearDefaultEnvironment(ctx interface{}, tx interface{}, projectID interface{}) *ProjectRepositoryMock_ClearDefaultEnvironment_Call {
	return &ProjectRepositoryMock_ClearDefaultEnvironment_Call{Call: _e.mock.On("ClearDefaultEnvironment", ctx, tx, projectID)}
}

func (_c *ProjectRepositoryMock_ClearDefaultEnvironment_Call) Run(run func(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID)) *ProjectRepositoryMock_ClearDefaultEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectRepositoryMock_ClearDefaultEnvironment_Call) Return(_a0 error) *ProjectRepositoryMock_ClearDefaultEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepositoryMock_ClearDefaultEnvironment_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID) error) *ProjectRepositoryMock_ClearDefaultEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret
func (_m *ProjectRepositoryMock) Create(ctx context.Context, tx repository.TxInterface, teamID uuid.UUID, kubernetesName string, name string, description *string, kubernetesSecret string) (*ent.Project, error) {
	ret := _m.Called(ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, *string, string) (*ent.Project, error)); ok {
		return rf(ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, *string, string) *ent.Project); ok {
		r0 = rf(ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, *string, string) error); ok {
		r1 = rf(ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProjectRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - teamID uuid.UUID
//   - kubernetesName string
//   - name string
//   - description *string
//   - kubernetesSecret string
func (_e *ProjectRepositoryMock_Expecter) Create(ctx interface{}, tx interface{}, teamID interface{}, kubernetesName interface{}, name interface{}, description interface{}, kubernetesSecret interface{}) *ProjectRepositoryMock_Create_Call {
	return &ProjectRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, tx, teamID, kubernetesName, name, description, kubernetesSecret)}
}

func (_c *ProjectRepositoryMock_Create_Call) Run(run func(ctx context.Context, tx repository.TxInterface, teamID uuid.UUID, kubernetesName string, name string, description *string, kubernetesSecret string)) *ProjectRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID), args[3].(string), args[4].(string), args[5].(*string), args[6].(string))
	})
	return _c
}

func (_c *ProjectRepositoryMock_Create_Call) Return(_a0 *ent.Project, _a1 error) *ProjectRepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID, string, string, *string, string) (*ent.Project, error)) *ProjectRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, tx, projectID
func (_m *ProjectRepositoryMock) Delete(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID) error {
	ret := _m.Called(ctx, tx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ProjectRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - projectID uuid.UUID
func (_e *ProjectRepositoryMock_Expecter) Delete(ctx interface{}, tx interface{}, projectID interface{}) *ProjectRepositoryMock_Delete_Call {
	return &ProjectRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, tx, projectID)}
}

func (_c *ProjectRepositoryMock_Delete_Call) Run(run func(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID)) *ProjectRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectRepositoryMock_Delete_Call) Return(_a0 error) *ProjectRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID) error) *ProjectRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ProjectRepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Project); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProjectRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ProjectRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *ProjectRepositoryMock_GetByID_Call {
	return &ProjectRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ProjectRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectRepositoryMock_GetByID_Call) Return(_a0 *ent.Project, _a1 error) *ProjectRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Project, error)) *ProjectRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTeam provides a mock function with given fields: ctx, teamID, authPredicate, sortField, sortOrder
func (_m *ProjectRepositoryMock) GetByTeam(ctx context.Context, teamID uuid.UUID, authPredicate predicate.Project, sortField models.SortByField, sortOrder models.SortOrder) ([]*ent.Project, error) {
	ret := _m.Called(ctx, teamID, authPredicate, sortField, sortOrder)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeam")
	}

	var r0 []*ent.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, predicate.Project, models.SortByField, models.SortOrder) ([]*ent.Project, error)); ok {
		return rf(ctx, teamID, authPredicate, sortField, sortOrder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, predicate.Project, models.SortByField, models.SortOrder) []*ent.Project); ok {
		r0 = rf(ctx, teamID, authPredicate, sortField, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, predicate.Project, models.SortByField, models.SortOrder) error); ok {
		r1 = rf(ctx, teamID, authPredicate, sortField, sortOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepositoryMock_GetByTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeam'
type ProjectRepositoryMock_GetByTeam_Call struct {
	*mock.Call
}

// GetByTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID uuid.UUID
//   - authPredicate predicate.Project
//   - sortField models.SortByField
//   - sortOrder models.SortOrder
func (_e *ProjectRepositoryMock_Expecter) GetByTeam(ctx interface{}, teamID interface{}, authPredicate interface{}, sortField interface{}, sortOrder interface{}) *ProjectRepositoryMock_GetByTeam_Call {
	return &ProjectRepositoryMock_GetByTeam_Call{Call: _e.mock.On("GetByTeam", ctx, teamID, authPredicate, sortField, sortOrder)}
}

func (_c *ProjectRepositoryMock_GetByTeam_Call) Run(run func(ctx context.Context, teamID uuid.UUID, authPredicate predicate.Project, sortField models.SortByField, sortOrder models.SortOrder)) *ProjectRepositoryMock_GetByTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(predicate.Project), args[3].(models.SortByField), args[4].(models.SortOrder))
	})
	return _c
}

func (_c *ProjectRepositoryMock_GetByTeam_Call) Return(_a0 []*ent.Project, _a1 error) *ProjectRepositoryMock_GetByTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepositoryMock_GetByTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, predicate.Project, models.SortByField, models.SortOrder) ([]*ent.Project, error)) *ProjectRepositoryMock_GetByTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamID provides a mock function with given fields: ctx, id
func (_m *ProjectRepositoryMock) GetTeamID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepositoryMock_GetTeamID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamID'
type ProjectRepositoryMock_GetTeamID_Call struct {
	*mock.Call
}

// GetTeamID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ProjectRepositoryMock_Expecter) GetTeamID(ctx interface{}, id interface{}) *ProjectRepositoryMock_GetTeamID_Call {
	return &ProjectRepositoryMock_GetTeamID_Call{Call: _e.mock.On("GetTeamID", ctx, id)}
}

func (_c *ProjectRepositoryMock_GetTeamID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ProjectRepositoryMock_GetTeamID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProjectRepositoryMock_GetTeamID_Call) Return(_a0 uuid.UUID, _a1 error) *ProjectRepositoryMock_GetTeamID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepositoryMock_GetTeamID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (uuid.UUID, error)) *ProjectRepositoryMock_GetTeamID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, tx, projectID, defaultEnvironmentID, name, description
func (_m *ProjectRepositoryMock) Update(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID, defaultEnvironmentID *uuid.UUID, name string, description *string) (*ent.Project, error) {
	ret := _m.Called(ctx, tx, projectID, defaultEnvironmentID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, *uuid.UUID, string, *string) (*ent.Project, error)); ok {
		return rf(ctx, tx, projectID, defaultEnvironmentID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, *uuid.UUID, string, *string) *ent.Project); ok {
		r0 = rf(ctx, tx, projectID, defaultEnvironmentID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, uuid.UUID, *uuid.UUID, string, *string) error); ok {
		r1 = rf(ctx, tx, projectID, defaultEnvironmentID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProjectRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - projectID uuid.UUID
//   - defaultEnvironmentID *uuid.UUID
//   - name string
//   - description *string
func (_e *ProjectRepositoryMock_Expecter) Update(ctx interface{}, tx interface{}, projectID interface{}, defaultEnvironmentID interface{}, name interface{}, description interface{}) *ProjectRepositoryMock_Update_Call {
	return &ProjectRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, tx, projectID, defaultEnvironmentID, name, description)}
}

func (_c *ProjectRepositoryMock_Update_Call) Run(run func(ctx context.Context, tx repository.TxInterface, projectID uuid.UUID, defaultEnvironmentID *uuid.UUID, name string, description *string)) *ProjectRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID), args[3].(*uuid.UUID), args[4].(string), args[5].(*string))
	})
	return _c
}

func (_c *ProjectRepositoryMock_Update_Call) Return(_a0 *ent.Project, _a1 error) *ProjectRepositoryMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID, *uuid.UUID, string, *string) (*ent.Project, error)) *ProjectRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectRepositoryMock creates a new instance of ProjectRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepositoryMock {
	mock := &ProjectRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
