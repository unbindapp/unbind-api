// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repository_s3

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/unbindapp/unbind-api/ent"

	repository "github.com/unbindapp/unbind-api/internal/repositories"

	uuid "github.com/google/uuid"
)

// S3RepositoryMock is an autogenerated mock type for the S3RepositoryInterface type
type S3RepositoryMock struct {
	mock.Mock
}

type S3RepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *S3RepositoryMock) EXPECT() *S3RepositoryMock_Expecter {
	return &S3RepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx, teamID, name, endpoint, region, kubernetesSecret
func (_m *S3RepositoryMock) Create(ctx context.Context, tx repository.TxInterface, teamID uuid.UUID, name string, endpoint string, region string, kubernetesSecret string) (*ent.S3, error) {
	ret := _m.Called(ctx, tx, teamID, name, endpoint, region, kubernetesSecret)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.S3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, string, string) (*ent.S3, error)); ok {
		return rf(ctx, tx, teamID, name, endpoint, region, kubernetesSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, string, string) *ent.S3); ok {
		r0 = rf(ctx, tx, teamID, name, endpoint, region, kubernetesSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.S3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxInterface, uuid.UUID, string, string, string, string) error); ok {
		r1 = rf(ctx, tx, teamID, name, endpoint, region, kubernetesSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3RepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type S3RepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - teamID uuid.UUID
//   - name string
//   - endpoint string
//   - region string
//   - kubernetesSecret string
func (_e *S3RepositoryMock_Expecter) Create(ctx interface{}, tx interface{}, teamID interface{}, name interface{}, endpoint interface{}, region interface{}, kubernetesSecret interface{}) *S3RepositoryMock_Create_Call {
	return &S3RepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, tx, teamID, name, endpoint, region, kubernetesSecret)}
}

func (_c *S3RepositoryMock_Create_Call) Run(run func(ctx context.Context, tx repository.TxInterface, teamID uuid.UUID, name string, endpoint string, region string, kubernetesSecret string)) *S3RepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID), args[3].(string), args[4].(string), args[5].(string), args[6].(string))
	})
	return _c
}

func (_c *S3RepositoryMock_Create_Call) Return(_a0 *ent.S3, _a1 error) *S3RepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *S3RepositoryMock_Create_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID, string, string, string, string) (*ent.S3, error)) *S3RepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, tx, id
func (_m *S3RepositoryMock) Delete(ctx context.Context, tx repository.TxInterface, id uuid.UUID) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxInterface, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// S3RepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type S3RepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tx repository.TxInterface
//   - id uuid.UUID
func (_e *S3RepositoryMock_Expecter) Delete(ctx interface{}, tx interface{}, id interface{}) *S3RepositoryMock_Delete_Call {
	return &S3RepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, tx, id)}
}

func (_c *S3RepositoryMock_Delete_Call) Run(run func(ctx context.Context, tx repository.TxInterface, id uuid.UUID)) *S3RepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.TxInterface), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *S3RepositoryMock_Delete_Call) Return(_a0 error) *S3RepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *S3RepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, repository.TxInterface, uuid.UUID) error) *S3RepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *S3RepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*ent.S3, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *ent.S3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.S3, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.S3); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.S3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3RepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type S3RepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *S3RepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *S3RepositoryMock_GetByID_Call {
	return &S3RepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *S3RepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *S3RepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *S3RepositoryMock_GetByID_Call) Return(_a0 *ent.S3, _a1 error) *S3RepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *S3RepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.S3, error)) *S3RepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTeam provides a mock function with given fields: ctx, teamID
func (_m *S3RepositoryMock) GetByTeam(ctx context.Context, teamID uuid.UUID) ([]*ent.S3, error) {
	ret := _m.Called(ctx, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeam")
	}

	var r0 []*ent.S3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.S3, error)); ok {
		return rf(ctx, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.S3); ok {
		r0 = rf(ctx, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.S3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3RepositoryMock_GetByTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeam'
type S3RepositoryMock_GetByTeam_Call struct {
	*mock.Call
}

// GetByTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID uuid.UUID
func (_e *S3RepositoryMock_Expecter) GetByTeam(ctx interface{}, teamID interface{}) *S3RepositoryMock_GetByTeam_Call {
	return &S3RepositoryMock_GetByTeam_Call{Call: _e.mock.On("GetByTeam", ctx, teamID)}
}

func (_c *S3RepositoryMock_GetByTeam_Call) Run(run func(ctx context.Context, teamID uuid.UUID)) *S3RepositoryMock_GetByTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *S3RepositoryMock_GetByTeam_Call) Return(_a0 []*ent.S3, _a1 error) *S3RepositoryMock_GetByTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *S3RepositoryMock_GetByTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.S3, error)) *S3RepositoryMock_GetByTeam_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, name
func (_m *S3RepositoryMock) Update(ctx context.Context, id uuid.UUID, name string) (*ent.S3, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.S3
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*ent.S3, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *ent.S3); ok {
		r0 = rf(ctx, id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.S3)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// S3RepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type S3RepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - name string
func (_e *S3RepositoryMock_Expecter) Update(ctx interface{}, id interface{}, name interface{}) *S3RepositoryMock_Update_Call {
	return &S3RepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, id, name)}
}

func (_c *S3RepositoryMock_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, name string)) *S3RepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *S3RepositoryMock_Update_Call) Return(_a0 *ent.S3, _a1 error) *S3RepositoryMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *S3RepositoryMock_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*ent.S3, error)) *S3RepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewS3RepositoryMock creates a new instance of S3RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3RepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3RepositoryMock {
	mock := &S3RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
