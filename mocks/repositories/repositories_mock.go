// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_repositories

import (
	context "context"

	bootstrap_repo "github.com/unbindapp/unbind-api/internal/repositories/bootstrap"

	deployment_repo "github.com/unbindapp/unbind-api/internal/repositories/deployment"

	ent "github.com/unbindapp/unbind-api/ent"

	environment_repo "github.com/unbindapp/unbind-api/internal/repositories/environment"

	github_repo "github.com/unbindapp/unbind-api/internal/repositories/github"

	group_repo "github.com/unbindapp/unbind-api/internal/repositories/group"

	mock "github.com/stretchr/testify/mock"

	oauth_repo "github.com/unbindapp/unbind-api/internal/repositories/oauth"

	permissions_repo "github.com/unbindapp/unbind-api/internal/repositories/permissions"

	project_repo "github.com/unbindapp/unbind-api/internal/repositories/project"

	repository "github.com/unbindapp/unbind-api/internal/repositories"

	s3_repo "github.com/unbindapp/unbind-api/internal/repositories/s3"

	service_repo "github.com/unbindapp/unbind-api/internal/repositories/service"

	servicegroup_repo "github.com/unbindapp/unbind-api/internal/repositories/service_group"

	system_repo "github.com/unbindapp/unbind-api/internal/repositories/system"

	team_repo "github.com/unbindapp/unbind-api/internal/repositories/team"

	template_repo "github.com/unbindapp/unbind-api/internal/repositories/template"

	user_repo "github.com/unbindapp/unbind-api/internal/repositories/user"

	variable_repo "github.com/unbindapp/unbind-api/internal/repositories/variables"

	webhook_repo "github.com/unbindapp/unbind-api/internal/repositories/webhook"
)

// RepositoriesMock is an autogenerated mock type for the RepositoriesInterface type
type RepositoriesMock struct {
	mock.Mock
}

type RepositoriesMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoriesMock) EXPECT() *RepositoriesMock_Expecter {
	return &RepositoriesMock_Expecter{mock: &_m.Mock}
}

// Bootstrap provides a mock function with no fields
func (_m *RepositoriesMock) Bootstrap() bootstrap_repo.BootstrapRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 bootstrap_repo.BootstrapRepositoryInterface
	if rf, ok := ret.Get(0).(func() bootstrap_repo.BootstrapRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bootstrap_repo.BootstrapRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Bootstrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bootstrap'
type RepositoriesMock_Bootstrap_Call struct {
	*mock.Call
}

// Bootstrap is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Bootstrap() *RepositoriesMock_Bootstrap_Call {
	return &RepositoriesMock_Bootstrap_Call{Call: _e.mock.On("Bootstrap")}
}

func (_c *RepositoriesMock_Bootstrap_Call) Run(run func()) *RepositoriesMock_Bootstrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Bootstrap_Call) Return(_a0 bootstrap_repo.BootstrapRepositoryInterface) *RepositoriesMock_Bootstrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Bootstrap_Call) RunAndReturn(run func() bootstrap_repo.BootstrapRepositoryInterface) *RepositoriesMock_Bootstrap_Call {
	_c.Call.Return(run)
	return _c
}

// Deployment provides a mock function with no fields
func (_m *RepositoriesMock) Deployment() deployment_repo.DeploymentRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deployment")
	}

	var r0 deployment_repo.DeploymentRepositoryInterface
	if rf, ok := ret.Get(0).(func() deployment_repo.DeploymentRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deployment_repo.DeploymentRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Deployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deployment'
type RepositoriesMock_Deployment_Call struct {
	*mock.Call
}

// Deployment is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Deployment() *RepositoriesMock_Deployment_Call {
	return &RepositoriesMock_Deployment_Call{Call: _e.mock.On("Deployment")}
}

func (_c *RepositoriesMock_Deployment_Call) Run(run func()) *RepositoriesMock_Deployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Deployment_Call) Return(_a0 deployment_repo.DeploymentRepositoryInterface) *RepositoriesMock_Deployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Deployment_Call) RunAndReturn(run func() deployment_repo.DeploymentRepositoryInterface) *RepositoriesMock_Deployment_Call {
	_c.Call.Return(run)
	return _c
}

// Ent provides a mock function with no fields
func (_m *RepositoriesMock) Ent() *ent.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ent")
	}

	var r0 *ent.Client
	if rf, ok := ret.Get(0).(func() *ent.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Client)
		}
	}

	return r0
}

// RepositoriesMock_Ent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ent'
type RepositoriesMock_Ent_Call struct {
	*mock.Call
}

// Ent is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Ent() *RepositoriesMock_Ent_Call {
	return &RepositoriesMock_Ent_Call{Call: _e.mock.On("Ent")}
}

func (_c *RepositoriesMock_Ent_Call) Run(run func()) *RepositoriesMock_Ent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Ent_Call) Return(_a0 *ent.Client) *RepositoriesMock_Ent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Ent_Call) RunAndReturn(run func() *ent.Client) *RepositoriesMock_Ent_Call {
	_c.Call.Return(run)
	return _c
}

// Environment provides a mock function with no fields
func (_m *RepositoriesMock) Environment() environment_repo.EnvironmentRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environment")
	}

	var r0 environment_repo.EnvironmentRepositoryInterface
	if rf, ok := ret.Get(0).(func() environment_repo.EnvironmentRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environment_repo.EnvironmentRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Environment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environment'
type RepositoriesMock_Environment_Call struct {
	*mock.Call
}

// Environment is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Environment() *RepositoriesMock_Environment_Call {
	return &RepositoriesMock_Environment_Call{Call: _e.mock.On("Environment")}
}

func (_c *RepositoriesMock_Environment_Call) Run(run func()) *RepositoriesMock_Environment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Environment_Call) Return(_a0 environment_repo.EnvironmentRepositoryInterface) *RepositoriesMock_Environment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Environment_Call) RunAndReturn(run func() environment_repo.EnvironmentRepositoryInterface) *RepositoriesMock_Environment_Call {
	_c.Call.Return(run)
	return _c
}

// Github provides a mock function with no fields
func (_m *RepositoriesMock) Github() github_repo.GithubRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Github")
	}

	var r0 github_repo.GithubRepositoryInterface
	if rf, ok := ret.Get(0).(func() github_repo.GithubRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(github_repo.GithubRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Github_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Github'
type RepositoriesMock_Github_Call struct {
	*mock.Call
}

// Github is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Github() *RepositoriesMock_Github_Call {
	return &RepositoriesMock_Github_Call{Call: _e.mock.On("Github")}
}

func (_c *RepositoriesMock_Github_Call) Run(run func()) *RepositoriesMock_Github_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Github_Call) Return(_a0 github_repo.GithubRepositoryInterface) *RepositoriesMock_Github_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Github_Call) RunAndReturn(run func() github_repo.GithubRepositoryInterface) *RepositoriesMock_Github_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with no fields
func (_m *RepositoriesMock) Group() group_repo.GroupRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 group_repo.GroupRepositoryInterface
	if rf, ok := ret.Get(0).(func() group_repo.GroupRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(group_repo.GroupRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type RepositoriesMock_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Group() *RepositoriesMock_Group_Call {
	return &RepositoriesMock_Group_Call{Call: _e.mock.On("Group")}
}

func (_c *RepositoriesMock_Group_Call) Run(run func()) *RepositoriesMock_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Group_Call) Return(_a0 group_repo.GroupRepositoryInterface) *RepositoriesMock_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Group_Call) RunAndReturn(run func() group_repo.GroupRepositoryInterface) *RepositoriesMock_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Oauth provides a mock function with no fields
func (_m *RepositoriesMock) Oauth() oauth_repo.OauthRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Oauth")
	}

	var r0 oauth_repo.OauthRepositoryInterface
	if rf, ok := ret.Get(0).(func() oauth_repo.OauthRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth_repo.OauthRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Oauth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Oauth'
type RepositoriesMock_Oauth_Call struct {
	*mock.Call
}

// Oauth is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Oauth() *RepositoriesMock_Oauth_Call {
	return &RepositoriesMock_Oauth_Call{Call: _e.mock.On("Oauth")}
}

func (_c *RepositoriesMock_Oauth_Call) Run(run func()) *RepositoriesMock_Oauth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Oauth_Call) Return(_a0 oauth_repo.OauthRepositoryInterface) *RepositoriesMock_Oauth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Oauth_Call) RunAndReturn(run func() oauth_repo.OauthRepositoryInterface) *RepositoriesMock_Oauth_Call {
	_c.Call.Return(run)
	return _c
}

// Permissions provides a mock function with no fields
func (_m *RepositoriesMock) Permissions() permissions_repo.PermissionsRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Permissions")
	}

	var r0 permissions_repo.PermissionsRepositoryInterface
	if rf, ok := ret.Get(0).(func() permissions_repo.PermissionsRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(permissions_repo.PermissionsRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Permissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Permissions'
type RepositoriesMock_Permissions_Call struct {
	*mock.Call
}

// Permissions is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Permissions() *RepositoriesMock_Permissions_Call {
	return &RepositoriesMock_Permissions_Call{Call: _e.mock.On("Permissions")}
}

func (_c *RepositoriesMock_Permissions_Call) Run(run func()) *RepositoriesMock_Permissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Permissions_Call) Return(_a0 permissions_repo.PermissionsRepositoryInterface) *RepositoriesMock_Permissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Permissions_Call) RunAndReturn(run func() permissions_repo.PermissionsRepositoryInterface) *RepositoriesMock_Permissions_Call {
	_c.Call.Return(run)
	return _c
}

// Project provides a mock function with no fields
func (_m *RepositoriesMock) Project() project_repo.ProjectRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Project")
	}

	var r0 project_repo.ProjectRepositoryInterface
	if rf, ok := ret.Get(0).(func() project_repo.ProjectRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(project_repo.ProjectRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Project_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Project'
type RepositoriesMock_Project_Call struct {
	*mock.Call
}

// Project is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Project() *RepositoriesMock_Project_Call {
	return &RepositoriesMock_Project_Call{Call: _e.mock.On("Project")}
}

func (_c *RepositoriesMock_Project_Call) Run(run func()) *RepositoriesMock_Project_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Project_Call) Return(_a0 project_repo.ProjectRepositoryInterface) *RepositoriesMock_Project_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Project_Call) RunAndReturn(run func() project_repo.ProjectRepositoryInterface) *RepositoriesMock_Project_Call {
	_c.Call.Return(run)
	return _c
}

// S3 provides a mock function with no fields
func (_m *RepositoriesMock) S3() s3_repo.S3RepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for S3")
	}

	var r0 s3_repo.S3RepositoryInterface
	if rf, ok := ret.Get(0).(func() s3_repo.S3RepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(s3_repo.S3RepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_S3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'S3'
type RepositoriesMock_S3_Call struct {
	*mock.Call
}

// S3 is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) S3() *RepositoriesMock_S3_Call {
	return &RepositoriesMock_S3_Call{Call: _e.mock.On("S3")}
}

func (_c *RepositoriesMock_S3_Call) Run(run func()) *RepositoriesMock_S3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_S3_Call) Return(_a0 s3_repo.S3RepositoryInterface) *RepositoriesMock_S3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_S3_Call) RunAndReturn(run func() s3_repo.S3RepositoryInterface) *RepositoriesMock_S3_Call {
	_c.Call.Return(run)
	return _c
}

// Service provides a mock function with no fields
func (_m *RepositoriesMock) Service() service_repo.ServiceRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Service")
	}

	var r0 service_repo.ServiceRepositoryInterface
	if rf, ok := ret.Get(0).(func() service_repo.ServiceRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service_repo.ServiceRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Service_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Service'
type RepositoriesMock_Service_Call struct {
	*mock.Call
}

// Service is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Service() *RepositoriesMock_Service_Call {
	return &RepositoriesMock_Service_Call{Call: _e.mock.On("Service")}
}

func (_c *RepositoriesMock_Service_Call) Run(run func()) *RepositoriesMock_Service_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Service_Call) Return(_a0 service_repo.ServiceRepositoryInterface) *RepositoriesMock_Service_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Service_Call) RunAndReturn(run func() service_repo.ServiceRepositoryInterface) *RepositoriesMock_Service_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceGroup provides a mock function with no fields
func (_m *RepositoriesMock) ServiceGroup() servicegroup_repo.ServiceGroupRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceGroup")
	}

	var r0 servicegroup_repo.ServiceGroupRepositoryInterface
	if rf, ok := ret.Get(0).(func() servicegroup_repo.ServiceGroupRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servicegroup_repo.ServiceGroupRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_ServiceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceGroup'
type RepositoriesMock_ServiceGroup_Call struct {
	*mock.Call
}

// ServiceGroup is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) ServiceGroup() *RepositoriesMock_ServiceGroup_Call {
	return &RepositoriesMock_ServiceGroup_Call{Call: _e.mock.On("ServiceGroup")}
}

func (_c *RepositoriesMock_ServiceGroup_Call) Run(run func()) *RepositoriesMock_ServiceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_ServiceGroup_Call) Return(_a0 servicegroup_repo.ServiceGroupRepositoryInterface) *RepositoriesMock_ServiceGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_ServiceGroup_Call) RunAndReturn(run func() servicegroup_repo.ServiceGroupRepositoryInterface) *RepositoriesMock_ServiceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// System provides a mock function with no fields
func (_m *RepositoriesMock) System() system_repo.SystemRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for System")
	}

	var r0 system_repo.SystemRepositoryInterface
	if rf, ok := ret.Get(0).(func() system_repo.SystemRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system_repo.SystemRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_System_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'System'
type RepositoriesMock_System_Call struct {
	*mock.Call
}

// System is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) System() *RepositoriesMock_System_Call {
	return &RepositoriesMock_System_Call{Call: _e.mock.On("System")}
}

func (_c *RepositoriesMock_System_Call) Run(run func()) *RepositoriesMock_System_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_System_Call) Return(_a0 system_repo.SystemRepositoryInterface) *RepositoriesMock_System_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_System_Call) RunAndReturn(run func() system_repo.SystemRepositoryInterface) *RepositoriesMock_System_Call {
	_c.Call.Return(run)
	return _c
}

// Team provides a mock function with no fields
func (_m *RepositoriesMock) Team() team_repo.TeamRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Team")
	}

	var r0 team_repo.TeamRepositoryInterface
	if rf, ok := ret.Get(0).(func() team_repo.TeamRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(team_repo.TeamRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Team_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Team'
type RepositoriesMock_Team_Call struct {
	*mock.Call
}

// Team is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Team() *RepositoriesMock_Team_Call {
	return &RepositoriesMock_Team_Call{Call: _e.mock.On("Team")}
}

func (_c *RepositoriesMock_Team_Call) Run(run func()) *RepositoriesMock_Team_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Team_Call) Return(_a0 team_repo.TeamRepositoryInterface) *RepositoriesMock_Team_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Team_Call) RunAndReturn(run func() team_repo.TeamRepositoryInterface) *RepositoriesMock_Team_Call {
	_c.Call.Return(run)
	return _c
}

// Template provides a mock function with no fields
func (_m *RepositoriesMock) Template() template_repo.TemplateRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Template")
	}

	var r0 template_repo.TemplateRepositoryInterface
	if rf, ok := ret.Get(0).(func() template_repo.TemplateRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template_repo.TemplateRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Template_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Template'
type RepositoriesMock_Template_Call struct {
	*mock.Call
}

// Template is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Template() *RepositoriesMock_Template_Call {
	return &RepositoriesMock_Template_Call{Call: _e.mock.On("Template")}
}

func (_c *RepositoriesMock_Template_Call) Run(run func()) *RepositoriesMock_Template_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Template_Call) Return(_a0 template_repo.TemplateRepositoryInterface) *RepositoriesMock_Template_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Template_Call) RunAndReturn(run func() template_repo.TemplateRepositoryInterface) *RepositoriesMock_Template_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with no fields
func (_m *RepositoriesMock) User() user_repo.UserRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 user_repo.UserRepositoryInterface
	if rf, ok := ret.Get(0).(func() user_repo.UserRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user_repo.UserRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type RepositoriesMock_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) User() *RepositoriesMock_User_Call {
	return &RepositoriesMock_User_Call{Call: _e.mock.On("User")}
}

func (_c *RepositoriesMock_User_Call) Run(run func()) *RepositoriesMock_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_User_Call) Return(_a0 user_repo.UserRepositoryInterface) *RepositoriesMock_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_User_Call) RunAndReturn(run func() user_repo.UserRepositoryInterface) *RepositoriesMock_User_Call {
	_c.Call.Return(run)
	return _c
}

// Variables provides a mock function with no fields
func (_m *RepositoriesMock) Variables() variable_repo.VariableRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Variables")
	}

	var r0 variable_repo.VariableRepositoryInterface
	if rf, ok := ret.Get(0).(func() variable_repo.VariableRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(variable_repo.VariableRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Variables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variables'
type RepositoriesMock_Variables_Call struct {
	*mock.Call
}

// Variables is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Variables() *RepositoriesMock_Variables_Call {
	return &RepositoriesMock_Variables_Call{Call: _e.mock.On("Variables")}
}

func (_c *RepositoriesMock_Variables_Call) Run(run func()) *RepositoriesMock_Variables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Variables_Call) Return(_a0 variable_repo.VariableRepositoryInterface) *RepositoriesMock_Variables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Variables_Call) RunAndReturn(run func() variable_repo.VariableRepositoryInterface) *RepositoriesMock_Variables_Call {
	_c.Call.Return(run)
	return _c
}

// Webhooks provides a mock function with no fields
func (_m *RepositoriesMock) Webhooks() webhook_repo.WebhookRepositoryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Webhooks")
	}

	var r0 webhook_repo.WebhookRepositoryInterface
	if rf, ok := ret.Get(0).(func() webhook_repo.WebhookRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(webhook_repo.WebhookRepositoryInterface)
		}
	}

	return r0
}

// RepositoriesMock_Webhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Webhooks'
type RepositoriesMock_Webhooks_Call struct {
	*mock.Call
}

// Webhooks is a helper method to define mock.On call
func (_e *RepositoriesMock_Expecter) Webhooks() *RepositoriesMock_Webhooks_Call {
	return &RepositoriesMock_Webhooks_Call{Call: _e.mock.On("Webhooks")}
}

func (_c *RepositoriesMock_Webhooks_Call) Run(run func()) *RepositoriesMock_Webhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoriesMock_Webhooks_Call) Return(_a0 webhook_repo.WebhookRepositoryInterface) *RepositoriesMock_Webhooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_Webhooks_Call) RunAndReturn(run func() webhook_repo.WebhookRepositoryInterface) *RepositoriesMock_Webhooks_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *RepositoriesMock) WithTx(ctx context.Context, fn func(repository.TxInterface) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(repository.TxInterface) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoriesMock_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type RepositoriesMock_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(repository.TxInterface) error
func (_e *RepositoriesMock_Expecter) WithTx(ctx interface{}, fn interface{}) *RepositoriesMock_WithTx_Call {
	return &RepositoriesMock_WithTx_Call{Call: _e.mock.On("WithTx", ctx, fn)}
}

func (_c *RepositoriesMock_WithTx_Call) Run(run func(ctx context.Context, fn func(repository.TxInterface) error)) *RepositoriesMock_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(repository.TxInterface) error))
	})
	return _c
}

func (_c *RepositoriesMock_WithTx_Call) Return(_a0 error) *RepositoriesMock_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoriesMock_WithTx_Call) RunAndReturn(run func(context.Context, func(repository.TxInterface) error) error) *RepositoriesMock_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoriesMock creates a new instance of RepositoriesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoriesMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoriesMock {
	mock := &RepositoriesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
